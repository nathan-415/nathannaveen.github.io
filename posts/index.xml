<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on nathan naveen</title><link>https://nathannaveen.dev/posts/</link><description>Recent content in Posts on nathan naveen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 07 Feb 2022 10:21:59 -0600</lastBuildDate><atom:link href="https://nathannaveen.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode 2160</title><link>https://nathannaveen.dev/posts/leetcode-2160/</link><pubDate>Mon, 07 Feb 2022 10:21:59 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2160/</guid><description>2160. Minimum Sum of Four Digit Number After Splitting Digits
How This Solution Works: The idea of this solution is pretty simple and relies on the fact that the minimum number is made by making the biggest number the last digit and the smallest number the first. For example: If we use the digits [4, 6, 1, 3, 0, 9], the minimum number we can make is 013469.
If we want the minimum sum, we just have to add the two minimum numbers together and get the minimum sum.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/">2160. Minimum Sum of Four Digit Number After Splitting Digits</a></p>
<h2 id="how-this-solution-works">How This Solution Works:</h2>
<p>The idea of this solution is pretty simple and relies on the fact that the minimum number is made by making the biggest number the last digit and the smallest number the first. For example: If we use the digits <code>[4, 6, 1, 3, 0, 9]</code>, the minimum number we can make is <code>013469</code>.</p>
<p>If we want the minimum sum, we just have to add the two minimum numbers together and get the minimum sum.</p>
<p>So let us say that we have <code>num = 4009</code>. We have the digits <code>[0, 0, 4, 9]</code>. Then the two minimum numbers that we can make are <code>04</code>, and <code>09</code>.</p>
<ul>
<li>For <code>new1</code>, the tens digit can be the smallest digit, <code>0</code>.</li>
<li>For <code>new2</code>, the tens digit can be the second smallest digit, <code>0</code>.</li>
<li>For <code>new1</code>, the ones digit can be the third smallest digit, <code>4</code>.</li>
<li>For <code>new2</code>, the ones digit can be the fourth smallest digit, <code>9</code>.</li>
</ul>
<hr>
<h2 id="walk-through-the-code">Walk Through the Code:</h2>
<ul>
<li>We can first add all the digits into the <code>digits</code> array.</li>
<li>Then we can sort <code>digits</code>.</li>
<li>The we can do <code>new1 := digits[0] * 10 + digits[2]</code>. This is baisically:
<ul>
<li>We do <code>digits[0] * 10</code>. This basically = <code>Minimum number * 10</code>. We do the <code>* 10</code> because this is how we make <code>digits[0]</code> into the tens digit.</li>
</ul>
</li>
<li>The we can do <code>new2 := digits[1] * 10 + digits[3]</code>. This is baisically:
<ul>
<li>We do <code>digits[1] * 10</code>. This basically = <code>Second minimum number * 10</code>. We do the <code>* 10</code> because this is how we make <code>digits[1]</code> into the tens digit.</li>
</ul>
</li>
</ul>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minimumSum</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">digits</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">num</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">digits</span> = append(<span style="color:#a6e22e">digits</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>)
        <span style="color:#a6e22e">num</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
    }
    
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">digits</span>)
    
    <span style="color:#a6e22e">new1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">digits</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">digits</span>[<span style="color:#ae81ff">2</span>]
    <span style="color:#a6e22e">new2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">digits</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">digits</span>[<span style="color:#ae81ff">3</span>]
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">new1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">new2</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 490</title><link>https://nathannaveen.dev/posts/leetcode-490/</link><pubDate>Fri, 04 Feb 2022 12:12:59 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-490/</guid><description>490. The Maze
The idea of this solution is to use BFS to find every path. And then if we find a path that leads to the destination we can return true.
I made a gif that basicly gives an example of all paths from start. Note that this is the same example as the problem statment.
While in the gif we just see the paths, in the code we have to make the path, meaning that we have to make a path one move at a time.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/the-maze/">490. The Maze</a></p>
<p>The idea of this solution is to use BFS to find every path. And then if we find a path that leads to the destination we can return <code>true</code>.</p>
<p>I made a gif that basicly gives an example of all paths from start. Note that this is the same example as the problem statment.</p>
<p><img src="https://i.imgur.com/Dq6Pei6.gif" alt=""></p>
<p>While in the gif we just see the paths, in the code we have to make the path, meaning that we have to make a path one move at a time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">point</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hasPath</span>(<span style="color:#a6e22e">maze</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">start</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">destination</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">start</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">start</span>[<span style="color:#ae81ff">1</span>] } }
    <span style="color:#a6e22e">visited</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">point</span>] <span style="color:#66d9ef">bool</span>)
    <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">maze</span>), len(<span style="color:#a6e22e">maze</span>[<span style="color:#ae81ff">0</span>])
    
    <span style="color:#a6e22e">helper</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">moveI</span>, <span style="color:#a6e22e">moveJ</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">m</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">maze</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">moveI</span>
            <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">moveJ</span>
        }
        <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">moveI</span>
        <span style="color:#a6e22e">j</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">moveJ</span>
        
        <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> })
            <span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] = <span style="color:#66d9ef">true</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[<span style="color:#ae81ff">0</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[<span style="color:#ae81ff">1</span>:]
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">destination</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">destination</span>[<span style="color:#ae81ff">1</span>] {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
        
        <span style="color:#a6e22e">helper</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div><hr>
<p>I have put <code>helper</code> outside of <code>hasPath</code>, so it might be easier to read.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">point</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">stack</span> = []<span style="color:#a6e22e">point</span>{ }
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">visited</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">point</span>] <span style="color:#66d9ef">bool</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">globalMaze</span> = [][]<span style="color:#66d9ef">int</span>{}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">moveI</span>, <span style="color:#a6e22e">moveJ</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) {
    <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">globalMaze</span>), len(<span style="color:#a6e22e">globalMaze</span>[<span style="color:#ae81ff">0</span>])
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">m</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">globalMaze</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">moveI</span>
        <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">moveJ</span>
    }
    <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">moveI</span>
    <span style="color:#a6e22e">j</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">moveJ</span>

    <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] {
        <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> })
        <span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] = <span style="color:#66d9ef">true</span>
    }
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hasPath</span>(<span style="color:#a6e22e">maze</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">start</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">destination</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">stack</span> = []<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">start</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">start</span>[<span style="color:#ae81ff">1</span>] } }
    <span style="color:#a6e22e">visited</span> = make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">point</span>] <span style="color:#66d9ef">bool</span>)
    <span style="color:#a6e22e">globalMaze</span> = <span style="color:#a6e22e">maze</span>
    <span style="color:#75715e">// n, m := len(maze), len(maze[0])
</span><span style="color:#75715e"></span>    
    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[<span style="color:#ae81ff">0</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[<span style="color:#ae81ff">1</span>:]
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">destination</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">destination</span>[<span style="color:#ae81ff">1</span>] {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
        
        <span style="color:#a6e22e">helper</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">j</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1102</title><link>https://nathannaveen.dev/posts/leetcode-1102/</link><pubDate>Fri, 04 Feb 2022 12:12:46 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1102/</guid><description>1102. Path With Maximum Minimum Value
This solution uses a max heap to keep track of all the paths, and which path we can go on to get the maximum minimum value.
type key struct { p pos min int } type pos struct { i, j int } type KeyHeap []key func (h KeyHeap) Len() int { return len(h) } func (h KeyHeap) Less(i, j int) bool { return h[i].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/path-with-maximum-minimum-value/">1102. Path With Maximum Minimum Value</a></p>
<p>This solution uses a max heap to keep track of all the paths, and which path we can go on to get the maximum minimum value.</p>
<p><img src="https://i.imgur.com/3Osyk1S.gif" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">p</span> <span style="color:#a6e22e">pos</span>
    <span style="color:#a6e22e">min</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pos</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">KeyHeap</span> []<span style="color:#a6e22e">key</span>

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Len</span>() <span style="color:#66d9ef">int</span>           { <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">h</span>) }
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Less</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">min</span> &gt; <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">min</span> } <span style="color:#75715e">// max of minimum
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Swap</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>)      { <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>] }

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">interface</span>{}) {
    <span style="color:#f92672">*</span><span style="color:#a6e22e">h</span> = append(<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">x</span>.(<span style="color:#a6e22e">key</span>))
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Pop</span>() <span style="color:#66d9ef">interface</span>{} {
	<span style="color:#a6e22e">old</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">h</span>
	<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">old</span>)
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">old</span>[<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
	<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span> = <span style="color:#a6e22e">old</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maximumMinimumPath</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">KeyHeap</span>{ <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pos</span>{ <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span> }, <span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>] } }
    <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">h</span>)
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">grid</span>)
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>])
    <span style="color:#a6e22e">visited</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">pos</span>] <span style="color:#66d9ef">bool</span>)
    
    <span style="color:#a6e22e">helper</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">min</span> <span style="color:#66d9ef">int</span>) {
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pos</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">m</span> <span style="color:#f92672">&amp;&amp;</span> !<span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">p</span>] {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] &lt; <span style="color:#a6e22e">min</span> {
                <span style="color:#a6e22e">min</span> = <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]
            }
            <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">p</span>, <span style="color:#a6e22e">min</span> })
            <span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">p</span>] = <span style="color:#66d9ef">true</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">Len</span>() <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Pop</span>(<span style="color:#a6e22e">h</span>).(<span style="color:#a6e22e">key</span>)
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">j</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">m</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">min</span>
        }
        
        <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">min</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">min</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">min</span>)
        <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">min</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#75715e">// we should never get here
</span><span style="color:#75715e"></span>}
</code></pre></div>]]></content></item><item><title>Leetcode 2155</title><link>https://nathannaveen.dev/posts/leetcode-2155/</link><pubDate>Fri, 04 Feb 2022 12:12:40 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2155/</guid><description>2155. All Divisions With the Highest Score of a Binary Array
The idea of this solution is to loop through nums and add one to a zero count if we have a zero, and subtract one from a one counter if it is a one. This can be shown using an illustration:
func maxScoreIndices(nums []int) []int { numZeros := 0 numOnes := 0 for _, n := range nums { numOnes += n } max := numOnes res := []int{0} for i, n := range nums { if n == 0 { numZeros++ } else { numOnes-- } if numZeros + numOnes &amp;gt; max { max = numZeros + numOnes res = []int{ i + 1 } } else if numZeros + numOnes == max { res = append(res, i + 1) } } return res } We can put:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/">2155. All Divisions With the Highest Score of a Binary Array</a></p>
<p>The idea of this solution is to loop through <code>nums</code> and add one to a zero count if we have a zero, and subtract one from a one counter if it is a one. This can be shown using an illustration:</p>
<p><img src="https://i.imgur.com/ymBAmcM.gif" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxScoreIndices</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">numOnes</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">numOnes</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span>
    }
    
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">numOnes</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">0</span>}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">numZeros</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">numOnes</span><span style="color:#f92672">--</span>
        }
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numOnes</span> &gt; <span style="color:#a6e22e">max</span> {
            <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numOnes</span>
            <span style="color:#a6e22e">res</span> = []<span style="color:#66d9ef">int</span>{ <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> }
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numOnes</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">max</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><hr>
<p>We can put:</p>
<pre tabindex="0"><code>if numZeros + numOnes &gt; max {
    max = numZeros + numOnes
    res = []int{ i + 1 }
} else if numZeros + numOnes == max {
    res = append(res, i + 1)
}
</code></pre><p>Into if <code>n == 0</code> because we can only get a max if we add to <code>numZeros</code>, not subtracting from <code>numOnes</code>.</p>
<p>This makes the code less readable, but it is better time-wise.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxScoreIndices</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">numOnes</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">numOnes</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span>
    }
    
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">numOnes</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">0</span>}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">numZeros</span><span style="color:#f92672">++</span>
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numOnes</span> &gt; <span style="color:#a6e22e">max</span> {
                <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numOnes</span>
                <span style="color:#a6e22e">res</span> = []<span style="color:#66d9ef">int</span>{ <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> }
            } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">numZeros</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numOnes</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">max</span> {
                <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
            }
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">numOnes</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><hr>
<p>In this solution, we can put <code>numZeros</code>, and <code>numOnes</code> into one variable called <code>total</code>. This works because if we have a zero, we can add one to <code>total</code>, and if we have a <code>1</code>, we can subtract from <code>total</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxScoreIndices</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">total</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">total</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span>
    }
    
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">total</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{ <span style="color:#ae81ff">0</span> }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">total</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">total</span><span style="color:#f92672">--</span>
        }
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">total</span> &gt; <span style="color:#a6e22e">max</span> {
            <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">total</span>
            <span style="color:#a6e22e">res</span> = []<span style="color:#66d9ef">int</span>{ <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> }
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">total</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">max</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2154</title><link>https://nathannaveen.dev/posts/leetcode-2154/</link><pubDate>Fri, 04 Feb 2022 12:12:34 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2154/</guid><description>2154. Keep Multiplying Found Values by Two
The idea of both of these solutions is to add nums elements to a map, and then just keep checking whether original *= 2 is in the map.
Instead of original *= 2 I am doing original &amp;lt;&amp;lt;= 1 for better time.
In the first solution I am only adding elements that are multiples of original to the map.
func findFinalValue(nums []int, original int) int { m := make(map[int] bool) for _, n := range nums { if n % original == 0 { m[n] = true } } for m[original] { original &amp;lt;&amp;lt;= 1 } return original } In the second solution I am adding all elements from nums to the map.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/keep-multiplying-found-values-by-two/">2154. Keep Multiplying Found Values by Two</a></p>
<p>The idea of both of these solutions is to add <code>nums</code> elements to a map, and then just keep checking whether <code>original *= 2</code> is in the map.</p>
<p>Instead of <code>original *= 2</code> I am doing <code>original &lt;&lt;= 1</code> for better time.</p>
<hr>
<p>In the first solution I am only adding elements that are multiples of <code>original</code> to the map.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findFinalValue</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">original</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">bool</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">original</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">n</span>] = <span style="color:#66d9ef">true</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">original</span>] {
        <span style="color:#a6e22e">original</span> <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">original</span>
}
</code></pre></div><hr>
<p>In the second solution I am adding all elements from <code>nums</code> to the map. Note that this solution has a little worse average space complexity. In the worst case they will both have the same complexity.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findFinalValue</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">original</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">bool</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">n</span>] = <span style="color:#66d9ef">true</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">original</span>] {
        <span style="color:#a6e22e">original</span> <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">original</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 149</title><link>https://nathannaveen.dev/posts/leetcode-149/</link><pubDate>Fri, 04 Feb 2022 12:12:27 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-149/</guid><description>149. Max Points on a Line
The idea of this solution is that we start off with a point and then use all the other points to make a line from the start point to one of the other points. Then we can find the slope of the line. Then we can find which slope has the highest number of points.
func maxPoints(points [][]int) int { max := 0 for i := 0; i &amp;lt; len(points); i++ { m := make(map[float64] int) // slope : number of points on the slope for j := 0; j &amp;lt; len(points); j++ { x1, x2, y1, y2 := points[i][0], points[j][0], points[i][1], points[j][1] slope := float64(y2 - y1) / float64(x2 - x1) m[slope]++ } for _, b := range m { newB := (b + 1) if newB &amp;gt; max { max = newB } } } if len(points) == 1 { return 1 } return max }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/max-points-on-a-line/">149. Max Points on a Line</a></p>
<p>The idea of this solution is that we start off with a point and then use all the other points to make a line from the start point to one of the other points. Then we can find the slope of the line. Then we can find which slope has the highest number of points.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxPoints</span>(<span style="color:#a6e22e">points</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">points</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">float64</span>] <span style="color:#66d9ef">int</span>) <span style="color:#75715e">// slope : number of points on the slope
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">points</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">x1</span>, <span style="color:#a6e22e">x2</span>, <span style="color:#a6e22e">y1</span>, <span style="color:#a6e22e">y2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">j</span>][<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">j</span>][<span style="color:#ae81ff">1</span>]
            
            <span style="color:#a6e22e">slope</span> <span style="color:#f92672">:=</span> float64(<span style="color:#a6e22e">y2</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">y1</span>) <span style="color:#f92672">/</span> float64(<span style="color:#a6e22e">x2</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">x1</span>)
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">slope</span>]<span style="color:#f92672">++</span>
        }
        
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span> {
            <span style="color:#a6e22e">newB</span> <span style="color:#f92672">:=</span> (<span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newB</span> &gt; <span style="color:#a6e22e">max</span> { <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">newB</span> }
        }
    }
    
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">points</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span> }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">max</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2144</title><link>https://nathannaveen.dev/posts/leetcode-2144/</link><pubDate>Fri, 04 Feb 2022 12:12:21 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2144/</guid><description>2144. Minimum Cost of Buying Candies With Discount
We have to get the items with a maximum discount to get the minimum cost we have to pay.
For example if we have:
input: cost = [3, 7, 1, 5, 9, 11, 15]
We know that the maximum discount we can get is 9 because we can buy two candies with costs 11 and 15.
Now let us sort cost in non-increasing order.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-cost-of-buying-candies-with-discount/">2144. Minimum Cost of Buying Candies With Discount</a></p>
<p>We have to get the items with a maximum discount to get the minimum cost we have to pay.</p>
<hr>
<p>For example if we have:</p>
<p><code>input: cost = [3, 7, 1, 5, 9, 11, 15]</code></p>
<p>We know that the maximum discount we can get is <code>9</code> because we can buy two candies with costs <code>11</code> and <code>15</code>.</p>
<p>Now let us sort <code>cost</code> in non-increasing order. Using this, we can get the maximum discounts we can get throughout:</p>
<p><code>cost = [15, 11, 9, 7, 5, 3, 1]</code></p>
<p>We can start with the first elements <code>15, 11, 9</code>. We can buy candies <code>15</code> and <code>11</code>, and get a discount of <code>9</code>.</p>
<p>Then we have elements <code>7, 5, 3</code>. We can buy elements <code>7</code>, and <code>5</code> to get a discount of <code>3</code>.</p>
<p>Then we have to buy <code>1</code>.</p>
<hr>
<p>So basically, if we sort <code>nums</code> in non-increasing order and then if an element is the third element, we know it is the discount element.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minimumCost</span>(<span style="color:#a6e22e">cost</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">cost</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cost</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">cost</span>[<span style="color:#a6e22e">j</span>] })
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">cost</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#66d9ef">continue</span>
        }
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">cost</span>[<span style="color:#a6e22e">i</span>]
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 520</title><link>https://nathannaveen.dev/posts/leetcode-520/</link><pubDate>Fri, 04 Feb 2022 12:12:15 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-520/</guid><description>520. Detect Capital
Solution 1: This solution is pretty simple, we can make three strings then compare them to word, and see if any of them match, if they do we can return true.
The three strings that we can make are:
allCap, this is for the whole word to be upper case (ie. &amp;quot;LEETCODE&amp;quot;) allLower, this is for the whole word to be lower case (ie. &amp;quot;leetcode&amp;quot;) firstCap, this is for the whole word to be lower case except for the first letter which is uppercase (ie.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/detect-capital/">520. Detect Capital</a></p>
<h3 id="solution-1">Solution 1:</h3>
<p>This solution is pretty simple, we can make three strings then compare them to <code>word</code>, and see if any of them match, if they do we can return <code>true</code>.</p>
<p>The three strings that we can make are:</p>
<ul>
<li><code>allCap</code>, this is for the whole word to be upper case (ie. <code>&quot;LEETCODE&quot;</code>)</li>
<li><code>allLower</code>, this is for the whole word to be lower case (ie. <code>&quot;leetcode&quot;</code>)</li>
<li><code>firstCap</code>, this is for the whole word to be lower case except for the first letter which is uppercase (ie. <code>&quot;Leetcode&quot;</code>)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">detectCapitalUse</span>(<span style="color:#a6e22e">word</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">allCap</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToUpper</span>(<span style="color:#a6e22e">word</span>)
    <span style="color:#a6e22e">allLower</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">word</span>)
    <span style="color:#a6e22e">firstCap</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToUpper</span>(string(<span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">0</span>])) <span style="color:#f92672">+</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">word</span>)[<span style="color:#ae81ff">1</span>:]
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">word</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">allCap</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">word</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">allLower</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">word</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">firstCap</span>
}
</code></pre></div><h3 id="solution-2">Solution 2:</h3>
<p>The second solution uses the fact that in <code>&quot;leetcode&quot;</code> and <code>&quot;Leetcode&quot;</code> there is a common <code>&quot;eetcode&quot;</code>. This means that whatever the first letter is, if the remaining part of the word is lowercase we know that all the letters in <code>word</code> are lowercase, or the first letter is the only letter that is upper case.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">detectCapitalUse</span>(<span style="color:#a6e22e">word</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">allCap</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToUpper</span>(<span style="color:#a6e22e">word</span>)
    <span style="color:#a6e22e">remainingPart</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">ToLower</span>(<span style="color:#a6e22e">word</span>)[<span style="color:#ae81ff">1</span>:]
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">word</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">allCap</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">1</span>:] <span style="color:#f92672">==</span> <span style="color:#a6e22e">remainingPart</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2128</title><link>https://nathannaveen.dev/posts/leetcode-2128/</link><pubDate>Wed, 19 Jan 2022 13:01:56 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2128/</guid><description>2128. Remove All Ones With Row and Column Flips
The idea of this solution can be shown using the following image:
As we can see if a row is equal to the inverse of the first row we know that we can flip it to be equal to the first row. And if the row is equal to the first row we don&amp;rsquo;t need to flip it at all.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-all-ones-with-row-and-column-flips/">2128. Remove All Ones With Row and Column Flips</a></p>
<p>The idea of this solution can be shown using the following image:</p>
<p><img src="https://i.imgur.com/eP4CU9w.jpg" alt=""></p>
<blockquote>
<p>As we can see if a row is equal to the inverse of the first row we know that we can flip it to be equal to the first row. And if the row is equal to the first row we don&rsquo;t need to flip it at all.</p>
<p>Then if all the rows are equal we can just flip the columns that need flipping.</p>
</blockquote>
<p>This solution doesn&rsquo;t flip rows or columns, it checks whether a row is the inverse or the same as the first row.</p>
<p>The time complexity is <code>O(n + m)</code> because we first loop throught row 0, then we loop through column 0.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeOnes</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">grid</span>), len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>])
    <span style="color:#a6e22e">invert</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]))
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">m</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">invert</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> (<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>][<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">DeepEqual</span>(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">||</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">DeepEqual</span>(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">invert</span>) {
            <span style="color:#66d9ef">continue</span>
        }
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p>I got the idea of this solution from <a href="https://leetcode.com/problems/remove-all-ones-with-row-and-column-flips/discuss/1671908/Python-3-or-Math-or-Explanation">this solution</a>.</p>
]]></content></item><item><title>Leetcode 1926</title><link>https://nathannaveen.dev/posts/leetcode-1926/</link><pubDate>Wed, 19 Jan 2022 13:01:49 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1926/</guid><description>1926. Nearest Exit from Entrance in Maze
I decided to try a solution that is similar to Dijkstra&amp;rsquo;s. Even though the positions are not weighted, we can make the distance the weight, so the nodes farther away from the start have a higher weight than the closer ones. All in all, we have to find the node on the edge with the smallest weight.
This can be shown using the following image:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/">1926. Nearest Exit from Entrance in Maze</a></p>
<p>I decided to try a solution that is similar to Dijkstra&rsquo;s. Even though the positions are not weighted, we can make the distance the weight, so the nodes farther away from the start have a higher weight than the closer ones. All in all, we have to find the node on the edge with the smallest weight.</p>
<p>This can be shown using the following image:</p>
<p><img src="https://i.imgur.com/P6DRDqC.jpg" alt=""></p>
<p>In the image above, the numbers represent the distance from the start (The weight of the node).</p>
<p>You might be thinking that we can get the manhattan distance to the nearest edge, but that won&rsquo;t work because we have walls in the middle. For example:</p>
<p><img src="https://i.imgur.com/QId8tX0.jpg" alt=""></p>
<p>This is the reason that I decided to use Dijkstra&rsquo;s algorithum.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">KeyHeap</span> []<span style="color:#a6e22e">key</span>

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Len</span>() <span style="color:#66d9ef">int</span>           { <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">h</span>) }
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Less</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">dist</span> &lt; <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">dist</span> }
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Swap</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>)      { <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>] }
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">interface</span>{}) { <span style="color:#f92672">*</span><span style="color:#a6e22e">h</span> = append(<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">x</span>.(<span style="color:#a6e22e">key</span>)) }

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Pop</span>() <span style="color:#66d9ef">interface</span>{} {
	<span style="color:#a6e22e">old</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">h</span>
	<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">old</span>)
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">old</span>[<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
	<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span> = <span style="color:#a6e22e">old</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span>
}

<span style="color:#75715e">// Everything above is the Min Heap
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pos</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">p</span> <span style="color:#a6e22e">pos</span> <span style="color:#75715e">// position of current move
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">dist</span> <span style="color:#66d9ef">int</span> <span style="color:#75715e">// distance from enterence
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">nearestExit</span>(<span style="color:#a6e22e">maze</span> [][]<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">entrance</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">visited</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">pos</span>] <span style="color:#66d9ef">bool</span>)
    <span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">pos</span>{ <span style="color:#a6e22e">entrance</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">entrance</span>[<span style="color:#ae81ff">1</span>] }] = <span style="color:#66d9ef">true</span>
    <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">KeyHeap</span>{ <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pos</span>{ <span style="color:#a6e22e">entrance</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">entrance</span>[<span style="color:#ae81ff">1</span>] }, <span style="color:#ae81ff">0</span> } }
    <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">maze</span>), len(<span style="color:#a6e22e">maze</span>[<span style="color:#ae81ff">0</span>])
    
    <span style="color:#a6e22e">addToHeap</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">dist</span> <span style="color:#66d9ef">int</span>) {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">m</span> <span style="color:#f92672">&amp;&amp;</span> !<span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">pos</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">maze</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;+&#39;</span> {
            <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pos</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }, <span style="color:#a6e22e">dist</span> })
            <span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">pos</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] = <span style="color:#66d9ef">true</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">Len</span>() &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Pop</span>(<span style="color:#a6e22e">h</span>).(<span style="color:#a6e22e">key</span>)
        <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">dist</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">dist</span>
        
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">m</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">dist</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#75715e">// if position is on the edge, and position is not where we started.
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">dist</span>
        }
        
        <span style="color:#75715e">// Calling addToHeap() so we can add each adjacent node to the Min Heap
</span><span style="color:#75715e"></span>        
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">dist</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">dist</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">dist</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">dist</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2124</title><link>https://nathannaveen.dev/posts/leetcode-2124/</link><pubDate>Wed, 19 Jan 2022 13:01:42 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2124/</guid><description>2124. Check if All A&amp;rsquo;s Appears Before All B&amp;rsquo;s
The idea of my solution is pretty simple. If the sorted version of s equals the non sorted version of s we know that every &amp;quot;a&amp;quot; comes before every &amp;quot;b&amp;quot;. Some examples could be:
s = &amp;quot;abab&amp;quot;, sortedS = &amp;quot;aabb&amp;quot;, &amp;quot;abab&amp;quot; != &amp;quot;aabb&amp;quot; so return false. s = &amp;quot;aabbb&amp;quot;, sortedS = &amp;quot;aabbb&amp;quot;, &amp;quot;aabbb&amp;quot; == &amp;quot;aabbb&amp;quot; so return true. s = &amp;quot;bba&amp;quot;, sortedS = &amp;quot;abb&amp;quot;, &amp;quot;bba&amp;quot; !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/">2124. Check if All A&rsquo;s Appears Before All B&rsquo;s</a></p>
<p>The idea of my solution is pretty simple. If the sorted version of <code>s</code> equals the non sorted version of <code>s</code> we know that every <code>&quot;a&quot;</code> comes before every <code>&quot;b&quot;</code>. Some examples could be:</p>
<ul>
<li><code>s = &quot;abab&quot;</code>, <code>sortedS = &quot;aabb&quot;</code>, <code>&quot;abab&quot; != &quot;aabb&quot;</code> so return <code>false</code>.</li>
<li><code>s = &quot;aabbb&quot;</code>, <code>sortedS = &quot;aabbb&quot;</code>, <code>&quot;aabbb&quot; == &quot;aabbb&quot;</code> so return <code>true</code>.</li>
<li><code>s = &quot;bba&quot;</code>, <code>sortedS = &quot;abb&quot;</code>, <code>&quot;bba&quot; != &quot;abb&quot;</code> so return <code>false</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkString</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">splitS</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">s</span>, <span style="color:#e6db74">&#34;&#34;</span>)
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Strings</span>(<span style="color:#a6e22e">splitS</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">splitS</span>, <span style="color:#e6db74">&#34;&#34;</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 2095</title><link>https://nathannaveen.dev/posts/leetcode-2095/</link><pubDate>Wed, 19 Jan 2022 13:01:36 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2095/</guid><description>2095. Delete the Middle Node of a Linked List
The idea of this solution is to use three-pointers, like in the following example:
Remember that the hare will always go up two values, while prev and turtle will only go up one.
The hare has reached the end, so we can stop moving the hare, turtle, and prev. Now, we have to remove the turtles position by doing prev.Next = prev.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/">2095. Delete the Middle Node of a Linked List</a></p>
<p>The idea of this solution is to use three-pointers, like in the following example:</p>
<p>Remember that the <code>hare</code> will always go up two values, while <code>prev</code> and <code>turtle</code> will only go up one.</p>
<p><img src="https://i.imgur.com/GCh5KZK.png" alt=""></p>
<p>The hare has reached the end, so we can stop moving the <code>hare</code>, <code>turtle</code>, and <code>prev</code>. Now, we have to remove the turtles position by doing <code>prev.Next = prev.Next.Next</code>.</p>
<p>We can do the same thing for input with even length.</p>
<p><img src="https://i.imgur.com/d8is3KJ.png" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">deleteMiddle</span>(<span style="color:#a6e22e">head</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">head</span>.<span style="color:#a6e22e">Next</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span> }
    
    <span style="color:#a6e22e">turtle</span>, <span style="color:#a6e22e">hare</span>, <span style="color:#a6e22e">prev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>, <span style="color:#a6e22e">head</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ListNode</span>{ <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">head</span> }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">hare</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">hare</span>.<span style="color:#a6e22e">Next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">hare</span> = <span style="color:#a6e22e">hare</span>.<span style="color:#a6e22e">Next</span>.<span style="color:#a6e22e">Next</span>
        <span style="color:#a6e22e">turtle</span> = <span style="color:#a6e22e">turtle</span>.<span style="color:#a6e22e">Next</span>
        <span style="color:#a6e22e">prev</span> = <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span>
    }
    
    <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span> = <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span>.<span style="color:#a6e22e">Next</span>
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">head</span>
}
</code></pre></div><p><strong>The Solution Can Be Simplified:</strong></p>
<p>Then we can remove the whole turtle pointer because it is not used in removing the middle node, so we can do:</p>
<p><img src="https://i.imgur.com/BFAoFjG.png" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">deleteMiddle</span>(<span style="color:#a6e22e">head</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">head</span>.<span style="color:#a6e22e">Next</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span> }
    
    <span style="color:#a6e22e">hare</span>, <span style="color:#a6e22e">prev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ListNode</span>{ <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">head</span> }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">hare</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">hare</span>.<span style="color:#a6e22e">Next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">hare</span> = <span style="color:#a6e22e">hare</span>.<span style="color:#a6e22e">Next</span>.<span style="color:#a6e22e">Next</span>
        <span style="color:#a6e22e">prev</span> = <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span>
    }
    
    <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span> = <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span>.<span style="color:#a6e22e">Next</span>
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">head</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2119</title><link>https://nathannaveen.dev/posts/leetcode-2119/</link><pubDate>Wed, 19 Jan 2022 13:01:31 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2119/</guid><description>The idea of this solution is that any number that has a 0 at the end will result in a different number after reversed twice.
This is shown using the numbers:
3210 reversed equals 123 which reversed again equals 321 31000 reversed equals 13 which reversed again equals 31 The only exception for this rule in the number 0. because 0 zero reversed any amount of times equals 0.</description><content type="html"><![CDATA[<p>The idea of this solution is that any number that has a <code>0</code> at the end will result in a different number after reversed twice.</p>
<p>This is shown using the numbers:</p>
<ul>
<li><code>3210</code> reversed equals <code>123</code> which reversed again equals <code>321</code></li>
<li><code>31000</code> reversed equals <code>13</code> which reversed again equals <code>31</code></li>
</ul>
<p>The only exception for this rule in the number <code>0</code>. because <code>0</code> zero reversed any amount of times equals <code>0</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isSameAfterReversals</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2089</title><link>https://nathannaveen.dev/posts/leetcode-2089/</link><pubDate>Wed, 19 Jan 2022 13:01:15 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2089/</guid><description>2089. Find Target Indices After Sorting Array
Let us take an example of nums = [1, 2, 5, 2, 3, 1, 2] and target = 2. If we sort nums we get nums = [1, 1, 2, 2, 2, 3, 5]. If we know, there are three twos in nums and two items with values smaller than theirs. We know that the result will be [2, 3, 4].
So basically, this solution makes an array of the number of values that equal target where each value will be one more than the previous value.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-target-indices-after-sorting-array/">2089. Find Target Indices After Sorting Array</a></p>
<p>Let us take an example of <code>nums = [1, 2, 5, 2, 3, 1, 2]</code> and <code>target = 2</code>. If we sort <code>nums</code> we get <code>nums = [1, 1, 2, 2, 2, 3, 5]</code>. If we know, there are three twos in <code>nums</code> and two items with values smaller than theirs. We know that the result will be <code>[2, 3, 4]</code>.</p>
<p>So basically, this solution makes an array of the number of values that equal <code>target</code> where each value will be one more than the previous value. After that, the code then adds the number of values smaller than <code>target</code> them.</p>
<p>Let us say that we take the same example that we used before (<code>nums = [1, 2, 5, 2, 3, 1, 2]</code> and <code>target = 2</code>). If we find the number of values equal to target, we get <code>3</code>, and the number of values smaller than the target is <code>2</code>. So we will first make an array of <code>res = [0, 1, 2]</code>, then we can add <code>2</code> to all of them and get <code>res = [2, 3, 4]</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">targetIndices</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">startAt</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">target</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">c</span>)
            <span style="color:#a6e22e">c</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> &lt; <span style="color:#a6e22e">target</span> {
            <span style="color:#a6e22e">startAt</span><span style="color:#f92672">++</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">c</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+=</span> <span style="color:#a6e22e">startAt</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p>We can remove the part where we make <code>res</code> at first from the first loop and put it into the second one (We are removing the part where we do the <code>res = [0, 1, 2]</code> from the first loop and combining it with the second loop, so <code>res = [2, 3, 4]</code> in one go). This might be easier to understand.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">targetIndices</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">startAt</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">target</span> {
            <span style="color:#a6e22e">c</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> &lt; <span style="color:#a6e22e">target</span> {
            <span style="color:#a6e22e">startAt</span><span style="color:#f92672">++</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">c</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">startAt</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2083</title><link>https://nathannaveen.dev/posts/leetcode-2083/</link><pubDate>Wed, 19 Jan 2022 13:01:07 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2083/</guid><description>2083. Substrings That Begin and End With the Same Letter
func numberOfSubstrings(s string) int64 { m := make(map[rune] int) res := int64(0) for _, letter := range s { m[letter]++ res += int64(m[letter]) } return res } The second solution is the fun solution. We can find the number of substrings, the beginning, and the end in the same letter. To show how this is done, we can take an example of &amp;quot;aaaaaa&amp;quot;:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/substrings-that-begin-and-end-with-the-same-letter/">2083. Substrings That Begin and End With the Same Letter</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numberOfSubstrings</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int64</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">rune</span>] <span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> int64(<span style="color:#ae81ff">0</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">letter</span>]<span style="color:#f92672">++</span>
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> int64(<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">letter</span>])
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p>The second solution is the fun solution. We can find the number of substrings, the beginning, and the end in the same letter. To show how this is done, we can take an example of <code>&quot;aaaaaa&quot;</code>:</p>
<p><img src="https://i.imgur.com/H5jFMVU.jpg" alt=""></p>
<ul>
<li>Note that in this image, I am only pointing to the start and end letter of the substring.</li>
<li>As you can see in the image, we can get a certain number of substrings in a string of 6 letters:
<ul>
<li>We can get <code>1</code> substring of length <code>6</code></li>
<li>We can get <code>2</code> substrings of length <code>5</code></li>
<li>We can get <code>3</code> substrings of length <code>4</code></li>
<li>We can get <code>4</code> substrings of length <code>3</code></li>
<li>We can get <code>5</code> substrings of length <code>2</code></li>
<li>We can get <code>6</code> substrings of length <code>1</code></li>
</ul>
</li>
<li>Now if we add all the substrings together we get <code>1 + 2 + 3 + 4 + 5 + 6 = 21</code>. This is equal to the sum of the first <code>6</code> numbers. The equation for the sum of the first <code>n</code> numbers is <code>(n * (n + 1)) / 2</code>, so if we make <code>n = 6</code> then <code>(6 * (6 + 1)) / 2 = (6 * 7) / 2 = 42 / 2 = 21</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numberOfSubstrings</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int64</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">rune</span>] <span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> int64(<span style="color:#ae81ff">0</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">letter</span>]<span style="color:#f92672">++</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> int64((<span style="color:#a6e22e">val</span> <span style="color:#f92672">*</span> (<span style="color:#a6e22e">val</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 778</title><link>https://nathannaveen.dev/posts/leetcode-778/</link><pubDate>Wed, 19 Jan 2022 13:00:51 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-778/</guid><description>778. Swim in Rising Water
Time complexity = O(n2log(n))
n2is for looping through all the elements in grid where n == len(grid). Note that it is n2instead of n * m because len(grid) == len(grid[0]). log(n) is for the priority queue. Note that this is a computer science log(n) when log(n) == log2(n) instead of math where log(n) == log10(n). type key struct { max int r, c int } type RowAndCol struct { r, c int } type KeyHeap []key func (h KeyHeap) Len() int { return len(h) } func (h KeyHeap) Less(i, j int) bool { return h[i].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/swim-in-rising-water/">778. Swim in Rising Water</a></p>
<p>Time complexity = O(n<!-- raw HTML omitted -->2<!-- raw HTML omitted -->log(n))</p>
<ul>
<li>n<!-- raw HTML omitted -->2<!-- raw HTML omitted --> is for looping through all the elements in <code>grid</code> where <code>n == len(grid)</code>. Note that it is n<!-- raw HTML omitted -->2<!-- raw HTML omitted --> instead of <code>n * m</code> because <code>len(grid) == len(grid[0])</code>.</li>
<li>log(n) is for the priority queue. Note that this is a computer science log(n) when log(n) == log<!-- raw HTML omitted -->2<!-- raw HTML omitted -->(n) instead of math where log(n) == log<!-- raw HTML omitted -->10<!-- raw HTML omitted -->(n).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">max</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">RowAndCol</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">KeyHeap</span> []<span style="color:#a6e22e">key</span>

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Len</span>() <span style="color:#66d9ef">int</span>           { <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">h</span>) }
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Less</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">max</span> &lt; <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">max</span> }
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Swap</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>)      { <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>] }

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">interface</span>{}) {
	<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span> = append(<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">x</span>.(<span style="color:#a6e22e">key</span>))
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">KeyHeap</span>) <span style="color:#a6e22e">Pop</span>() <span style="color:#66d9ef">interface</span>{} {
	<span style="color:#a6e22e">old</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">h</span>
	<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">old</span>)
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">old</span>[<span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
	<span style="color:#f92672">*</span><span style="color:#a6e22e">h</span> = <span style="color:#a6e22e">old</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">swimInWater</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">KeyHeap</span>{}
	<span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">h</span>)
    <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span> })
    
    <span style="color:#a6e22e">visited</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">RowAndCol</span>] <span style="color:#66d9ef">bool</span>)
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">grid</span>) <span style="color:#75715e">// The grid is a square, so len(grid) == len(grid[0])
</span><span style="color:#75715e"></span>    
    <span style="color:#a6e22e">addToHeap</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">max</span> <span style="color:#66d9ef">int</span>) {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">r</span> &lt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">c</span> &lt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">&amp;&amp;</span> !<span style="color:#a6e22e">visited</span>[<span style="color:#a6e22e">RowAndCol</span>{ <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> }] {
            <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Push</span>(<span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">key</span>{ int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Max</span>(float64(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">r</span>][<span style="color:#a6e22e">c</span>]), float64(<span style="color:#a6e22e">max</span>))), <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> })
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">Len</span>() <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">heap</span>.<span style="color:#a6e22e">Pop</span>(<span style="color:#a6e22e">h</span>).(<span style="color:#a6e22e">key</span>)
        <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">c</span>
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> { <span style="color:#75715e">// if the bottom right most square
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">max</span>
        }
        
        <span style="color:#a6e22e">visited</span>[ <span style="color:#a6e22e">RowAndCol</span>{ <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> } ] = <span style="color:#66d9ef">true</span>
        
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">r</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">max</span>)
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">r</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">max</span>)
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">max</span>)
        <span style="color:#a6e22e">addToHeap</span>(<span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">max</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2068</title><link>https://nathannaveen.dev/posts/leetcode-2068/</link><pubDate>Wed, 19 Jan 2022 13:00:44 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2068/</guid><description>2068. Check Whether Two Strings are Almost Equivalent
The time complexity of the first solution is O(2n + 26)
The 2n is for looping through both word1 and word2. They both are the same length, so we get 2n instead of n * m The 26 is for looping through len(letters), because there are 26 letters in the alphabet. func checkAlmostEquivalent(word1 string, word2 string) bool { letters := make([]int, 26) for i := 0; i &amp;lt; len(word1); i++ { letters[int(word1[i] - &amp;#39;a&amp;#39;)]++ letters[int(word2[i] - &amp;#39;a&amp;#39;)]-- } for _, a := range letters { if a &amp;lt; -3 || a &amp;gt; 3 { return false } } return true } The worst time complexity of the following solution is O(2n + 26), but since we are using a map instead of an array the time complexity can range from O(2n + 1) to O(2n + 26).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/">2068. Check Whether Two Strings are Almost Equivalent</a></p>
<p>The time complexity of the first solution is <code>O(2n + 26)</code></p>
<ul>
<li>The <code>2n</code> is for looping through both <code>word1</code> and <code>word2</code>. They both are the same length, so we get <code>2n</code> instead of <code>n * m</code></li>
<li>The <code>26</code> is for looping through <code>len(letters)</code>, because there are <code>26</code> letters in the alphabet.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkAlmostEquivalent</span>(<span style="color:#a6e22e">word1</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">word2</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">letters</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">26</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">word1</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">letters</span>[int(<span style="color:#a6e22e">word1</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>)]<span style="color:#f92672">++</span>
        <span style="color:#a6e22e">letters</span>[int(<span style="color:#a6e22e">word2</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>)]<span style="color:#f92672">--</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">letters</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">3</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p>The worst time complexity of the following solution is <code>O(2n + 26)</code>, but since we are using a map instead of an array the time complexity can range from <code>O(2n + 1)</code> to <code>O(2n + 26)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkAlmostEquivalent</span>(<span style="color:#a6e22e">word1</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">word2</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">int</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">word1</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[int(<span style="color:#a6e22e">word1</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>)]<span style="color:#f92672">++</span>
        <span style="color:#a6e22e">m</span>[int(<span style="color:#a6e22e">word2</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>)]<span style="color:#f92672">--</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">val</span> &lt; <span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">val</span> &gt; <span style="color:#ae81ff">3</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2075</title><link>https://nathannaveen.dev/posts/leetcode-2075/</link><pubDate>Wed, 19 Jan 2022 13:00:38 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2075/</guid><description>2075. Decode the Slanted Ciphertext
The main idea of this solution is to find the number of columns. The solution comes together pretty quickly after that.
To explain my thinking to how I found the number of columns we have to take a matrix. We should know the number rows and columns in that matrix. For example:
[a][d][g][ ] [ ][b][e][h] [ ][ ][c][f]
We have a matrix with 3 rows and 4 columns, and 12 items.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/decode-the-slanted-ciphertext/">2075. Decode the Slanted Ciphertext</a></p>
<p>The main idea of this solution is to find the number of columns. The solution comes together pretty quickly after that.</p>
<p>To explain my thinking to how I found the number of columns we have to take a matrix. We should know the number rows and columns in that matrix. For example:</p>
<p><code>[a][d][g][ ]</code>
<code>[ ][b][e][h]</code>
<code>[ ][ ][c][f]</code></p>
<p>We have a matrix with 3 rows and 4 columns, and 12 items. <code>3 * 4 = 12</code>, so if we are given a matrix of size 12 and 3 rows, we can do <code>12 / 3 = 4</code> to get the number of columns. Since we know that the number of values in the matrix can be shown using <code>len(encodedText)</code> and the problem gives us the number of rows, we can do <code>len(encodedText) / rows = cols</code>.</p>
<p>Then all we have to do is add all the letters in a particular order.</p>
<p>Note that <code>res</code> is not a <code>string</code> because that will output a TLE.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">decodeCiphertext</span>(<span style="color:#a6e22e">encodedText</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">rows</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">encodedText</span>)
    <span style="color:#a6e22e">cols</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">rows</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">cols</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span>; <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">cols</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, string(<span style="color:#a6e22e">encodedText</span>[<span style="color:#a6e22e">j</span>]))
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimRight</span>(<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">res</span>, <span style="color:#e6db74">&#34;&#34;</span>), <span style="color:#e6db74">&#34; &#34;</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 353</title><link>https://nathannaveen.dev/posts/leetcode-353/</link><pubDate>Wed, 19 Jan 2022 13:00:19 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-353/</guid><description>353. Design Snake Game
For SnakeGame I have a lot of pramaters, and it might be hard to understand this solution is you don&amp;rsquo;t understand them. So:
counter int → The amount of food that the snake has eaten. height int → The height of the matrix. width int → The width of the matrix. food [][]int → The positions of the food. foodCounter int → What food we are on (i.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/design-snake-game/">353. Design Snake Game</a></p>
<p>For <code>SnakeGame</code> I have a lot of pramaters, and it might be hard to understand this solution is you don&rsquo;t understand them. So:</p>
<ul>
<li><code>counter int</code> → The amount of food that the snake has eaten.</li>
<li><code>height int</code> → The height of the matrix.</li>
<li><code>width int</code> → The width of the matrix.</li>
<li><code>food [][]int</code> → The positions of the food.</li>
<li><code>foodCounter int</code> → What food we are on (i.e. <code>food[foodCounter] = [1, 2]</code>)</li>
<li><code>m map[point] bool</code> → What positions the snake is on. We have this so we can check whether the snake is occuping a space where its body should be in <code>O(1)</code> time.</li>
<li><code>previous []point</code> → This is all the positions of the snake.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SnakeGame</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">height</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">width</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">food</span> [][]<span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">foodCounter</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">m</span> <span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">point</span>] <span style="color:#66d9ef">bool</span>
    <span style="color:#a6e22e">previous</span> []<span style="color:#a6e22e">point</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">point</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>
}


<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Constructor</span>(<span style="color:#a6e22e">width</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">height</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">food</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">SnakeGame</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">point</span>] <span style="color:#66d9ef">bool</span>)
    <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span> }] = <span style="color:#66d9ef">true</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">SnakeGame</span>{ <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">height</span>, <span style="color:#a6e22e">width</span>, <span style="color:#a6e22e">food</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">m</span>, []<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">point</span>{<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>} } }
}


<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">SnakeGame</span>) <span style="color:#a6e22e">Move</span>(<span style="color:#a6e22e">direction</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">newPoint</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span>[len(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
    
    <span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">direction</span> {
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;R&#34;</span>:
            <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;L&#34;</span>:
            <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">j</span><span style="color:#f92672">--</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;U&#34;</span>:
            <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;D&#34;</span>:
            <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">j</span> &lt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">height</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">width</span> { 
        <span style="color:#75715e">// If we run into walls
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> 
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">foodCounter</span> &lt; len(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">food</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">food</span>[<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">foodCounter</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">i</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">food</span>[<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">foodCounter</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">newPoint</span>.<span style="color:#a6e22e">j</span> {
        <span style="color:#75715e">// If on a piece of food
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">foodCounter</span><span style="color:#f92672">++</span>
        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#75715e">// If not on food we can remove the end of the tail
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span>[<span style="color:#ae81ff">0</span>]
        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span> = <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span>[<span style="color:#ae81ff">1</span>:]
        delete(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">pop</span>)
        
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">newPoint</span>] { 
        <span style="color:#75715e">// Running into itself
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> 
    }
    
    <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span> = append(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">previous</span>, <span style="color:#a6e22e">newPoint</span>)
    
    <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">newPoint</span>] = <span style="color:#66d9ef">true</span>
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">counter</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2103</title><link>https://nathannaveen.dev/posts/leetcode-2103/</link><pubDate>Wed, 19 Jan 2022 13:00:08 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2103/</guid><description>2103. Rings and Rods
The idea of this solution is to use the fact that prime numbers can not be divided by any number other than one and itself. So if we relatively multiply 2 , 3, or 5 to each rods value accordingly to 'R', 'G', 'B' we can check whether it is divisible by 2, 3, and 5 to check whether we have all three colored rings on a rod.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rings-and-rods/">2103. Rings and Rods</a></p>
<p>The idea of this solution is to use the fact that prime numbers can not be divided by any number other than one and itself. So if we relatively multiply <code>2</code> , <code>3</code>, or <code>5</code> to each rods value accordingly to <code>'R'</code>, <code>'G'</code>, <code>'B'</code> we can check whether it is divisible by <code>2, 3</code>, and <code>5</code> to check whether we have all three colored rings on a rod.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countPoints</span>(<span style="color:#a6e22e">rings</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">rods</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">10</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">rings</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span> {
        <span style="color:#a6e22e">pos</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(string(<span style="color:#a6e22e">rings</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]))
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rods</span>[<span style="color:#a6e22e">pos</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> { <span style="color:#a6e22e">rods</span>[<span style="color:#a6e22e">pos</span>] = <span style="color:#ae81ff">1</span> }
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rings</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;R&#39;</span> {
            <span style="color:#a6e22e">rods</span>[<span style="color:#a6e22e">pos</span>] <span style="color:#f92672">*=</span> <span style="color:#ae81ff">2</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rings</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;G&#39;</span> {
            <span style="color:#a6e22e">rods</span>[<span style="color:#a6e22e">pos</span>] <span style="color:#f92672">*=</span> <span style="color:#ae81ff">3</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rings</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;B&#39;</span> {
            <span style="color:#a6e22e">rods</span>[<span style="color:#a6e22e">pos</span>] <span style="color:#f92672">*=</span> <span style="color:#ae81ff">5</span>
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">rod</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">rods</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rod</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">rod</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">rod</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">rod</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> { <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span> }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 8</title><link>https://nathannaveen.dev/posts/leetcode-8/</link><pubDate>Wed, 19 Jan 2022 13:00:00 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-8/</guid><description>8. String to Integer (atoi)
I am going to explain this solution while walking through the code:
We can first remove the starting spaces because the problem says to &amp;ldquo;Read in and ignore any leading whitespace&amp;rdquo;. Then, my code checks whether the length of s equals 0. If it is, we can return 0, because some of the following code is hardcoded to s having a minimum length of 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/string-to-integer-atoi/">8. String to Integer (atoi)</a></p>
<p>I am going to explain this solution while walking through the code:</p>
<ul>
<li>We can first remove the starting spaces because the problem says to &ldquo;Read in and ignore any leading whitespace&rdquo;.</li>
<li>Then, my code checks whether the length of <code>s</code> equals <code>0</code>. If it is, we can return <code>0</code>, because some of the following code is hardcoded to <code>s</code> having a minimum length of <code>1</code>.</li>
<li>Then, if the first character is negative or positive, we can account for the sign:
<ul>
<li>We can check for a positive or negative sign once throughout this whole code right before the digits because a positive/negative sign should only be there.</li>
<li>If it is a negative sign, we can make a variable called <code>neg</code> equal to negative 1, so we can multiply the result by <code>neg</code> to get the result negative. We can&rsquo;t multiply <code>res</code> (<code>res</code> is the result) by <code>-1</code> right when we find the negative sign because <code>res</code> starts at <code>0</code>, and <code>0 * -1 = 0</code> (No difference).</li>
<li>Then, if it is a positive or negative sign, we can move the start position up by one because we don&rsquo;t want to count a <code>'+'</code>, or <code>'-'</code> as a digit.</li>
</ul>
</li>
<li>After that, we have to loop throught the remains at the string, starting at our start position.</li>
<li>Let us call the character we are on <code>char</code> to be consistent.</li>
<li>We also check whether <code>res &gt; 2147483647</code>, I will come back to the reason for this later.</li>
<li>Next, we can check whether <code>char</code> is a digit using ASCII, and if it is a digit, we can do:</li>
</ul>
<pre tabindex="0"><code>res = res * 10 + int(char - '0')
</code></pre><p>This can be expanded into:</p>
<pre tabindex="0"><code>res *= 10
res += int(char - '0')
</code></pre><p>I can explain this by using the example <code>15461</code>, and we are adding the digit <code>1</code> to the end to get <code>154611</code>.</p>
<p>If we add <code>1</code> to <code>15461</code>, we get <code>15462</code>, instead of the expected <code>154611</code>. But let us say that we multiply <code>15461</code> by <code>10</code>, we get <code>154610</code>, and then we add <code>1</code> we get <code>154611</code>.</p>
<ul>
<li>Continuing with the walkthrough, if the character is not a digit, we know that we can break out of the loop.</li>
<li>After the loop has finished, we can multiply <code>res</code> by <code>neg</code> (<code>neg = 1</code> if it is a positive sign or no sign and <code>neg = -1</code> if there is a negative sign).</li>
<li>Then, if res is out of 32-bit signed integer range, we can clamp it down.</li>
</ul>
<p>Now we can get back to the <code>res &gt; 2147483647</code> part inside the loop. On one of the test cases, the string <code>s</code> was <code>&quot;9223372036854775808&quot;</code>, and when I looped through <code>s</code> and made it into an integer, I hit the 31&rsquo;st bit and turned res into a negative number, so I output <code>-2147483648</code>. To fix this, I decided to <code>break</code> if <code>res</code> has passed over the boundary of <code>2147483647</code>, so this never happens. I don&rsquo;t check <code>if res &gt; 2147483647 || res &lt; -2147483648</code> because <code>res</code> will never be negative (This is because we haven&rsquo;t made <code>res</code> negative yet).</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">myAtoi</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimLeft</span>(<span style="color:#a6e22e">s</span>, <span style="color:#e6db74">&#34; &#34;</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">neg</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span> {
        <span style="color:#a6e22e">neg</span> = <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;+&#39;</span> {
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>) {
        <span style="color:#a6e22e">char</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>]
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">res</span> &gt; <span style="color:#ae81ff">2147483647</span> {
            <span style="color:#66d9ef">break</span>
        }
        
        <span style="color:#66d9ef">if</span> int(<span style="color:#a6e22e">char</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>) &gt; <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> int(<span style="color:#a6e22e">char</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>) &lt; <span style="color:#ae81ff">10</span> {
            <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">res</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> int(<span style="color:#a6e22e">char</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>)
            <span style="color:#66d9ef">continue</span>
        }
        <span style="color:#66d9ef">break</span>
    }
    
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">*=</span> <span style="color:#a6e22e">neg</span>
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">res</span> &lt; <span style="color:#f92672">-</span><span style="color:#ae81ff">2147483648</span> {<span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2147483648</span>} <span style="color:#75715e">// -2^31
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">res</span> &gt; <span style="color:#ae81ff">2147483647</span> {<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">2147483647</span>} <span style="color:#75715e">// 2^31 - 1
</span><span style="color:#75715e"></span>    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 543</title><link>https://nathannaveen.dev/posts/leetcode-543/</link><pubDate>Wed, 10 Nov 2021 09:57:49 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-543/</guid><description>I feel that enough people have explained the first type of solution, so I will not explain this.
Most People Do This:
var maximum = 0 func diameterOfBinaryTree(root *TreeNode) int { maximum = 0 helper(root) return maximum } func helper(root *TreeNode) int { if root == nil { return 0 } leftHeight, rightHeight := helper(root.Left), helper(root.Right) maximum = max(leftHeight + rightHeight, maximum) return 1 + max(leftHeight, rightHeight) } func max(a, b int) int { if a &amp;gt; b { return a } return b } The Second Solution Explanation:</description><content type="html"><![CDATA[<p>I feel that enough people have explained the first type of solution, so I will not explain this.</p>
<p><strong>Most People Do This:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">maximum</span> = <span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">diameterOfBinaryTree</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> = <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> }
    
    <span style="color:#a6e22e">leftHeight</span>, <span style="color:#a6e22e">rightHeight</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Left</span>), <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Right</span>)
    
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">leftHeight</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">rightHeight</span>, <span style="color:#a6e22e">maximum</span>)
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">leftHeight</span>, <span style="color:#a6e22e">rightHeight</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div><p><strong>The Second Solution Explanation:</strong></p>
<p>I would say that the hardest part to understand in the second solution is <code>maximum = max(leftHeight + rightHeight + 2, maximum)</code>.
I think simplifying would help with the explanation, so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">leftHeight</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">rightHeight</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>, <span style="color:#a6e22e">maximum</span>)

<span style="color:#a6e22e">which</span> <span style="color:#a6e22e">equals</span>:

<span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>((<span style="color:#a6e22e">leftHeight</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">rightHeight</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>), <span style="color:#a6e22e">maximum</span>)
</code></pre></div><p>I think that the easiest way to explain this is to use an image (Something to remember as we return <code>-1</code> when we find a <code>nil</code> node):</p>
<p><img src="https://i.imgur.com/1yCUqng.jpg" alt=""></p>
<ul>
<li>We can start with the simple input, <code>[1, nil, 2]</code></li>
<li>Since this is a recursive solution, we can start from the bottom up.</li>
<li>In the image, the orange boxes are <code>nil</code> nodes, and the dotted line represents the edge to the <code>nil</code> node.</li>
<li>In the second image, we can see that we add <code>1</code> because of the edge and subtract <code>1</code> because the edge is pointing to <code>nil</code>, so the height is <code>0</code>.</li>
<li>Then, in the third image, we can see that the left node is <code>nil</code>, so we can add <code>1</code> for the edge and subtract <code>1</code> for the <code>nil</code>. Then on the right child, we can add <code>1</code> for the edge and add <code>0</code> because the right child&rsquo;s height is <code>0</code>.</li>
</ul>
<p>As you can see we are doing <code>(leftHeight + 1) + (rightHeight + 1)</code>. The plus <code>1</code> is for adding the edge. I didn&rsquo;t do the <code>maximum = max(, maximum)</code> part because I feel it is pretty easy to understand.</p>
<p><strong>This is the Code I Prefer:</strong> <em>(The only things that are different from the first solution are we return <code>-1</code> instead of <code>0</code> if <code>root == nil</code>, and we add <code>2</code> to <code>leftHeight + rightHeight</code> when calculating <code>maximum</code>)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">maximum</span> = <span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">diameterOfBinaryTree</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> = <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> { <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> }
    
    <span style="color:#a6e22e">leftHeight</span>, <span style="color:#a6e22e">rightHeight</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Left</span>), <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Right</span>)
    
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">leftHeight</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">rightHeight</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>, <span style="color:#a6e22e">maximum</span>)
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">leftHeight</span>, <span style="color:#a6e22e">rightHeight</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1807</title><link>https://nathannaveen.dev/posts/leetcode-1807/</link><pubDate>Thu, 28 Oct 2021 15:59:20 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1807/</guid><description>1807. Evaluate the Bracket Pairs of a String
The idea of this solution is pretty simple:
We can first add all the knowledge into a map which I called storedKnowledge Then we can loop through s If s[i] == '(' we can make start = i + 1, so we know where the bracket starts Else if s[i] == ')' we can check whether storedKnowledge contains s[start : i] (For our non-Golang users s[start : i] is basically getting the substring from position start to the position i, if we think mathematically it could be shown as the inequality [start, i)), if it contains we can add the value to res, else add &amp;quot;?</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/">1807. Evaluate the Bracket Pairs of a String</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We can first add all the knowledge into a map which I called <code>storedKnowledge</code></li>
<li>Then we can loop through <code>s</code>
<ul>
<li>If <code>s[i] == '('</code> we can make <code>start = i + 1</code>, so we know where the bracket starts</li>
<li>Else if <code>s[i] == ')'</code> we can check whether <code>storedKnowledge</code> contains <code>s[start : i]</code> (For our non-Golang users <code>s[start : i]</code> is basically getting the substring from position <code>start</code> to the position <code>i</code>, if we think mathematically it could be shown as the inequality <code>[start, i)</code>), if it contains we can add the value to <code>res</code>, else add <code>&quot;?&quot;</code> to <code>res</code>. Then I make <code>start = -1</code>, I will explain this in the next bullet point.</li>
<li>Else if <code>start != -1</code>. The <code>start != -1</code> checks whether we are inside a bracket, and if so, we don&rsquo;t want to add the letter to <code>res</code>.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">evaluate</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">knowledge</span> [][]<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">storedKnowledge</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>] <span style="color:#66d9ef">string</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">know</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">knowledge</span> {
        <span style="color:#a6e22e">storedKnowledge</span>[<span style="color:#a6e22e">know</span>[<span style="color:#ae81ff">0</span>]] = <span style="color:#a6e22e">know</span>[<span style="color:#ae81ff">1</span>]
    }
    
    <span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;(&#39;</span> {
            <span style="color:#a6e22e">start</span> = <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;)&#39;</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">storedKnowledge</span>[<span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">start</span> : <span style="color:#a6e22e">i</span>]]; <span style="color:#a6e22e">ok</span> {
                <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">storedKnowledge</span>[<span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">start</span> : <span style="color:#a6e22e">i</span>]]     
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;?&#34;</span>
            }
            <span style="color:#a6e22e">start</span> = <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">start</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
            <span style="color:#75715e">// start == -1 is for if we are not inside a bracket
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> string(<span style="color:#a6e22e">i2</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p>I liked the way that @DBabichev did his solution, so I tried something similar (@DBabichev has a pretty good explanation to this solution, so I will link the <a href="https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/discuss/1130510/Python-Short-solution-using-split-explained">solution</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">evaluate</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">knowledge</span> [][]<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">storedKnowledge</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>] <span style="color:#66d9ef">string</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">know</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">knowledge</span> {
        <span style="color:#a6e22e">storedKnowledge</span>[<span style="color:#a6e22e">know</span>[<span style="color:#ae81ff">0</span>]] = <span style="color:#a6e22e">know</span>[<span style="color:#ae81ff">1</span>]
    }
    
    <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">s</span>, <span style="color:#e6db74">&#34;(&#34;</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">0</span>]
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>], <span style="color:#e6db74">&#34;)&#34;</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">storedKnowledge</span>[<span style="color:#a6e22e">temp</span>[<span style="color:#ae81ff">0</span>]]; <span style="color:#a6e22e">ok</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">val</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;?&#34;</span>
        }
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">temp</span>[<span style="color:#ae81ff">1</span>]
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1991</title><link>https://nathannaveen.dev/posts/leetcode-1991/</link><pubDate>Thu, 28 Oct 2021 15:59:14 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1991/</guid><description>1991. Find the Middle Index in Array
The idea of this solution is pretty simple:
We find the sum of all the numbers in nums (In this solution, I am calling it sum) Then we check whether sum - left - nums[i] == left (I will get back to what left is and what this whole thing means in the following parts). If so, we can return i (The index).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-the-middle-index-in-array/">1991. Find the Middle Index in Array</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We find the sum of all the numbers in <code>nums</code> (In this solution, I am calling it <code>sum</code>)</li>
<li>Then we check whether <code>sum - left - nums[i] == left</code> (I will get back to what <code>left</code> is and what this whole thing means in the following parts). If so, we can return <code>i</code> (The index).</li>
<li>The variable called <code>left</code> keeps track of the left sum, so we do <code>left += nums[i]</code>.</li>
</ul>
<p>So, if you don&rsquo;t understand what <code>sum - left - nums[i] == left</code> is doing, read the following:</p>
<p>There is a small part that I would assume someone would have missed, and that is in the following:</p>
<blockquote>
<p><code>nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]</code></p>
</blockquote>
<p>We are supposed to make the sum of all the numbers before <code>nums[i]</code> equal to the sum of all the numbers after <code>nums[i]</code>, not including <code>nums[i]</code>.</p>
<p>So doing <code>sum - left - nums[i] == left</code> is basically checking whether <code>right sum == left sum</code>:</p>
<ul>
<li><code>sum - left</code> is for getting the sum of all the elements to the right of <code>nums[i - 1]</code> (Basically all the elements to the right of <code>nums[i]</code> plus <code>nums[i]</code>)</li>
<li>Subtracting <code>nums[i]</code> from <code>sum - left</code> is for taking out the <code>nums[i]</code>.</li>
<li>The two bullet points before this one were for finding the right sum, but since we know the left sum we can just check whether <code>right sum == left sum</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findMiddleIndex</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">left</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> { <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">num</span> }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">left</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">left</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">i</span>
        }
        
        <span style="color:#a6e22e">left</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1984</title><link>https://nathannaveen.dev/posts/leetcode-1984/</link><pubDate>Thu, 28 Oct 2021 15:59:09 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1984/</guid><description>1984. Minimum Difference Between Highest and Lowest of K Scores
The idea of this solution is pretty simple:
We just sort nums And then we can use a sliding window to check for the min of the last number in the sub-array minus the first number in the sub-array. The reason we sort nums is the minimum distance will always be between the two closest numbers. For example if we have the array nums = [1, 2, 3, 4, 6, 10], and we had k = 3, we can see that the differences would be:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">1984. Minimum Difference Between Highest and Lowest of K Scores</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We just sort <code>nums</code></li>
<li>And then we can use a sliding window to check for the min of the last number in the sub-array minus the first number in the sub-array.</li>
</ul>
<p>The reason we sort <code>nums</code> is the minimum distance will always be between the two closest numbers. For example if we have the array <code>nums = [1, 2, 3, 4, 6, 10]</code>, and we had <code>k = 3</code>, we can see that the differences would be:</p>
<ul>
<li><code>3 - 1 = 2</code></li>
<li><code>4 - 2 = 2</code></li>
<li><code>6 - 3 = 3</code></li>
<li><code>10 - 4 = 6</code></li>
</ul>
<p>And we can use this to find the minimum difference.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minimumDifference</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">min</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">100000</span>
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">min</span> = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(<span style="color:#a6e22e">min</span>), float64(<span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]))) 
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">min</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 598</title><link>https://nathannaveen.dev/posts/leetcode-598/</link><pubDate>Thu, 28 Oct 2021 15:59:00 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-598/</guid><description>598. Range Addition II
The idea of this solution is pretty simple, the positions with the max value will be in the sub-matrix of range 0 to minimum y pos, and 0 to minimum x pos.
If you don&amp;rsquo;t understand look at the example bellow:
input: m = 6, n = 5, ops = [[4, 3], [2, 6], [3, 5]] (Note: They give the input 1-indexed, instead of 0-indexed)
As you can see, all rectangles top left corner is (0, 0) (I added an orange dot at (0, 0)).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/range-addition-ii/">598. Range Addition II</a></p>
<p>The idea of this solution is pretty simple, the positions with the max value will be in the sub-matrix of range <code>0 to minimum y pos</code>, and <code>0 to minimum x pos</code>.</p>
<p>If you don&rsquo;t understand look at the example bellow:</p>
<p><code>input: m = 6, n = 5, ops = [[4, 3], [2, 6], [3, 5]]</code> <em>(Note: They give the input <code>1-indexed</code>, instead of <code>0-indexed</code>)</em></p>
<p><img src="https://i.imgur.com/Nz4lmSJ.png" alt=""></p>
<p>As you can see, all rectangles top left corner is <code>(0, 0)</code> (I added an orange dot at <code>(0, 0)</code>). And the sub-matrix that has the maximum values is surrounded by the yellow dotted line.</p>
<p>We have four parts of the dotted line, the <code>top</code>, <code>bottom</code>, <code>right</code>, and <code>left</code>.</p>
<ul>
<li>The <code>top</code> line is on the <code>x-axis</code>, so we don&rsquo;t have to worry about that.</li>
<li>The <code>left</code> line is on the <code>y-axis</code>, so we also don&rsquo;t have to worry about that.</li>
<li>The <code>right</code> line is the minimum <code>x</code> value in all the <code>ops</code> because the minimum is the max position that we know we have all the operations in.</li>
<li>The <code>bottom</code> line is the minimum <code>y</code> value in <code>ops</code>, and it is that for the same reason as the <code>right</code> line.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxCount</span>(<span style="color:#a6e22e">m</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">ops</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">op</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">ops</span> {
        <span style="color:#a6e22e">x</span> = <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">op</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">x</span>)
        <span style="color:#a6e22e">y</span> = <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">op</span>[<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">y</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">y</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2006</title><link>https://nathannaveen.dev/posts/leetcode-2006/</link><pubDate>Thu, 28 Oct 2021 15:58:53 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2006/</guid><description>2006. Count Number of Pairs With Absolute Difference K
The main idea of this solution is nums[i] + k = nums[j] and nums[i] - k = nums[j], if you don&amp;rsquo;t understand:
|nums[i] - nums[j| = k
Now if we took off the absolute value sign we get 2 equations:
-(nums[i] - nums[j]) = k and nums[i] - nums[j] = k
Let us start with -(nums[i] - nums[j]) = k:
-(nums[i] - nums[j]) = k Mulitply both sides by -1 so nums[i] - nums[j] = -k add k to both sides, and add nums[j] to both sides nums[i] + k = nums[j] Now we can do nums[i] - nums[j] = k:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k/">2006. Count Number of Pairs With Absolute Difference K</a></p>
<p>The main idea of this solution is <code>nums[i] + k = nums[j]</code> and <code>nums[i] - k = nums[j]</code>, if you don&rsquo;t understand:</p>
<p><code>|nums[i] - nums[j| = k</code></p>
<p>Now if we took off the absolute value sign we get 2 equations:</p>
<p><code>-(nums[i] - nums[j]) = k and</code>
<code>nums[i] - nums[j] = k</code></p>
<p>Let us start with <code>-(nums[i] - nums[j]) = k</code>:</p>
<pre><code>-(nums[i] - nums[j]) = k
Mulitply both sides by -1 so nums[i] - nums[j] = -k
add k to both sides, and add nums[j] to both sides
nums[i] + k = nums[j]
</code></pre>
<p>Now we can do <code>nums[i] - nums[j] = k</code>:</p>
<pre><code>nums[i] - nums[j] = k
add nums[j] to both sides, and subtract k from both sides
nums[i] - k = nums[j]
</code></pre>
<p>Now you might be wondering why <code>nums[i] + k = nums[j]</code> and <code>nums[i] - k = nums[j]</code> is useful, it is because we can loop through <code>nums</code>, and then add the number of elements that equal <code>nums[i] + k</code> (aka <code>nums[j]</code>) and the number of elements that equal <code>nums[i] - k</code> (This could be called <code>nums[j]</code>, but <code>nums[j]</code> is already assigned to <code>nums[i] + k</code>, so this could be called <code>nums[l]</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countKDifference</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">int</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">num</span>]<span style="color:#f92672">++</span>
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">num</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">k</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">num</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">k</span>]
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2016</title><link>https://nathannaveen.dev/posts/leetcode-2016/</link><pubDate>Thu, 28 Oct 2021 15:58:50 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2016/</guid><description>2016. Maximum Difference Between Increasing Elements
The idea of this solution is we loop through nums, and if a number is greater than min we can check whether to make it max, otherwise if the number is smaller than min we can re-make min.
func maximumDifference(nums []int) int { min := nums[0] max := -1 for i := 0; i &amp;lt; len(nums); i++ { if nums[i] &amp;gt; min &amp;amp;&amp;amp; nums[i] - min &amp;gt; max { max = nums[i] - min } else if nums[i] &amp;lt; min { min = nums[i] } } return max }</description><content type="html"><![CDATA[<p><a href="https://https://leetcode.com/problems/maximum-difference-between-increasing-elements/">2016. Maximum Difference Between Increasing Elements</a></p>
<p>The idea of this solution is we loop through <code>nums</code>, and if a number is greater than <code>min</code> we can check whether to make it <code>max</code>, otherwise if the number is smaller than <code>min</code> we can re-make <code>min</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maximumDifference</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">min</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">0</span>]
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">min</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span> &gt; <span style="color:#a6e22e">max</span> {
            <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &lt; <span style="color:#a6e22e">min</span> {
            <span style="color:#a6e22e">min</span> = <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">max</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1257</title><link>https://nathannaveen.dev/posts/leetcode-1257/</link><pubDate>Thu, 28 Oct 2021 15:58:40 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1257/</guid><description>1257. Smallest Common Region
A quick idea of this solution is (Note: This solution is not very good if you want a solution that is easy to understand, look after this):
To use a map to store every region as the key and the value as the region in which the original region is contained. Then loop through all the regions in the food chain of region1 (I am calling a food chain whenever we start with region1, and then find the region that contains it) and store all the values into another map.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/smallest-common-region/">1257. Smallest Common Region</a></p>
<p>A quick idea of this solution is <em>(Note: This solution is not very good if you want a solution that is easy to understand, look after this)</em>:</p>
<ul>
<li>To use a map to store every region as the key and the value as the region in which the original region is contained.</li>
<li>Then loop through all the regions in the food chain of <code>region1</code> (I am calling a food chain whenever we start with <code>region1</code>, and then find the region that contains it) and store all the values into another map.</li>
<li>Then we loop through the food chain of <code>region2</code>, and check whether the <code>region1</code> food chain map contains any values. If so, return the value.</li>
</ul>
<hr>
<p>I know that the whole explanation before is very vague and confusing, so I am going to explain this whole thing using an example:</p>
<p>So, to start off, we can have a map called <code>m</code> to store all the regions and their direct ancestor (I am calling the region that contains the region a direct ancestor)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">input</span>:

<span style="color:#a6e22e">regions</span> = [[<span style="color:#e6db74">&#34;Earth&#34;</span>,<span style="color:#e6db74">&#34;North America&#34;</span>,<span style="color:#e6db74">&#34;South America&#34;</span>],
[<span style="color:#e6db74">&#34;North America&#34;</span>,<span style="color:#e6db74">&#34;United States&#34;</span>,<span style="color:#e6db74">&#34;Canada&#34;</span>],
[<span style="color:#e6db74">&#34;United States&#34;</span>,<span style="color:#e6db74">&#34;New York&#34;</span>,<span style="color:#e6db74">&#34;Boston&#34;</span>],
[<span style="color:#e6db74">&#34;Canada&#34;</span>,<span style="color:#e6db74">&#34;Ontario&#34;</span>,<span style="color:#e6db74">&#34;Quebec&#34;</span>],
[<span style="color:#e6db74">&#34;South America&#34;</span>,<span style="color:#e6db74">&#34;Brazil&#34;</span>]],
<span style="color:#a6e22e">region1</span> = <span style="color:#e6db74">&#34;Quebec&#34;</span>,
<span style="color:#a6e22e">region2</span> = <span style="color:#e6db74">&#34;New York&#34;</span>
</code></pre></div><p>We can now add the region and its direct ancestor to <code>m</code>. For example, the first region:</p>
<p><code>[&quot;Earth&quot;,&quot;North America&quot;,&quot;South America&quot;]</code></p>
<p>Since <code>&quot;Earth&quot;</code> contains <code>&quot;North America&quot;</code>, and <code>&quot;South America&quot;</code> we can add them to <code>m</code>:</p>
<p><code>m = [ &quot;North America&quot; : &quot;Earth&quot;, &quot;South America&quot; : &quot;Earth&quot; ]</code></p>
<p>If we do this to all the regions we get:</p>
<p><code>m = [ &quot;North America&quot; : &quot;Earth&quot;, &quot;South America&quot; : &quot;Earth&quot;, &quot;United States&quot; : &quot;North America&quot;, &quot;Canada&quot; : &quot;North America&quot;, &quot;New York&quot; : &quot;United States&quot;, &quot;Boston&quot; : &quot;United States&quot;, &quot;Ontario&quot; : &quot;Canada&quot;, &quot;Quebec&quot; : &quot;Canada&quot;, &quot;Brazil&quot; : &quot;South America&quot; ]</code></p>
<p>Note that this wouldn&rsquo;t work if the problem statement didn&rsquo;t say:</p>
<blockquote>
<p>If you are given regions <code>r1</code>, <code>r2</code>, and <code>r3</code> such that <code>r1</code> includes <code>r3</code>, it is guaranteed there is no <code>r2</code> such that <code>r2</code> includes <code>r3</code>.</p>
</blockquote>
<p>You might not understand what this means. If so, it says that one region can&rsquo;t exist in two regions, and that one region will only be there in one or no regions.</p>
<p>Continuing with our example, we get to the following two parts of the input <code>region1</code>, and <code>region2</code>.</p>
<p>We also have to make another map (I am using this map as a set because Golang doesn&rsquo;t have sets) to store all the ancestors of <code>region1</code>. We call this <code>m2</code>.</p>
<p>Now we can add <code>region1</code> to <code>m2</code>. Then we can make <code>region1</code> equal <code>m[region1]</code> to find our next ancestor. And keep doing this until we don&rsquo;t have an ancestor for <code>region1</code>.</p>
<p>And the last thing that we have to do is loop through the ancestors of <code>region2</code>, and check whether <code>m2</code> contains any of <code>region2</code>s ancestors. If so, return the ancestor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findSmallestRegion</span>(<span style="color:#a6e22e">regions</span> [][]<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">region1</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">region2</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>] <span style="color:#66d9ef">string</span>)
    <span style="color:#a6e22e">m2</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>] <span style="color:#66d9ef">bool</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">region</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">regions</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">region</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">region</span>[<span style="color:#a6e22e">i</span>]] = <span style="color:#a6e22e">region</span>[<span style="color:#ae81ff">0</span>]
        }
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">region1</span>] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#a6e22e">m2</span>[<span style="color:#a6e22e">region1</span>] = <span style="color:#66d9ef">true</span>
        <span style="color:#a6e22e">region1</span> = <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">region1</span>]
    }
    <span style="color:#a6e22e">m2</span>[<span style="color:#a6e22e">region1</span>] = <span style="color:#66d9ef">true</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">region2</span>] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m2</span>[<span style="color:#a6e22e">region2</span>] { 
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">region2</span> 
        }
        <span style="color:#a6e22e">region2</span> = <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">region2</span>]
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">region2</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2027</title><link>https://nathannaveen.dev/posts/leetcode-2027/</link><pubDate>Thu, 28 Oct 2021 15:58:28 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2027/</guid><description>2027. Minimum Moves to Convert String
The idea of this solution is if we are on a 'X' we can move the index up by three and add one to res.
An example could be:
input: s = &amp;quot;XXOXXXOOOXOXOXX&amp;quot; (I tried to capture as many edge cases as I could in this test case)
We can start with our index i = 0
s[i] == 'X', so we can skip the next two values (Skip the values at indexes 1 and 2 because according to the problem we have made s[0] = 'O', s[1] = 'O', s[2] = 'O'.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-moves-to-convert-string/">2027. Minimum Moves to Convert String</a></p>
<p>The idea of this solution is if we are on a <code>'X'</code> we can move the index up by three and add one to <code>res</code>.</p>
<p>An example could be:</p>
<p><code>input: s = &quot;XXOXXXOOOXOXOXX&quot;</code> <em>(I tried to capture as many edge cases as I could in this test case)</em></p>
<p>We can start with our index <code>i = 0</code></p>
<p><img src="https://i.imgur.com/veKMehQ.png" alt=""></p>
<p><code>s[i] == 'X'</code>, so we can skip the next two values (Skip the values at indexes <code>1</code> and <code>2</code> because according to the problem we have made <code>s[0] = 'O', s[1] = 'O', s[2] = 'O'</code>. We don&rsquo;t actually change the values because there is no need) and add one to <code>res</code>. So now <code>i = 3</code>, <code>res = 1</code>.</p>
<p><img src="https://i.imgur.com/Kym8Qw1.png" alt=""></p>
<p><code>s[i] == 'X'</code>, so we can do the same thing as the previous <code>3</code> values, and skip the next two values. Now we are at <code>i = 6</code>, <code>res = 2</code></p>
<p><img src="https://i.imgur.com/G0FoLNM.png" alt=""></p>
<p><code>s[i], s[i + 1]</code>, and <code>s[i + 2]</code> are all <code>'O'</code>, so I am just going to skip them.</p>
<p><img src="https://i.imgur.com/ViDnPbB.png" alt=""></p>
<p><code>s[i] == 'X'</code>, so we can skip the next two values, and add one to <code>res</code>. <code>i == 12</code>, <code>res = 3</code>.</p>
<p><img src="https://i.imgur.com/DU17fi0.png" alt=""></p>
<p><code>s[i] == 'O'</code>, so <code>i++</code> and continue. <code>i = 13</code>, <code>res = 3</code></p>
<p><img src="https://i.imgur.com/iw6okPi.png" alt=""></p>
<p><code>s[i] == 'X'</code>, so we can skip the next two values, <code>i = 15</code>, <code>res = 4</code></p>
<p>But now <code>i &gt;= len(s)</code>, so we can break the loop and return <code>res</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minimumMoves</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;X&#39;</span> {
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
            <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2028</title><link>https://nathannaveen.dev/posts/leetcode-2028/</link><pubDate>Thu, 28 Oct 2021 15:58:20 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2028/</guid><description>2028. Find Missing Observations
This solution aims to find the missing sum and then distribute it among n values.
The idea of the first part (Finding the missing sum) is first to find the sum of the m numbers given to us in rolls.
Then since the mean will always be mean = sum / (n + m) (the sum of elements divided by the number of elements), we know that the number of elements will always be n + m.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-missing-observations/">2028. Find Missing Observations</a></p>
<p>This solution aims to find the missing sum and then distribute it among <code>n</code> values.</p>
<hr>
<p>The idea of the first part (Finding the missing sum) is first to find the sum of the <code>m</code> numbers given to us in <code>rolls</code>.</p>
<p>Then since the mean will always be <code>mean = sum / (n + m)</code> (the sum of elements divided by the number of elements), we know that the number of elements will always be <code>n + m</code>. So the total number of elements will be <code>(n + m) * mean</code>. And the sum of the missing elements will be <code>(n + m) * mean - sum</code> (Works because of PEMDAS).</p>
<hr>
<p>Now the part in-between is for returning an empty array.</p>
<p>We return an empty array if <code>missing &gt; n * 6</code>. This checks whether there is a greater missing sum than <code>n * 6</code>. <code>n * 6</code> because <code>6</code> is the max number on a dice, and <code>n</code> is the max number of unobserved rolls.</p>
<p>We also return an empty array if <code>missing &lt; n</code>. This is because there are not enough in the missing sum to fill up <code>n</code> dices. This is because a dice can only have values from <code>1</code> to <code>6</code>, meaning we can&rsquo;t have dice with the value <code>0</code>.</p>
<hr>
<p>Now to distribute <code>missing</code> between <code>n</code> values.</p>
<p>Since we want at least <code>1</code> in each dice value, we can find the value of each dice by doing:</p>
<pre tabindex="0"><code>res[i] = int(math.Min(float64(6), float64(missing - (n - 1 - i))))
missing -= res[i]
</code></pre><p>We find the min between <code>6</code>, and <code>missing - (n - 1 - i)</code>.</p>
<p>The <code>6</code> is because it is the maximum value of dice.</p>
<p>The <code>(n - 1 - i)</code> in <code>missing - (n - 1 - i)</code> is for finding the max value we can have at <code>res[i]</code> so that we have at least <code>1</code> for <code>res[i + 1], res[i + 2], res[i + 3] ... res[n - 1]</code>.</p>
<p><code>i</code> is the current dice we are on. Since <code>i</code> is zero-indexed we can do <code>(n - (i + 1))</code>, but this simplifies to <code>n - i - 1</code> because of the distributive property. And since <code>n</code> is the number of total missing dice, if we do <code>n - i - 1</code>, we get the remaining number of dice, and with that a value of <code>1</code> per remaining dice.</p>
<p>And if we do <code>missing - (n - 1 - i)</code>, we get the maximum value we can give to a dice.</p>
<p>Then the <code>missing -= res[i]</code> part removes the missing value from <code>missing</code>.</p>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">missingRolls</span>(<span style="color:#a6e22e">rolls</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">mean</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">n</span>)
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">roll</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">rolls</span> { 
        <span style="color:#75715e">// finding sum
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">roll</span>
    }
    
    <span style="color:#a6e22e">missing</span> <span style="color:#f92672">:=</span> (len(<span style="color:#a6e22e">rolls</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">n</span>) <span style="color:#f92672">*</span> <span style="color:#a6e22e">mean</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">sum</span>
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">missing</span> &gt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">missing</span> &lt; <span style="color:#a6e22e">n</span> {
        <span style="color:#75715e">// should return empty array
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> []<span style="color:#66d9ef">int</span>{}
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#75715e">// distribute the missing
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(<span style="color:#ae81ff">6</span>), float64(<span style="color:#a6e22e">missing</span> <span style="color:#f92672">-</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span>))))
        <span style="color:#a6e22e">missing</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>]
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 200</title><link>https://nathannaveen.dev/posts/leetcode-200/</link><pubDate>Thu, 28 Oct 2021 15:58:14 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-200/</guid><description>200. Number of Islands
The idea of this solution can be portrayed in its most basic idea by the following image:
var doneAlready = make(map[[2]int] bool) func numIslands(grid [][]byte) int { res := 0 doneAlready = make(map[[2]int] bool) for i := 0; i &amp;lt; len(grid); i++ { for j := 0; j &amp;lt; len(grid[0]); j++ { if helper(grid, i, j) { res++ } } } return res } func helper(grid [][]byte, i, j int) bool { temp := [2]int{i, j} if i &amp;lt; 0 || i &amp;gt;= len(grid) || j &amp;lt; 0 || j &amp;gt;= len(grid[0]) || doneAlready[temp] || grid[i][j] == &amp;#39;0&amp;#39; { return false } doneAlready[temp] = true helper(grid, i - 1, j) helper(grid, i + 1, j) helper(grid, i, j - 1) helper(grid, i, j + 1) return true } This is a variation of my Max Area of Island solution:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-islands/">200. Number of Islands</a></p>
<p>The idea of this solution can be portrayed in its <em><strong>most basic</strong></em> idea by the following image:</p>
<p><img src="https://i.imgur.com/jcYOE5j.png" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">doneAlready</span> = make(<span style="color:#66d9ef">map</span>[[<span style="color:#ae81ff">2</span>]<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">bool</span>)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numIslands</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">byte</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">doneAlready</span> = make(<span style="color:#66d9ef">map</span>[[<span style="color:#ae81ff">2</span>]<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">bool</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>) {
                <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
            }
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    
    <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> [<span style="color:#ae81ff">2</span>]<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>}
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> len(<span style="color:#a6e22e">grid</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">j</span> &lt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">||</span> 
        <span style="color:#a6e22e">doneAlready</span>[<span style="color:#a6e22e">temp</span>] <span style="color:#f92672">||</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> {
        
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
    }
    
    <span style="color:#a6e22e">doneAlready</span>[<span style="color:#a6e22e">temp</span>] = <span style="color:#66d9ef">true</span>
    
    <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">j</span>)
    <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">j</span>)
    <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
    <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p><strong>This is a variation of my Max Area of Island solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">doneAlready</span> = make(<span style="color:#66d9ef">map</span>[[<span style="color:#ae81ff">2</span>]<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">bool</span>)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numIslands</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">byte</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">doneAlready</span> = make(<span style="color:#66d9ef">map</span>[[<span style="color:#ae81ff">2</span>]<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">bool</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
                <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
            }
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    
    <span style="color:#75715e">/* 
</span><span style="color:#75715e">    This part is for finding the area of the island, 
</span><span style="color:#75715e">    but we can just check whether the area of the island 
</span><span style="color:#75715e">    is greater than 0, if so we know there is an island.
</span><span style="color:#75715e">    
</span><span style="color:#75715e">    This is based off of Leetcode 695
</span><span style="color:#75715e">    */</span>
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> len(<span style="color:#a6e22e">grid</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">j</span> &lt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">||</span> 
        <span style="color:#a6e22e">doneAlready</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] <span style="color:#f92672">||</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> {
        
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }
    
    <span style="color:#a6e22e">doneAlready</span>[<span style="color:#a6e22e">point</span>{ <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> }] = <span style="color:#66d9ef">true</span>
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">j</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">j</span>) <span style="color:#f92672">+</span> 
        <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">grid</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 1428</title><link>https://nathannaveen.dev/posts/leetcode-1428/</link><pubDate>Thu, 28 Oct 2021 15:58:02 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1428/</guid><description>1428. Leftmost Column with at Least a One
This solution uses the fact that all rows are sorted. So, all the ones in every row will be at the end.
Basically, to not call binaryMatrix.Get(i, j) too many times. We can&amp;rsquo;t loop through all values of the matrix.
Since 1 &amp;lt;= rows, cols &amp;lt;= 100 the max number of elements in the matrix is 100 * 100, 10000. And the problem says that the max number of calls to binaryMatrix.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/leftmost-column-with-at-least-a-one/">1428. Leftmost Column with at Least a One</a></p>
<p>This solution uses the fact that all rows are sorted. So, all the ones in every row will be at the end.</p>
<p>Basically, to not call <code>binaryMatrix.Get(i, j)</code> too many times. We can&rsquo;t loop through all values of the matrix.</p>
<p>Since <code>1 &lt;= rows, cols &lt;= 100</code> the max number of elements in the matrix is <code>100 * 100, 10000</code>. And the problem says that the max number of calls to <code>binaryMatrix.Get(i, j)</code> is <code>1000</code>.</p>
<p>We could start with the approach of looping through every column in every row, starting at the end column and working down until we hit the first <code>0</code>. Like in the following image:</p>
<p><img src="https://i.imgur.com/QXwBecO.png" alt=""></p>
<p>But if we had a <code>100*100</code> matrix of ones up to the one before the last column, we would have to call <code>binaryMatrix.Get(i, j)</code> a lot more than <code>1000</code> times.</p>
<hr>
<p>But if we did a solution where we didn&rsquo;t have to loop through every <code>1</code>, we could get a smaller amount of calls to <code>binaryMatrix.Get()</code>.</p>
<p>So, I got a solution to loop through the matrix starting at the top row right-most column. We can loop through the following conditions:</p>
<ul>
<li>If the element on the left of our current position is <code>0</code>, we can move our position down.</li>
<li>Else if the element on the left is a <code>1</code>, we can move our position left.</li>
</ul>
<p>Then we can return the left-most index.</p>
<p>If you don&rsquo;t understand, the following image might help:</p>
<p><img src="https://i.imgur.com/6zctkTP.png" alt=""></p>
<hr>
<p>Now we can talk about our worst-case scenario considering <code>binaryMatrix.Get()</code>. Our worst-case scenario is a matrix of <code>100 * 100</code> filled with ones for the last <code>len(matrix) - 1</code> rows. Like the following image except as a <code>100 * 100</code> matrix, instead of a <code>4 * 4</code>:</p>
<p><img src="https://i.imgur.com/d76itjZ.png" alt=""></p>
<p>Note: I consider this the worst-case solution instead of the full matrix of ones because someone&rsquo;s code could check whether the number of ones is equal to the dimensions and, if so, just return. I also haven&rsquo;t made the bottom row all ones because someone might just loop from bottom to top.</p>
<p>If we solved it with the first solution, we would be getting <code>99 * 100 = 9900</code> calls to <code>binaryMatrix.Get()</code>.</p>
<p>But if we use the second solution to do this, we will get <code>100 + 98 = 198</code> instead of <code>9900</code>. If you don&rsquo;t understand, here is a scaled-down version:</p>
<p><img src="https://i.imgur.com/uQdLbVM.png" alt=""></p>
<hr>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">leftMostColumnWithOne</span>(<span style="color:#a6e22e">binaryMatrix</span> <span style="color:#a6e22e">BinaryMatrix</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">d</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">binaryMatrix</span>.<span style="color:#a6e22e">Dimensions</span>()
    <span style="color:#a6e22e">first</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">d</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">d</span>[<span style="color:#ae81ff">0</span>]; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">first</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">--</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">binaryMatrix</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> { <span style="color:#66d9ef">break</span> } <span style="color:#75715e">// move down a row
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">first</span> = <span style="color:#a6e22e">j</span> <span style="color:#75715e">// move left by a column
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">found</span> = <span style="color:#66d9ef">true</span> <span style="color:#75715e">// checking whether there is a 1 in the whole matrix
</span><span style="color:#75715e"></span>        }
    }
    <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> { <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">first</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 684</title><link>https://nathannaveen.dev/posts/leetcode-684/</link><pubDate>Thu, 28 Oct 2021 15:57:56 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-684/</guid><description>684. Redundant Connection
The idea of this solution is to use union find to connect all the edges together, then in the Union() function if edge[0] parent equals edge[1] parent we have a redundant connection.
Note that I modified the average union find for this problem.
type unionFind struct { parent []int n int } func (this *unionFind) Find(x int) int { if x != this.parent[x] { this.parent[x] = this.Find(this.parent[x]) return this.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/redundant-connection/">684. Redundant Connection</a></p>
<p>The idea of this solution is to use union find to connect all the edges together, then in the <code>Union()</code> function if <code>edge[0]</code> parent equals <code>edge[1]</code> parent we have a redundant connection.</p>
<p>Note that I modified the average union find for this problem.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">unionFind</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">parent</span> []<span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">n</span>      <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">unionFind</span>) <span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">parent</span>[<span style="color:#a6e22e">x</span>] {
        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">parent</span>[<span style="color:#a6e22e">x</span>] = <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">parent</span>[<span style="color:#a6e22e">x</span>])
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">parent</span>[<span style="color:#a6e22e">x</span>]
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">unionFind</span>) <span style="color:#a6e22e">Union</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">y</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">temp1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">x</span>)
    <span style="color:#a6e22e">temp2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">y</span>)

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">temp1</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">temp2</span> {
        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">n</span><span style="color:#f92672">--</span>
        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">parent</span>[<span style="color:#a6e22e">temp1</span>] = <span style="color:#a6e22e">temp2</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> <span style="color:#75715e">// This signifies there is a redundant connection
</span><span style="color:#75715e"></span>    }
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findRedundantConnection</span>(<span style="color:#a6e22e">edges</span> [][]<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    
    <span style="color:#a6e22e">u</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">unionFind</span>{ make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">edges</span>)), len(<span style="color:#a6e22e">edges</span>) }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">edges</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">parent</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">i</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">edge</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">edges</span> {
        <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">Union</span>(<span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) { <span style="color:#75715e">// checking for connections
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">edge</span>
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 2046</title><link>https://nathannaveen.dev/posts/leetcode-2046/</link><pubDate>Thu, 28 Oct 2021 15:57:20 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-2046/</guid><description>2046. Sort Linked List Already Sorted Using Absolute Values
The idea of this solution is to check whether the current value is smaller than 0. If so, we can remove it from its current position, add it to the beginning of the list, and make that the new beginning.
This solution works because the absolute value of -1 will always be smaller than the absolute value of -5, but -1 is greater than -5.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sort-linked-list-already-sorted-using-absolute-values/">2046. Sort Linked List Already Sorted Using Absolute Values</a></p>
<p>The idea of this solution is to check whether the current value is smaller than <code>0</code>. If so, we can remove it from its current position, add it to the beginning of the list, and make that the new beginning.</p>
<p>This solution works because the absolute value of <code>-1</code> will always be smaller than the absolute value of <code>-5</code>, but <code>-1</code> is greater than <code>-5</code>. So if we have the linked list <code>[-1, -5]</code>, we can go through the linked list from the <code>0</code> index to the end, find the greatest valued negative numbers, and add them to the beginning before the smaller negative numbers.</p>
<p>The idea of this solution can be shown using the following image:</p>
<p><img src="https://i.imgur.com/oAIJZZy.jpg" alt=""></p>
<ul>
<li>Step one is initializing the <code>start, prev</code>, and <code>cur</code> variables.
<ul>
<li><code>start</code> is the very beginning of the linked list. In this example, <code>0</code> is the head. Notice how <code>start</code> is always the beginning of the linked list while the head isn&rsquo;t always.</li>
<li><code>cur</code> is the current value we are on. We can initialize it at position <code>1</code> (<strong>0 Indexed</strong>) because if position <code>0</code> is negative, it is the greatest negative number, and we don&rsquo;t have to worry. And if the value at position <code>0</code> is positive, it is the smallest positive value, and all the negative values that we add before it will always be smaller.</li>
<li><code>prev</code> is always the node before <code>cur</code> so we can check whether <code>cur.Val</code> is negative and remove the node from the linked list.</li>
</ul>
</li>
<li>In step 2, we have moved <code>prev</code> and <code>cur</code> up by one node.</li>
<li>In step three, we move <code>prev</code> and <code>cur</code> up by one more node.</li>
<li>In step 4, we can see that cur is negative. So we can remove it from the list and add another <code>ListNode</code> with the same value to the beginning. We make <code>start</code> equal to this new <code>ListNode</code> because that is the new start of the linked list.</li>
<li>In step 5, we can see that cur is negative, so we can do the same thing as step 4.</li>
<li>In step 6, we move <code>cur</code> and <code>prev</code> up by a node, but <code>cur == nil</code>, so we break out of the loop and return <code>start</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sortLinkedList</span>(<span style="color:#a6e22e">head</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span> {
    <span style="color:#a6e22e">cur</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>.<span style="color:#a6e22e">Next</span>
    <span style="color:#a6e22e">prev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    <span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">cur</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Val</span> &lt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">start</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ListNode</span>{ <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#a6e22e">start</span> }
            <span style="color:#a6e22e">cur</span> = <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Next</span>
            <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span> = <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span>.<span style="color:#a6e22e">Next</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">prev</span> = <span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Next</span>
            <span style="color:#a6e22e">cur</span> = <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Next</span>
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">start</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 319</title><link>https://nathannaveen.dev/posts/leetcode-319/</link><pubDate>Thu, 28 Oct 2021 15:56:46 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-319/</guid><description>319. Bulb Switcher
Note: If you don&amp;rsquo;t understand this problem, think of it as something similar to Seive of Eratosthenes.
At first I didn&amp;rsquo;t understand how to go about this problem, so I drew it out. I made a graph that might be easier to understand than my drawing:
In this graph the numbers represent what round we are on (Y-axis = what round we are on). And the bulbs represent each bulb (X-axis = what bulb we are on).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/bulb-switcher/">319. Bulb Switcher</a></p>
<p>Note: If you don&rsquo;t understand this problem, think of it as something similar to <em>Seive of Eratosthenes</em>.</p>
<p>At first I didn&rsquo;t understand how to go about this problem, so I drew it out. I made a graph that might be easier to understand than my drawing:</p>
<p><img src="https://i.imgur.com/MZP1ibF.png" alt=""></p>
<ul>
<li>In this graph the numbers represent what round we are on (Y-axis = what round we are on).</li>
<li>And the bulbs represent each bulb (X-axis = what bulb we are on).</li>
<li>The yellow highlights represent the bulb being on.</li>
<li>While the empty boxes in the graph represent the bulb being off.</li>
</ul>
<p>If we do this for many different <code>n</code> we can see a pattern:</p>
<p><img src="https://i.imgur.com/GcFJxKr.png" alt=""></p>
<ul>
<li>In each of the example I only show the end result to save space.</li>
<li>The numbers are to show the round, and bulb number.</li>
<li>The highlights represent the bulbs that are on</li>
<li>I went through a much more excessive messy list of examples, but have shortened it for this this solution.</li>
</ul>
<p><strong>The Explanation:</strong></p>
<p>If you notice, the only bulbs that end up on are the squares because squares are the only numbers that have an odd number of non-repeating divisors.</p>
<ul>
<li>The divisors of <code>36</code> are <code>1, 6, 6, 36</code>, and the non-repeating divisors are <code>1, 6, 36</code>.</li>
<li>The divisors of <code>9</code> are <code>1, 3, 3, 9</code>, and the non-repeating divisors are <code>1, 3, 9</code>.</li>
<li>The divisors of <code>12</code> (Not a square) are <code>1, 3, 4, 12</code>.</li>
<li>The divisors of <code>26</code> (Not a square) are <code>1, 2, 13, 26</code>.</li>
<li>The divisors of <code>13</code> (Not a square) are <code>1, 13</code>.</li>
</ul>
<p>As you can see, the primes have an odd number of non-repeating divisors, while non-primes have an even number of non-repeating divisors.</p>
<p>Since squares have an odd number of non-repeating divisors, they will toggle an odd number of times and end up lit up.</p>
<ul>
<li><code>1</code> toggles at <code>1</code> and is always lit up.</li>
<li><code>4</code> is first toggled at <code>1</code>, then <code>2</code>, and then <code>4</code>.</li>
<li><code>9</code> is first toggled at <code>1</code>, then <code>3</code>, and then <code>9</code> again.</li>
<li><code>16</code> is first toggled at <code>1</code>, then <code>2</code>, <code>4</code>, <code>8</code>, and <code>16</code>.</li>
</ul>
<hr>
<p>If you don&rsquo;t understand how we are toggling <code>1</code>, it is based on the problem statement:</p>
<blockquote>
<p>There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.</p>
</blockquote>
<p>When they say, &ldquo;You first turn on all the bulbs,&rdquo; they mean to toggle on all the bulbs from the first round.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">bulbSwitch</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Sqrt</span>(float64(<span style="color:#a6e22e">n</span>)))
}
</code></pre></div>]]></content></item><item><title>Leetcode 1804</title><link>https://nathannaveen.dev/posts/leetcode-1804/</link><pubDate>Tue, 17 Aug 2021 12:33:53 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1804/</guid><description>1804. Implement Trie II (Prefix Tree)
The idea of this solution can be shown using the following image:
type Node struct { m map[rune] *Node isEndCounter int starts int } type Trie struct { node *Node } func Constructor() Trie { return Trie{node: &amp;amp;Node{make(map[rune] *Node), 0, 0}} } func (this *Trie) Insert(word string) { root := this.node root.starts++ for _, s := range word { if root.m[s] == nil { root.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/implement-trie-ii-prefix-tree/">1804. Implement Trie II (Prefix Tree)</a></p>
<p>The idea of this solution can be shown using the following image:</p>
<p><img src="https://i.imgur.com/HQr5JdP.png" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Node</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">rune</span>] <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>
    <span style="color:#a6e22e">isEndCounter</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">starts</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Trie</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">node</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Constructor</span>() <span style="color:#a6e22e">Trie</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Trie</span>{<span style="color:#a6e22e">node</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Node</span>{make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">rune</span>] <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>}}
}


<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Trie</span>) <span style="color:#a6e22e">Insert</span>(<span style="color:#a6e22e">word</span> <span style="color:#66d9ef">string</span>)  {
    <span style="color:#a6e22e">root</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">node</span>
    <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span><span style="color:#f92672">++</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">word</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>] <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>] = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Node</span>{ <span style="color:#a6e22e">m</span>: make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">rune</span>] <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>), }
        }
        
        <span style="color:#a6e22e">root</span> = <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>]
        <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span><span style="color:#f92672">++</span>
    }
    <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">isEndCounter</span><span style="color:#f92672">++</span>
}


<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Trie</span>) <span style="color:#a6e22e">CountWordsEqualTo</span>(<span style="color:#a6e22e">word</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">root</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">node</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">word</span> {
        <span style="color:#a6e22e">root</span> = <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>]
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">isEndCounter</span>
}


<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Trie</span>) <span style="color:#a6e22e">CountWordsStartingWith</span>(<span style="color:#a6e22e">prefix</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">root</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">node</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">prefix</span> {
        <span style="color:#a6e22e">root</span> = <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>]
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span>
}


<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Trie</span>) <span style="color:#a6e22e">Erase</span>(<span style="color:#a6e22e">word</span> <span style="color:#66d9ef">string</span>)  {
    <span style="color:#a6e22e">root</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">node</span>
    <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span><span style="color:#f92672">--</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">word</span> {
        <span style="color:#a6e22e">root</span> = <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>]
        <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">starts</span><span style="color:#f92672">--</span>
    }
    <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">isEndCounter</span><span style="color:#f92672">--</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1903</title><link>https://nathannaveen.dev/posts/leetcode-1903/</link><pubDate>Tue, 17 Aug 2021 12:31:35 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1903/</guid><description>1903. Largest Odd Number in String
The idea of this solution is pretty simple, we find the last odd digit, and the number from the beginning of num to that odd digit is the greatest odd number we can get.
If you don&amp;rsquo;t understand, think &amp;ldquo;what makes an odd number?&amp;quot; An odd number is a number with its last digit being odd (The last digit can be 1, 3, 5, 7, or 9).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/largest-odd-number-in-string/">1903. Largest Odd Number in String</a></p>
<p>The idea of this solution is pretty simple, we find the last odd digit, and the number from the beginning of <code>num</code> to that odd digit is the greatest odd number we can get.</p>
<p>If you don&rsquo;t understand, think <em>&ldquo;what makes an odd number?&quot;</em> An odd number is a number with its last digit being odd (The last digit can be <code>1, 3, 5, 7</code>, or <code>9</code>).</p>
<p>Here is an example to explain this concept:</p>
<p><code>input: num = &quot;123456&quot;</code></p>
<p>The expected output would be <code>12345</code> because that is the biggest number that is odd.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">largestOddNumber</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">num</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#66d9ef">if</span> int(<span style="color:#a6e22e">num</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">num</span>[: <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1936</title><link>https://nathannaveen.dev/posts/leetcode-1936/</link><pubDate>Tue, 17 Aug 2021 12:31:28 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1936/</guid><description>1936. Add Minimum Number of Rungs
func addRungs(rungs []int, dist int) int { prev := 0 res := 0 for i := 0; i &amp;lt; len(rungs); i++ { rung := rungs[i] res += (rung - prev - 1) / dist prev = rung } return res } The idea of both of these solution are pretty much the same except for this solution we pre-pend 0 to the rungs instead of having prev.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-minimum-number-of-rungs/">1936. Add Minimum Number of Rungs</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">addRungs</span>(<span style="color:#a6e22e">rungs</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">dist</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">prev</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">rungs</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">rung</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rungs</span>[<span style="color:#a6e22e">i</span>]
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">rung</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">prev</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> <span style="color:#a6e22e">dist</span>
        <span style="color:#a6e22e">prev</span> = <span style="color:#a6e22e">rung</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p>The idea of both of these solution are pretty much the same except for this solution we pre-pend <code>0</code> to the rungs instead of having <code>prev</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">addRungs</span>(<span style="color:#a6e22e">rungs</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">dist</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">rungs</span> = append(<span style="color:#a6e22e">rungs</span>[:<span style="color:#ae81ff">0</span>], append([]<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">0</span>}, <span style="color:#a6e22e">rungs</span>[<span style="color:#ae81ff">0</span>:]<span style="color:#f92672">...</span>)<span style="color:#f92672">...</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">rungs</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">rungs</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">rungs</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> <span style="color:#a6e22e">dist</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1945</title><link>https://nathannaveen.dev/posts/leetcode-1945/</link><pubDate>Tue, 17 Aug 2021 12:31:21 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1945/</guid><description>1945. Sum of Digits of String After Convert
The Mathematical Solution:
The idea of this solution uses the fact that k will always be 1 &amp;lt;= k &amp;lt;= 10. Since k will always be greater than 1 we can add the first transformation and conversion together, so we don&amp;rsquo;t add numbers that are greater than 9 to the result.
For an example let us use:
input: s = &amp;quot;hvmhoasabayzzzzzd&amp;quot;, k = 1</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-digits-of-string-after-convert/">1945. Sum of Digits of String After Convert</a></p>
<p><strong>The Mathematical Solution:</strong></p>
<p>The idea of this solution uses the fact that <code>k</code> will always be <code>1 &lt;= k &lt;= 10</code>. Since <code>k</code> will always be greater than <code>1</code> we can add the first transformation and conversion together, so we don&rsquo;t add numbers that are greater than <code>9</code> to the result.</p>
<p>For an example let us use:</p>
<p><code>input: s = &quot;hvmhoasabayzzzzzd&quot;, k = 1</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getLucky</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> int(<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">10</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">temp</span>
        }
    }
    
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
        
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">res</span> &gt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
        }
        <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">temp</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>The Boring String Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getLucky</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">s2</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">s2</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(int(<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>))
    }
    
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">s2</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(string(<span style="color:#a6e22e">s2</span>[<span style="color:#a6e22e">j</span>]))
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">a</span>
        }
        
        <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">temp</span>
        <span style="color:#a6e22e">s2</span> = <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">temp</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1954</title><link>https://nathannaveen.dev/posts/leetcode-1954/</link><pubDate>Tue, 17 Aug 2021 12:31:12 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1954/</guid><description>1954. Minimum Garden Perimeter to Collect Enough Apples
For this solution, I will try to explain it with an image.
I have drawn a picture to explain how this solution works. I have drawn a 2 x 2 and a 4 x 4 square. I will explain the reason for this later. And I have given each position a letter instead of coordinate so I can give a map with each letter and coordinate.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-garden-perimeter-to-collect-enough-apples/">1954. Minimum Garden Perimeter to Collect Enough Apples</a></p>
<p>For this solution, I will try to explain it with an image.</p>
<p>I have drawn a picture to explain how this solution works. I have drawn a <code>2 x 2</code> and a <code>4 x 4</code> square. I will explain the reason for this later. And I have given each position a letter instead of coordinate so I can give a map with each letter and coordinate.</p>
<p><img src="https://i.imgur.com/zHEsL7v.png" alt=""></p>
<p><code>a = (0, 0)</code></p>
<p><code>b = (1, -1)</code></p>
<p><code>c = (0, -1)</code></p>
<p><code>d = (-1, -1)</code></p>
<p><code>e = (-1, 0)</code></p>
<p><code>f = (-1, 1)</code></p>
<p><code>g = (0, 1)</code></p>
<p><code>h = (1, 1)</code></p>
<p><code>i = (1, 0)</code></p>
<p><code>j = (2, 0)</code></p>
<p><code>k = (2, -1)</code></p>
<p><code>l = (2, -2)</code></p>
<p><code>m = (1, -2)</code></p>
<p><code>n = (0, -2)</code></p>
<p><code>o = (-1, -2)</code></p>
<p><code>p = (-2, -2)</code></p>
<p><code>q = (-2, -1)</code></p>
<p><code>r = (-2, 0)</code></p>
<p><code>s = (-2, 1)</code></p>
<p><code>t = (-2, 2)</code></p>
<p><code>u = (-1, 2)</code></p>
<p><code>v = (0, 2)</code></p>
<p><code>w = (1, 2)</code></p>
<p><code>x = (2, 2)</code></p>
<p><code>y = (2, 1)</code></p>
<p>I have drawn a <code>2 x 2</code> and a <code>4 x 4</code> square because drawing a <code>3 x 3</code> square with the center of <code>0 x 0</code> is hard. But you as a reader should know that we will use the <code>3 x 3</code> part in the following paragraph.</p>
<p>Using this we can see that the number of apples for the <code>2 x 2</code> square is <code>0 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12</code>, so we have <code>12</code> apples in the first plot of land. Now for the <code>4 x 4</code> square we can do <code>0 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 3 + 4 + 3 + 2 + 3 + 4 + 3 + 2 + 3 + 4 + 3 + 2 + 3 + 4 + 3 = 60</code>, and <code>60 - 12 = 3 * 3 * 12</code>. We are doing <code>60 - 12</code> because <code>12</code> is the number of apples in the <code>2 x 2</code> and <code>60</code> is the number of apples in the <code>4 x 4</code>. We are doing <code>3 * 3</code> because to find the number of apples in a <code>4 x 4</code> we need to know the number of apples in a <code>3 x 3</code>. Since <code>60 - 12 = 48</code>, <code>3 * 3 * 12 = 48</code>. So to find the number of apples in a <code>4 x 4</code> we can do <code>12 + 48 = 60</code> (The <code>12</code> is the <code>2 x 2</code> and the <code>48</code> is the <code>3 x 3</code>).</p>
<p>Now some of you might be wondering where we get the <code>3 * 3 * 12</code>. It is basically <code>sideLength * sideLength * 12</code>. To understand how we get the <code>12</code>, we have to compare a square of <code>1 x 1</code> and a square of <code>2 x 2</code>. The square of <code>1 x 1</code> has <code>0</code> apples while the <code>2 x 2</code> square has <code>12</code>, so we can do <code>12 - 0 = 12</code>.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minimumPerimeter</span>(<span style="color:#a6e22e">neededApples</span> <span style="color:#66d9ef">int64</span>) <span style="color:#66d9ef">int64</span> {
    <span style="color:#a6e22e">sideLength</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">neededApples</span> &gt; int64(<span style="color:#ae81ff">0</span>) {
        <span style="color:#a6e22e">sideLength</span><span style="color:#f92672">++</span>
        <span style="color:#a6e22e">neededApples</span> <span style="color:#f92672">-=</span> int64(<span style="color:#a6e22e">sideLength</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">sideLength</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">12</span>)
    }
    
    <span style="color:#66d9ef">return</span> int64(<span style="color:#a6e22e">sideLength</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 1910</title><link>https://nathannaveen.dev/posts/leetcode-1910/</link><pubDate>Tue, 17 Aug 2021 12:31:06 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1910/</guid><description>1910. Remove All Occurrences of a Substring
Solution One: (Iterative)
The idea of this solution is pretty simple:
We can loop through s using a counter i Then we check whether s[i : i + len(part)] == part (Is the part of s from i to i + len(part) equal to part). If so, we can re-make s without that part We can also move back the counter (i) by the length of part, so we can see whether removing the part from s makes another part.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-all-occurrences-of-a-substring/">1910. Remove All Occurrences of a Substring</a></p>
<p><strong>Solution One:</strong> (<em>Iterative</em>)</p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We can loop through <code>s</code> using a counter <code>i</code></li>
<li>Then we check whether <code>s[i : i + len(part)] == part</code> (Is the part of <code>s</code> from <code>i</code> to <code>i + len(part)</code> equal to <code>part</code>).
<ul>
<li>If so, we can re-make <code>s</code> without that part</li>
<li>We can also move back the counter (<code>i</code>) by the length of <code>part</code>, so we can see whether removing the part from <code>s</code> makes another <code>part</code>.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeOccurrences</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">part</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> len(<span style="color:#a6e22e">part</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span> : <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> len(<span style="color:#a6e22e">part</span>)] <span style="color:#f92672">==</span> <span style="color:#a6e22e">part</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> len(<span style="color:#a6e22e">part</span>) : len(<span style="color:#a6e22e">s</span>)]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> len(<span style="color:#a6e22e">part</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div><p><strong>Solution Two:</strong></p>
<p>Solution two and three and very similar, and they are also pretty similar to solution one. All three solutions have a pretty similar idea, so if you want to understand this solution, you could look at the explanation from solution one.</p>
<p>I think that the second and third solutions are better recursive solutions than the average recursive solution in time because most of them use some type of <code>indexOf</code>, and <code>indexOf</code> can be <code>O(n)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeOccurrences</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">part</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">part</span>, <span style="color:#ae81ff">0</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">a</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">part</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> len(<span style="color:#a6e22e">part</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span> : <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> len(<span style="color:#a6e22e">part</span>)] <span style="color:#f92672">==</span> <span style="color:#a6e22e">part</span> {
        <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">a</span>(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> len(<span style="color:#a6e22e">part</span>) : len(<span style="color:#a6e22e">s</span>)], <span style="color:#a6e22e">part</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> len(<span style="color:#a6e22e">part</span>))
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> len(<span style="color:#a6e22e">part</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
    }
    <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">a</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">part</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div><p><strong>Solution Three:</strong></p>
<p>This solution should work, but you can&rsquo;t use global variables in Leetcode (<a href="https://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-">Look here if you don&rsquo;t know why</a>). So as far as I know, this code should pass all test cases, but it might just fail on a corner case.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span> = <span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeOccurrences</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">part</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> len(<span style="color:#a6e22e">part</span>)
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> len(<span style="color:#a6e22e">part</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span> : <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> len(<span style="color:#a6e22e">part</span>)] <span style="color:#f92672">==</span> <span style="color:#a6e22e">part</span> {
        <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">removeOccurrences</span>(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> len(<span style="color:#a6e22e">part</span>) : len(<span style="color:#a6e22e">s</span>)], <span style="color:#a6e22e">part</span>)
        
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> len(<span style="color:#a6e22e">part</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
    }
    
    <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> len(<span style="color:#a6e22e">part</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">removeOccurrences</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">part</span>)
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1893</title><link>https://nathannaveen.dev/posts/leetcode-1893/</link><pubDate>Tue, 17 Aug 2021 12:30:59 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1893/</guid><description>1893. Check if All the Integers in a Range Are Covered
First, a walk-through of the code, and then an explanation.
A Walk Through Of the Solution:
We can sort ranges by the ranges left value (I think of ranges as ranges = [][]int{ []int{left, right} }). Then I loop through ranges and: If the ranges left value is greater than left, we can return false. If the ranges left value is smaller than or equal to left and the ranges right is smaller than right, we can re-make left.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered/">1893. Check if All the Integers in a Range Are Covered</a></p>
<p>First, a walk-through of the code, and then an explanation.</p>
<p><strong>A Walk Through Of the Solution:</strong></p>
<ul>
<li>We can sort <code>ranges</code> by the ranges left value (I think of <code>ranges</code> as <code>ranges = [][]int{ []int{left, right} }</code>).</li>
<li>Then I loop through ranges and:
<ul>
<li>If the ranges left value is greater than <code>left</code>, we can return false.</li>
<li>If the ranges left value is smaller than or equal to <code>left</code> and the ranges right is smaller than <code>right</code>, we can re-make <code>left</code>.</li>
<li>If the ranges left value is smaller than or equal to <code>left</code> and the ranges right is greater than or equal to <code>right</code> we can return true.</li>
</ul>
</li>
<li>Otherwise, return <code>false</code>.</li>
</ul>
<p><strong>How This Solution Works:</strong></p>
<p>I will show a couple of images to explain how this solution works.</p>
<p><img src="https://i.imgur.com/rXnpIvS.png" alt=""></p>
<blockquote>
<p>This image shows the first part</p>
</blockquote>
<pre><code>if r[0] &gt; left {
	return false
}
</code></pre>
<blockquote>
<p>as you can see, part <strong>A</strong> in this image has the smallest left value, but since it is greater than <code>left</code>, we know that there will always be a range that is not covered.</p>
</blockquote>
<hr>
<p><img src="https://i.imgur.com/wF7dk7f.png" alt=""></p>
<blockquote>
<p>This image show the second part:</p>
</blockquote>
<pre><code>if r[1] &lt; right {
	left = r[1] + 1
}
</code></pre>
<blockquote>
<p>We only have one range for this example .
We can compare the ranges right and <code>left</code> to re-make <code>left</code> (The <!-- raw HTML omitted -->red<!-- raw HTML omitted -->. is the new line from <code>left</code> to <code>right</code>)</p>
</blockquote>
<hr>
<p><img src="https://i.imgur.com/Vt8dqFm.png" alt=""></p>
<blockquote>
<p>This image shows:</p>
</blockquote>
<pre><code>else {
	return true
}
</code></pre>
<blockquote>
<p>The ranges left is smaller than <code>left</code> and the ranges right is greater than <code>right</code>, so we can return <code>true</code>.</p>
</blockquote>
<hr>
<p>Then at the end, we can return <code>false</code> because if the code has gone that far, the ranges haven&rsquo;t fully covered <code>left</code> to <code>right</code>.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isCovered</span>(<span style="color:#a6e22e">ranges</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">left</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">right</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">ranges</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ranges</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">ranges</span>[<span style="color:#a6e22e">j</span>][<span style="color:#ae81ff">0</span>]
    })
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">ranges</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>[<span style="color:#ae81ff">0</span>] &gt; <span style="color:#a6e22e">left</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> &gt; <span style="color:#a6e22e">left</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>[<span style="color:#ae81ff">1</span>] &lt; <span style="color:#a6e22e">right</span> {
                <span style="color:#a6e22e">left</span> = <span style="color:#a6e22e">r</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
            }
        }
        
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1404</title><link>https://nathannaveen.dev/posts/leetcode-1404/</link><pubDate>Tue, 17 Aug 2021 12:30:51 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1404/</guid><description>1404. Number of Steps to Reduce a Number in Binary Representation to One
The idea of this solution is:
When we find a zero at the end of s, we know that s is divisible by 2, so we can remove the end of the string and add one to the result. When we find a 1 at the end of s, we know that s is not divisible by 2, so we can add 1 by keep making all values before the position equal to 0 if they are 1 and 1 if they are 0.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/">1404. Number of Steps to Reduce a Number in Binary Representation to One</a></p>
<p>The idea of this solution is:</p>
<ul>
<li>When we find a zero at the end of <code>s</code>, we know that <code>s</code> is divisible by <code>2</code>, so we can remove the end of the string and add one to the result.</li>
<li>When we find a <code>1</code> at the end of <code>s</code>, we know that <code>s</code> is not divisible by <code>2</code>, so we can add <code>1</code> by keep making all values before the position equal to <code>0</code> if they are <code>1</code> and <code>1</code> if they are <code>0</code>.</li>
</ul>
<p>If you don&rsquo;t understand the adding a <code>1</code> part, don&rsquo;t worry, I have drawn up an image for understanding:</p>
<p><img src="https://i.imgur.com/WQTWxz4.png" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numSteps</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">addedOne</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> {
            <span style="color:#a6e22e">newI</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span>
            
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">newI</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">newI</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> {
                    <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">newI</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">newI</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> : len(<span style="color:#a6e22e">s</span>)]
                    <span style="color:#a6e22e">newI</span><span style="color:#f92672">--</span>
                    <span style="color:#66d9ef">continue</span>
                } 
                <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span> : <span style="color:#a6e22e">newI</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">newI</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> : len(<span style="color:#a6e22e">s</span>)]
                <span style="color:#66d9ef">break</span>
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newI</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
                <span style="color:#a6e22e">s</span> = <span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>
            }
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">++</span>
            <span style="color:#a6e22e">addedOne</span> = <span style="color:#66d9ef">true</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[: len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
        }
        <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">addedOne</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span>
}
</code></pre></div><p><strong>The Second Solution:</strong></p>
<p>The idea of this solution is pretty simple, so I am not going to explain this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numSteps</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">one</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">one</span> <span style="color:#f92672">+</span> int(<span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">49</span> { <span style="color:#75715e">// 49 because ascii of &#39;1&#39; is 49
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
            <span style="color:#a6e22e">one</span> = <span style="color:#ae81ff">1</span>
        }
    }
    
    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">one</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 302</title><link>https://nathannaveen.dev/posts/leetcode-302/</link><pubDate>Tue, 17 Aug 2021 12:30:46 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-302/</guid><description>302. Smallest Rectangle Enclosing Black Pixels
Note: I think that the x and y coordinates are wrong in the problem because, in a graph, the axis are:
y ^ | | | +--------&amp;gt; x The idea of the solution can be shown using the following image:
The Code:
type key struct { x int y int } func minArea(image [][]byte, x int, y int) int { stack := []key{ key{ y, x } } minX, maxX := 101, 0 minY, maxY := 101, 0 for len(stack) !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/">302. Smallest Rectangle Enclosing Black Pixels</a></p>
<p><em>Note: I think that the <code>x</code> and <code>y</code> coordinates are wrong in the problem because, in a graph, the axis are:</em></p>
<pre tabindex="0"><code>y ^
  |
  |
  |
  +--------&gt;
          x
</code></pre><p>The idea of the solution can be shown using the following image:</p>
<p><img src="https://i.imgur.com/xbVbiBX.png" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">y</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minArea</span>(<span style="color:#a6e22e">image</span> [][]<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">y</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">x</span> } }
    <span style="color:#a6e22e">minX</span>, <span style="color:#a6e22e">maxX</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">minY</span>, <span style="color:#a6e22e">maxY</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
        
        <span style="color:#a6e22e">minX</span> = <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">minX</span>)
        <span style="color:#a6e22e">maxX</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">maxX</span>)
        
        <span style="color:#a6e22e">minY</span> = <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">minY</span>)
        <span style="color:#a6e22e">maxY</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">maxY</span>)
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> })
            <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] = <span style="color:#e6db74">&#39;0&#39;</span>
        }
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> &lt; len(<span style="color:#a6e22e">image</span>[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> })
            <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] = <span style="color:#e6db74">&#39;0&#39;</span>
        }
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> })
            <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>] = <span style="color:#e6db74">&#39;0&#39;</span>
        }
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> &lt; len(<span style="color:#a6e22e">image</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> })
            <span style="color:#a6e22e">image</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">y</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">x</span>] = <span style="color:#e6db74">&#39;0&#39;</span>
        }
    }
    
    <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">maxX</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">minX</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">maxY</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">minY</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 582</title><link>https://nathannaveen.dev/posts/leetcode-582/</link><pubDate>Tue, 17 Aug 2021 12:30:39 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-582/</guid><description>582. Kill Process
Both of these solutions operate on the same idea:
We add all the parents and children to a map in the format of map[parent] []children (map of a parent then an array of children) Then we add the kill value to the result and the kills children (From the map), and then the kill&amp;rsquo;s children&amp;rsquo;s children, and so on (kill, kill children, kills children's children). Iterative</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/kill-process/">582. Kill Process</a></p>
<p>Both of these solutions operate on the same idea:</p>
<ul>
<li>We add all the parents and children to a map in the format of <code>map[parent] []children</code> (map of a parent then an array of children)</li>
<li>Then we add the <code>kill</code> value to the result and the <code>kills</code> children (From the map), and then the <code>kill</code>&rsquo;s children&rsquo;s children, and so on (<code>kill</code>, <code>kill children</code>, <code>kills children's children</code>).</li>
</ul>
<p><strong>Iterative</strong></p>
<p><em>If you don&rsquo;t understand <code>stack = append(stack, m[pop]...)</code>, it is basically doing:</em></p>
<pre tabindex="0"><code>for _, i := range m[pop] {
    stack = append(stack, i)
}
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">killProcess</span>(<span style="color:#a6e22e">pid</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">ppid</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">kill</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">kill</span>}
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] []<span style="color:#66d9ef">int</span> )
	
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">pid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">ppid</span>[<span style="color:#a6e22e">i</span>]] = append(<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">ppid</span>[<span style="color:#a6e22e">i</span>]], <span style="color:#a6e22e">pid</span>[<span style="color:#a6e22e">i</span>])
    }
    
    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">pop</span>)
        <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">pop</span>]<span style="color:#f92672">...</span>)
    }
    
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>Recursive</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">killProcess</span>(<span style="color:#a6e22e">pid</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">ppid</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">kill</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] []<span style="color:#66d9ef">int</span> )
	
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">pid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">ppid</span>[<span style="color:#a6e22e">i</span>]] = append(<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">ppid</span>[<span style="color:#a6e22e">i</span>]], <span style="color:#a6e22e">pid</span>[<span style="color:#a6e22e">i</span>])
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">kill</span>, <span style="color:#a6e22e">m</span>, []<span style="color:#66d9ef">int</span>{})
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">kill</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">m</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">res</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">kill</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">kill</span>] {
        <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">res</span>)
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 888</title><link>https://nathannaveen.dev/posts/leetcode-888/</link><pubDate>Tue, 17 Aug 2021 12:30:29 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-888/</guid><description>888. Fair Candy Swap
The idea of this solution can be shown using the following image:
The Code:
func fairCandySwap(A []int, B []int) []int { alice, bob := 0, 0 m := make(map[int] int) for _, i := range A { alice += i } for _, i := range B { bob += i m[i]++ } temp := (alice - bob) / 2 for _, i := range A { if m[i - temp] &amp;gt;= 1 { return []int{i, i - temp} } } return []int{} }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/fair-candy-swap/">888. Fair Candy Swap</a></p>
<p>The idea of this solution can be shown using the following image:</p>
<p><img src="https://i.imgur.com/xhn1h9B.png" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fairCandySwap</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">B</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">alice</span>, <span style="color:#a6e22e">bob</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">int</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">A</span> { <span style="color:#a6e22e">alice</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">B</span> { 
        <span style="color:#a6e22e">bob</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> 
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }
    
    <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> (<span style="color:#a6e22e">alice</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">bob</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">A</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">temp</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#66d9ef">return</span> []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">temp</span>}
        }
    }
    
    <span style="color:#66d9ef">return</span> []<span style="color:#66d9ef">int</span>{}
}
</code></pre></div>]]></content></item><item><title>Leetcode 1940</title><link>https://nathannaveen.dev/posts/leetcode-1940/</link><pubDate>Sun, 25 Jul 2021 18:33:29 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1940/</guid><description>1940. Longest Common Subsequence Between Sorted Arrays
At first, I thought that this would need a nice algorithm, but then when I read the description, it said that
&amp;ldquo;arrays is sorted in strictly increasing order&amp;rdquo;
and
&amp;ldquo;longest common subsequence&amp;rdquo;
The first part, &amp;ldquo;arrays is sorted in strictly increasing order,&amp;rdquo; tells us that each array is sorted and each array has unique numbers.
The second part, &amp;ldquo;longest common subsequence&amp;rdquo; says that it is a subsequence and not a subarray.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-common-subsequence-between-sorted-arrays/">1940. Longest Common Subsequence Between Sorted Arrays</a></p>
<p>At first, I thought that this would need a nice algorithm, but then when I read the description, it said that</p>
<blockquote>
<p>&ldquo;<code>arrays</code> is sorted in <strong>strictly increasing</strong> order&rdquo;</p>
</blockquote>
<p>and</p>
<blockquote>
<p>&ldquo;longest common <strong>subsequence</strong>&rdquo;</p>
</blockquote>
<p>The first part, &ldquo;<code>arrays</code> is sorted in <strong>strictly increasing</strong> order,&rdquo; tells us that each array is sorted and each array has unique numbers.</p>
<p>The second part, &ldquo;longest common <strong>subsequence</strong>&rdquo; says that it is a <strong>subsequence</strong> and not a <strong>subarray</strong>. A <strong>subsequence</strong> are any elements in an array with the same order, but a <strong>subarray</strong> is contiguous elements in an array.</p>
<h2 id="the-first-solution">The First Solution:</h2>
<p>For the first solution, we don&rsquo;t care whether the arrays are sorted. We just care that we need subsequence, and each array has unique numbers. So all we have to do is loop through every element in <code>arrays</code> and check whether the frequency of any element is equal to <code>len(arrays)</code> (Whether every array contains that element).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">longestCommomSubsequence</span>(<span style="color:#a6e22e">arrays</span> [][]<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">int</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arrays</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">arrays</span>) {
                <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">i</span>)
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><h2 id="the-second-solution">The Second Solution:</h2>
<p>I thought that the first solution was boring, so I decided to develop a solution that is a little more advanced <em>(FUN)</em>. I drew up a quick image to explain how this solution works:</p>
<p><img src="https://i.imgur.com/UCxprqh.png" alt=""></p>
<p>The explanation for images 2 and 3 is pretty much how this solution works.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">longestCommomSubsequence</span>(<span style="color:#a6e22e">arrays</span> [][]<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">arrays</span>)) <span style="color:#75715e">// the counters for each array
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">keepGoing</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">keepGoing</span> {
        <span style="color:#a6e22e">keepGoing</span> = <span style="color:#66d9ef">false</span>
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
        <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">arrays</span>[<span style="color:#ae81ff">0</span>][<span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">0</span>]]
        
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arrays</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> { <span style="color:#75715e">// find the max
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arrays</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]] &gt; <span style="color:#a6e22e">max</span> {
                <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">arrays</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]]
            }
        }
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arrays</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arrays</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">==</span> <span style="color:#a6e22e">max</span> {
                <span style="color:#a6e22e">temp</span><span style="color:#f92672">++</span>
            } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arrays</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]] &lt; <span style="color:#a6e22e">max</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> len(<span style="color:#a6e22e">arrays</span>[<span style="color:#a6e22e">i</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> {
                <span style="color:#a6e22e">keepGoing</span> = <span style="color:#66d9ef">true</span>
                <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
            }
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">arrays</span>) {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">max</span>)
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arrays</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> len(<span style="color:#a6e22e">arrays</span>[<span style="color:#a6e22e">i</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> {
                    <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
                    <span style="color:#a6e22e">keepGoing</span> = <span style="color:#66d9ef">true</span>
                }
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 199</title><link>https://nathannaveen.dev/posts/leetcode-199/</link><pubDate>Sun, 25 Jul 2021 18:33:21 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-199/</guid><description>199. Binary Tree Right Side View
The idea of both solutions is pretty simple, we just use BFS to iterate through all the rows and append the last element in the row (The right most element).
Iterative:
func rightSideView(root *TreeNode) []int { res := []int{} if root != nil { queue := []*TreeNode{ root } for len(queue) != 0 { n := len(queue) res = append(res, queue[n - 1].Val) for i := 0; i &amp;lt; n; i++ { pop := queue[0] queue = queue[1:] if pop.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-right-side-view/">199. Binary Tree Right Side View</a></p>
<p>The idea of both solutions is pretty simple, we just use BFS to iterate through all the rows and append the last element in the row (The right most element).</p>
<p><strong>Iterative:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">rightSideView</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{ <span style="color:#a6e22e">root</span> }

        <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">queue</span>[<span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">Val</span>)

            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
                <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
                <span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]

                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
                    <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>)
                }
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
                    <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
                }
            }
        }
    }
    
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>Recursive:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">rightSideView</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">helper</span>([]<span style="color:#66d9ef">int</span>{}, []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>})
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">res</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">queue</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span> ) []<span style="color:#66d9ef">int</span> {
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">queue</span>[len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">queue</span>[len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">Val</span>)

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
            <span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
            
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> { <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>) }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> { <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>) }
        }

        <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">queue</span>)
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 495</title><link>https://nathannaveen.dev/posts/leetcode-495/</link><pubDate>Sun, 25 Jul 2021 18:33:13 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-495/</guid><description>495. Teemo Attacking
The idea of these two solutions is pretty simple, but in the second solution, I didn&amp;rsquo;t want to use a variable to store the result, so I manipulated timeSeries into storing the resulting values (Basically used DP).
The First Solution
I first did this solution like this:
func findPoisonedDuration(timeSeries []int, duration int) int { res := 0 for i := 1; i &amp;lt; len(timeSeries); i++ { if timeSeries[i - 1] + duration - 1 &amp;lt; timeSeries[i] { res += duration } else { res += timeSeries[i] - timeSeries[i - 1] } } if len(timeSeries) !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/teemo-attacking/">495. Teemo Attacking</a></p>
<p>The idea of these two solutions is pretty simple, but in the second solution, I didn&rsquo;t want to use a variable to store the result, so I manipulated <code>timeSeries</code> into storing the resulting values (Basically used DP).</p>
<p><strong>The First Solution</strong></p>
<p>I first did this solution like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findPoisonedDuration</span>(<span style="color:#a6e22e">timeSeries</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">duration</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">timeSeries</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">duration</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> &lt; <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">duration</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
        }
    }
    
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">duration</span>        
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p>But then relised that I could make a nicer code by doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findPoisonedDuration</span>(<span style="color:#a6e22e">timeSeries</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">duration</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">timeSeries</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(<span style="color:#a6e22e">duration</span>), float64(<span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>])))
    }
    
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">duration</span>        
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>The Second Solution</strong></p>
<p>And for the second solution I first did this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findPoisonedDuration</span>(<span style="color:#a6e22e">timeSeries</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">duration</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">duration</span>
    }
    
    <span style="color:#a6e22e">timeSeries</span> = <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">timeSeries</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">duration</span>, <span style="color:#a6e22e">timeSeries</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">0</span>)
    
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">timeSeries</span> = <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">timeSeries</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">duration</span>, <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>])
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">timeSeries</span>[len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">duration</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">timeSeries</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">duration</span>, <span style="color:#a6e22e">elseAdd</span>, <span style="color:#a6e22e">previous</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">duration</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">previous</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">duration</span>
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">previous</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">elseAdd</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">timeSeries</span>
}
</code></pre></div><p>But relized that I could make it nicer by doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findPoisonedDuration</span>(<span style="color:#a6e22e">timeSeries</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">duration</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">duration</span>
    }
    
    <span style="color:#a6e22e">timeSeries</span>[<span style="color:#ae81ff">0</span>] = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(<span style="color:#a6e22e">duration</span>), float64(<span style="color:#a6e22e">timeSeries</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#ae81ff">0</span>])))
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>] = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(<span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">duration</span>), float64(<span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">timeSeries</span>[<span style="color:#a6e22e">i</span>])))
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">timeSeries</span>[len(<span style="color:#a6e22e">timeSeries</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">duration</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 50</title><link>https://nathannaveen.dev/posts/leetcode-50/</link><pubDate>Sun, 25 Jul 2021 18:33:06 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-50/</guid><description>50. Pow(x, n)
This solution is if n &amp;lt; 0 (If n is negative) we can return 1 / (x ^ (-n)) (The -n is for making n positive). Otherwise we can just return math.Pow(x, n).
func myPow(x float64, n int) float64 { if n &amp;lt; 0 { return 1 / math.Pow(x, float64(-n)) } return math.Pow(x, float64(n)) } Technically we could do the following code and solve the problem, but that isn&amp;rsquo;t the idea of the problem because Golang takes care of test cases when n is negative.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/powx-n/">50. Pow(x, n)</a></p>
<p>This solution is if <code>n &lt; 0</code> (If <code>n</code> is negative) we can return <code>1 / (x ^ (-n))</code> (The <code>-n</code> is for making <code>n</code> positive). Otherwise we can just return <code>math.Pow(x, n)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">myPow</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">float64</span>, <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">float64</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> &lt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Pow</span>(<span style="color:#a6e22e">x</span>, float64(<span style="color:#f92672">-</span><span style="color:#a6e22e">n</span>))
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Pow</span>(<span style="color:#a6e22e">x</span>, float64(<span style="color:#a6e22e">n</span>))
}
</code></pre></div><p>Technically we could do the following code and solve the problem, but that isn&rsquo;t the idea of the problem because Golang takes care of test cases when <code>n</code> is negative.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">myPow</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">float64</span>, <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">float64</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Pow</span>(<span style="color:#a6e22e">x</span>, float64(<span style="color:#a6e22e">n</span>))
}
</code></pre></div>]]></content></item><item><title>Leetcode 1886</title><link>https://nathannaveen.dev/posts/leetcode-1886/</link><pubDate>Sun, 25 Jul 2021 18:33:01 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1886/</guid><description>1886. Determine Whether Matrix Can Be Obtained By Rotation
The idea of this solution is to loop through every point in mat and check whether it has been rotated 0, 90, 180, or 270 degrees.
We don&amp;rsquo;t need to check whether mat has been rotated by 0 degrees the way we are doing the rest of the rotations. All we have to do is check whether mat == target.
I am going to explain how we do the rotations using some images.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/">1886. Determine Whether Matrix Can Be Obtained By Rotation</a></p>
<p>The idea of this solution is to loop through every point in <code>mat</code> and check whether it has been rotated <code>0, 90, 180</code>, or <code>270</code> degrees.</p>
<p>We don&rsquo;t need to check whether <code>mat</code> has been rotated by <code>0</code> degrees the way we are doing the rest of the rotations. All we have to do is check whether <code>mat == target</code>.</p>
<hr>
<p>I am going to explain how we do the rotations using some images. Usually, when using a grid in math, we will write a coordinate as <code>(x, y)</code> but in this grid, we go <code>(row, col)</code>, so it will be <code>(y, x)</code>, or since we are using <code>j</code> and <code>i</code> <code>(i, j)</code>.</p>
<hr>
<p>In this image, I am writing each coordinate in each square, and the blue highlight is the position we will be using for all the examples:</p>
<p><img src="https://i.imgur.com/V6vd3ok.png" alt=""></p>
<p>Let us start with <code>mat[i][j] != target[len(target) - 1 - j][i]</code> this is for checking whether <code>target</code> is <code>mat</code> rotated <code>90</code> degrees. So our example position, <code>(2, 1)</code> is green and the rotated version is yellow. <code>target[len(target) - 1 - j][i] = target[3 - 1 - 1][2] = target[1][2]</code>:</p>
<p><img src="https://i.imgur.com/EtAMH4p.png" alt=""></p>
<p>Our next rotation can be <code>270</code> degrees, because <code>mat[i][j] != target[j][len(target) - 1 - i] = mat[i][j] != target[1][3 - 1 - 2] = target[1][0]</code>. Just like in the previous image the start is the green and the rotated part is yellow:</p>
<p><img src="https://i.imgur.com/rpHRc2C.png" alt=""></p>
<p>And for the final rotation, <code>180</code> degrees. This image works because <code>target[3 - 1 - 2][3 - 1 - 1] = target[0][1]</code>. And just like in the previous image <code>mat[i][j]</code> is green and the rotated part is yellow:</p>
<p><img src="https://i.imgur.com/nsbFMWm.png" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findRotation</span>(<span style="color:#a6e22e">mat</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">target</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">rotateOne</span>, <span style="color:#a6e22e">rotateTwo</span>, <span style="color:#a6e22e">rotateThree</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>, <span style="color:#66d9ef">true</span>, <span style="color:#66d9ef">true</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">mat</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">mat</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">target</span>[len(<span style="color:#a6e22e">target</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">j</span>][<span style="color:#a6e22e">i</span>] {
                <span style="color:#a6e22e">rotateOne</span> = <span style="color:#66d9ef">false</span>
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">target</span>[<span style="color:#a6e22e">j</span>][len(<span style="color:#a6e22e">target</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span>] {
                <span style="color:#a6e22e">rotateTwo</span> = <span style="color:#66d9ef">false</span>
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">target</span>[len(<span style="color:#a6e22e">target</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span>][len(<span style="color:#a6e22e">target</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">j</span>] {
                <span style="color:#a6e22e">rotateThree</span> = <span style="color:#66d9ef">false</span>
            }
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">rotateOne</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">rotateTwo</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">rotateThree</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">DeepEqual</span>(<span style="color:#a6e22e">mat</span>, <span style="color:#a6e22e">target</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 590</title><link>https://nathannaveen.dev/posts/leetcode-590/</link><pubDate>Sun, 25 Jul 2021 18:32:55 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-590/</guid><description>590. N-ary Tree Postorder Traversal
The First Solution:
This solution seems pretty self-explanatory.
func postorder(root *Node) []int { return helper(root, []int{}) } func helper(r *Node, l []int)[]int{ if r != nil{ for _,item := range r.Children{ l = helper(item,l) } l = append(l,r.Val) } return l } The Second Solution:
If you look at the following code and don&amp;rsquo;t understand, it is probably because of: r.Children[len(r.Children) - i - 1], but if you look at it carefully, you will see that it is the same as reversing r.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/n-ary-tree-postorder-traversal/">590. N-ary Tree Postorder Traversal</a></p>
<p><strong>The First Solution:</strong></p>
<p>This solution seems pretty self-explanatory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">postorder</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>, []<span style="color:#66d9ef">int</span>{})
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>, <span style="color:#a6e22e">l</span> []<span style="color:#66d9ef">int</span>)[]<span style="color:#66d9ef">int</span>{
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span>{
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>,<span style="color:#a6e22e">item</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Children</span>{
            <span style="color:#a6e22e">l</span> = <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">item</span>,<span style="color:#a6e22e">l</span>)
        }
        <span style="color:#a6e22e">l</span> = append(<span style="color:#a6e22e">l</span>,<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Val</span>)        
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">l</span>
}
</code></pre></div><p><strong>The Second Solution:</strong></p>
<p>If you look at the following code and don&rsquo;t understand, it is probably because of: <code>r.Children[len(r.Children) - i - 1]</code>, but if you look at it carefully, you will see that it is the same as reversing <code>r.Children</code> except cleaner.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">postorder</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">root</span>, []<span style="color:#66d9ef">int</span>{})
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Node</span>, <span style="color:#a6e22e">l</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">l</span> = append(<span style="color:#a6e22e">l</span>[:<span style="color:#ae81ff">0</span>], append([]<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Val</span>}, <span style="color:#a6e22e">l</span>[<span style="color:#ae81ff">0</span>:]<span style="color:#f92672">...</span>)<span style="color:#f92672">...</span>)
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Children</span> {
            <span style="color:#a6e22e">l</span> = <span style="color:#a6e22e">helper</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Children</span>[len(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Children</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">l</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">l</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 987</title><link>https://nathannaveen.dev/posts/leetcode-987/</link><pubDate>Sun, 25 Jul 2021 18:32:47 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-987/</guid><description>987. Vertical Order Traversal of a Binary Tree
I know that this solution is very cumbersome and annoying, so I am just going to explain what the main idea is:
We first use BFS to find every node with its row and column and store those values in an array. Then, we add all the values from the array to a matrix array which stores the nodes value and the row of the node in the position of the column.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/">987. Vertical Order Traversal of a Binary Tree</a></p>
<p>I know that this solution is <em><strong>very</strong></em> cumbersome and annoying, so I am just going to explain what the main idea is:</p>
<ul>
<li>We first use BFS to find every node with its row and column and store those values in an array.</li>
<li>Then, we add all the values from the array to a matrix array which stores the nodes value and the row of the node in the position of the column.</li>
<li>Then, we sort all the values in each array in the matrix array by either their value or row.</li>
<li>Then we add all the values to the resulting array because we are only supposed to return a matrix array on <code>ints</code> and not a random key which I made up (If you don&rsquo;t understand about the random keys look at the solution, I have three random keys).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">val</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">row</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">col</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key2</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">node</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>
    <span style="color:#a6e22e">row</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">col</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key3</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">val</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">row</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">verticalTraversal</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) [][]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span> } }
    <span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">key2</span>{ <span style="color:#a6e22e">key2</span>{ <span style="color:#a6e22e">root</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span> } }
    <span style="color:#a6e22e">min</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Val</span>
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Val</span>
    
    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
        
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
            <span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
            
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
                <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">row</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> })
                <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">key2</span>{ <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">row</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> })
                <span style="color:#a6e22e">min</span> = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>), float64(<span style="color:#a6e22e">min</span>)))
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
                <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">key</span>{ <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">row</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> })
                <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">key2</span>{ <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">row</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> })
                <span style="color:#a6e22e">max</span> = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Max</span>(float64(<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>), float64(<span style="color:#a6e22e">max</span>)))
            }
        }
    }
    
    <span style="color:#a6e22e">arr2</span> <span style="color:#f92672">:=</span> make([][]<span style="color:#a6e22e">key3</span>, <span style="color:#a6e22e">max</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
        <span style="color:#a6e22e">arr2</span>[<span style="color:#a6e22e">i</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span>] = append(<span style="color:#a6e22e">arr2</span>[<span style="color:#a6e22e">i</span>.<span style="color:#a6e22e">col</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span>], <span style="color:#a6e22e">key3</span>{<span style="color:#a6e22e">i</span>.<span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">i</span>.<span style="color:#a6e22e">row</span>})
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr2</span> {
        <span style="color:#a6e22e">arr3</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
        <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">k</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">row</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">row</span> {
                <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">val</span> &lt; <span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">val</span>
            }
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">row</span> &lt; <span style="color:#a6e22e">k</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">row</span>
        })
        
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">k</span> {
            <span style="color:#a6e22e">arr3</span> = append(<span style="color:#a6e22e">arr3</span>, <span style="color:#a6e22e">i</span>.<span style="color:#a6e22e">val</span>)
        }
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">arr3</span>)
    }
    
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">res</span>[len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">counter</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">res</span>[len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">counter</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
            <span style="color:#66d9ef">continue</span>
        }
        <span style="color:#66d9ef">break</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>[:len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
}
</code></pre></div>]]></content></item><item><title>Leetcode 1559</title><link>https://nathannaveen.dev/posts/leetcode-1559/</link><pubDate>Tue, 06 Jul 2021 18:32:45 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1559/</guid><description>1559. Detect Cycles in 2D Grid
The idea for this solution is to:
Find a backward L shape in the matrix. (Don&amp;rsquo;t worry if you don&amp;rsquo;t understand I will come back to it later) Then check whether the cycle all starts from one position. (I will also come back to this later) For this solution, I am going to explain how it works using an example:
If you look at the problem, you might see this example already there, I picked this example because we know the answer:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/detect-cycles-in-2d-grid/">1559. Detect Cycles in 2D Grid</a></p>
<p>The idea for this solution is to:</p>
<ul>
<li>Find a backward L shape in the matrix. (Don&rsquo;t worry if you don&rsquo;t understand I will come back to it later)</li>
<li>Then check whether the cycle all starts from one position. (I will also come back to this later)</li>
</ul>
<p>For this solution, I am going to explain how it works using an example:</p>
<p><img src="https://i.imgur.com/8rU2sDU.jpg" alt=""></p>
<p>If you look at the problem, you might see this example already there, I picked this example because we know the answer:</p>
<p><img src="https://i.imgur.com/4cGMdrb.jpg" alt=""></p>
<p>Now we will start from position <code>(0, 0)</code> and introduce a new matrix array called <code>arr</code> to store whether the previous elements in <code>grid</code> are the same as the current element and the start position.</p>
<p><img src="https://i.imgur.com/ADbh5cQ.jpg" alt=""></p>
<blockquote>
<p>Since there is no value on the top or left of our current position we can make <code>arr[0][0] = 1</code>, and the start position equal to <code>(0, 0)</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/mIhjSM2.png" alt=""></p>
<blockquote>
<p>In <code>grid</code> the letter on the left of <code>grid[0][1]</code> is <code>&quot;c&quot;</code> as well so we can make <code>arr[0][1] = int(grid[i - 1][j] - 'a') + 2 = 5</code>. We do the <code>+ 2</code> at the end because we want to avoid <code>0</code>&rsquo;s and <code>1</code>&rsquo;s for the values. Our start position stays the same because we the cycle still starts at <code>(0, 0)</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/ndR2TMu.png" alt=""></p>
<blockquote>
<p>The image above is just like the previous one.</p>
</blockquote>
<p><img src="https://i.imgur.com/QVQljOl.png" alt=""></p>
<blockquote>
<p>The letter at <code>grid[0][2]</code> is the letter to the left of <code>grid[0][3]</code>, but <code>grid[0][2] != grid[0][3]</code>, and since there is no element above <code>grid[0][3]</code>. So we have to make a new start position because this is the start of a new cycle.</p>
</blockquote>
<p><img src="https://i.imgur.com/2z8R8fm.png" alt=""></p>
<blockquote>
<p>Since there is a <code>&quot;c&quot;</code> above in <code>grid[1][0]</code> we can make <code>arr[1][0] = 5</code> and the start position equal <code>(0, 0)</code> again.</p>
</blockquote>
<p><img src="https://i.imgur.com/mvjqE99.png" alt=""></p>
<blockquote>
<p>Since the top and left letters of <code>grid[1][1]</code> are not equal to <code>&quot;d&quot;</code>, we know that we have to make a new cycle.</p>
</blockquote>
<p><img src="https://i.imgur.com/zjIQOLR.png" alt=""></p>
<blockquote>
<p>The element on top of <code>grid[1][2]</code> is equal to <code>&quot;c&quot;</code> so we can continue with <code>arr[1][2] = int(grid[i - 1][j] - 'a') + 2 = 5</code>, and the start position will be <code>(0, 0)</code> just like the elements on tops.</p>
</blockquote>
<p><em><strong>I just realized that I have been writing <code>3</code> instead of <code>1</code> for <code>arr[0][3]</code> for all the previous images. Sorry!</strong></em></p>
<p>This keeps on going on, and we get:</p>
<p><img src="https://i.imgur.com/9CrPVVt.png" alt=""></p>
<blockquote>
<p>We get the <code>25</code> in <code>arr</code> by doing <code>arr[3][2]</code> by <code>arr[2][3]</code> just like in the image below.</p>
<p>Then we know that this is a cycle because we found a backward <code>L</code> (shown in the image below), and we know that <code>arr[3][2]</code>&rsquo;s, and <code>arr[2][3]</code>&rsquo;s start position equals each other.</p>
</blockquote>
<p><img src="https://i.imgur.com/QhtYmU1.png" alt=""></p>
<ul>
<li>Note: The backward <code>L</code> I was talking about is the blue part in the picture.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">points</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">val</span> <span style="color:#66d9ef">int</span>
	<span style="color:#a6e22e">p</span>   []<span style="color:#a6e22e">points</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">containsCycle</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">byte</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> [][]<span style="color:#a6e22e">key</span>{}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>, make([]<span style="color:#a6e22e">key</span>, len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>])))
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">val</span> = <span style="color:#ae81ff">1</span>
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] {
				<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">val</span> <span style="color:#f92672">*=</span> int(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
				<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span> = append(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span>, <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span><span style="color:#f92672">...</span>)
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">j</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] {
				<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">val</span> <span style="color:#f92672">*=</span> int(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
				<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span> = append(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span>, <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">p</span><span style="color:#f92672">...</span>)
			}
			<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
				<span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">points</span>{<span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">i</span>}
				<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span> = []<span style="color:#a6e22e">points</span>{ <span style="color:#a6e22e">a</span> }
			}

			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">val</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">val</span> <span style="color:#f92672">!=</span> int(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> {

				<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">done</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ifStartIsSame</span>(<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>)
				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">done</span> {
					<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
				}
			}
		}
	}

	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ifStartIsSame</span>(<span style="color:#a6e22e">arr</span> [][]<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) (<span style="color:#66d9ef">bool</span>, <span style="color:#66d9ef">bool</span>) {
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">k</span> &lt; len(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span>); <span style="color:#a6e22e">k</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">l</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">l</span> &lt; len(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">p</span>); <span style="color:#a6e22e">l</span><span style="color:#f92672">++</span> {
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span>[<span style="color:#a6e22e">k</span>].<span style="color:#a6e22e">x</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">p</span>[<span style="color:#a6e22e">l</span>].<span style="color:#a6e22e">x</span> <span style="color:#f92672">&amp;&amp;</span>
			<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">p</span>[<span style="color:#a6e22e">k</span>].<span style="color:#a6e22e">y</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">p</span>[<span style="color:#a6e22e">l</span>].<span style="color:#a6e22e">y</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>, <span style="color:#66d9ef">true</span>
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 759</title><link>https://nathannaveen.dev/posts/leetcode-759/</link><pubDate>Tue, 06 Jul 2021 18:25:36 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-759/</guid><description>759. Employee Free Time
The idea of this solution is pretty simple:
We add everyone&amp;rsquo;s intervals into an array of intervals called arr. Then, we sort arr by their start values. Then when we loop through arr: If the end of the current element is smaller than the following elements start, we know that we have no overlap. Else if, the current elements end value is greater than the following elements start and the next elements end value, we know that the current elements time frame surrounds the following elements time frame.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/employee-free-time/">759. Employee Free Time</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We add everyone&rsquo;s intervals into an array of intervals called <code>arr</code>.</li>
<li>Then, we sort <code>arr</code> by their start values.</li>
<li>Then when we loop through <code>arr</code>:
<ul>
<li>If the end of the current element is smaller than the following elements start, we know that we have no overlap.</li>
<li>Else if, the current elements end value is greater than the following elements start and the next elements end value, we know that the current elements time frame surrounds the following elements time frame.</li>
<li>And if the current element&rsquo;s end value is greater than the next element&rsquo;s start value, we can merge the two intervals.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">employeeFreeTime</span>(<span style="color:#a6e22e">schedule</span> [][]<span style="color:#f92672">*</span><span style="color:#a6e22e">Interval</span>) []<span style="color:#f92672">*</span><span style="color:#a6e22e">Interval</span> {
    <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">Interval</span>{}
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">Interval</span>{}
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">schedule</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">ints</span> {
            <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">i</span>)
        }
    }
    
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">arr</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">Start</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">j</span>].<span style="color:#a6e22e">Start</span>
    })
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">End</span> &lt; <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">Start</span> {
            <span style="color:#66d9ef">continue</span>
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">End</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">End</span> {
            <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>[:<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>:]<span style="color:#f92672">...</span>)
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">End</span> = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">End</span>
            <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>[:<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">212</span>:]<span style="color:#f92672">...</span>)
        }
        <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>        
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Interval</span>{ <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">End</span>, <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].<span style="color:#a6e22e">Start</span> })
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1913</title><link>https://nathannaveen.dev/posts/leetcode-1913/</link><pubDate>Tue, 06 Jul 2021 18:25:29 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1913/</guid><description>1913. Maximum Product Difference Between Two Pairs
For this solution, we have to get the maximum Product Difference and to do this, we have to subtract the smallest product from the largest product. So in this solution, I decided to sort nums and return the max product minus the min product.
func maxProductDifference(nums []int) int { sort.Ints(nums) return nums[len(nums) - 1] * nums[len(nums) - 2] - nums[0] * nums[1] }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-product-difference-between-two-pairs/">1913. Maximum Product Difference Between Two Pairs</a></p>
<p>For this solution, we have to get the maximum <em>Product Difference</em> and to do this, we have to subtract the smallest product from the largest product. So in this solution, I decided to sort <code>nums</code> and return the max product minus the min product.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxProductDifference</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">nums</span>[len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> <span style="color:#a6e22e">nums</span>[len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">1</span>]
}
</code></pre></div>]]></content></item><item><title>Leetcode 817</title><link>https://nathannaveen.dev/posts/leetcode-817/</link><pubDate>Tue, 06 Jul 2021 18:25:21 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-817/</guid><description>817. Linked List Components
The idea of this solution is:
We make a map to store all the values in nums because all the values in nums are unordered subsets of our linked list, so finding whether nums contains a value is now done in O(1) time (Note that to get all the values into the map it takes O(n) time). Then all we have to do is loop through our linked list and if m (Our map is called m) contains the current value and it doesn&amp;rsquo;t contain the previous value or the value is the head and m contains the value we know that we have another component.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/linked-list-components/">817. Linked List Components</a></p>
<p>The idea of this solution is:</p>
<ul>
<li>We make a map to store all the values in <code>nums</code> because all the values in <code>nums</code> are unordered subsets of our linked list, so finding whether <code>nums</code> contains a value is now done in <code>O(1)</code> time (Note that to get all the values into the map it takes <code>O(n)</code> time).</li>
<li>Then all we have to do is loop through our linked list and if <code>m</code> (Our map is called <code>m</code>) contains the current value and it doesn&rsquo;t contain the previous value or the value is the head and <code>m</code> contains the value we know that we have another component.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numComponents</span>(<span style="color:#a6e22e">head</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>, <span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">prev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    <span style="color:#a6e22e">cur</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">num</span>] = <span style="color:#ae81ff">1</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">cur</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Val</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">cur</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">head</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">prev</span>.<span style="color:#a6e22e">Val</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
            <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
        }
        <span style="color:#a6e22e">prev</span> = <span style="color:#a6e22e">cur</span>
        <span style="color:#a6e22e">cur</span> = <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Next</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 933</title><link>https://nathannaveen.dev/posts/leetcode-933/</link><pubDate>Tue, 06 Jul 2021 18:25:16 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-933/</guid><description>933. Number of Recent Calls
For this solution, we have got to look at something that is said in the problem description:
It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.
So using that, we can make a variable (Which I called k) and store the position of the last position of the value that is greater than or equal to t - 3000.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-recent-calls/">933. Number of Recent Calls</a></p>
<p>For this solution, we have got to look at something that is said in the problem description:</p>
<blockquote>
<p>It is <em><strong>guaranteed</strong></em> that every call to ping uses a strictly larger value of <code>t</code> than the previous call.</p>
</blockquote>
<p>So using that, we can make a variable (Which I called <code>k</code>) and store the position of the last position of the value that is greater than or equal to <code>t - 3000</code>. Then when we add a <code>t</code> to an array, and we can keep adding to <code>k</code> so we find the number of recent calls/</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">RecentCounter</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>
}


<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Constructor</span>() <span style="color:#a6e22e">RecentCounter</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">RecentCounter</span>{<span style="color:#ae81ff">0</span>, []<span style="color:#66d9ef">int</span>{}}
}


<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">RecentCounter</span>) <span style="color:#a6e22e">Ping</span>(<span style="color:#a6e22e">t</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">t</span>)
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">k</span>] &lt; <span style="color:#a6e22e">t</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">3000</span> {
        <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">k</span><span style="color:#f92672">++</span>
    }
    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">k</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 61</title><link>https://nathannaveen.dev/posts/leetcode-61/</link><pubDate>Tue, 06 Jul 2021 18:25:10 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-61/</guid><description>61. Rotate List
The idea of this solution is pretty simple, and I will explain it using this image below:
Note: Before we get into what this picture represents, I want you to know that we already know the length of the linked list because the first loop in the code is for finding the length.
The image above is from the problem description and is showing the input and output as: Input: head = [1,2,3,4,5], k = 2 Output: [4,5,1,2,3]</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rotate-list/">61. Rotate List</a></p>
<p>The idea of this solution is pretty simple, and I will explain it using this image below:</p>
<p><img src="https://i.imgur.com/vbdeDXI.png" alt=""></p>
<p><em>Note: Before we get into what this picture represents, I want you to know that we already know the length of the linked list because the first loop in the code is for finding the length.</em></p>
<ul>
<li>The image above is from the problem description and is showing the input and output as:</li>
</ul>
<p><code>Input: head = [1,2,3,4,5], k = 2</code>
<code>Output: [4,5,1,2,3]</code></p>
<ul>
<li>The red part I have drawn over it signifies the <code>k</code> rotations. We are not going to call this the <code>k</code> rotations. Instead, we are going to call it <code>k % length</code> rotations. We do this because if we have a huge input of <code>k</code>, such as <code>k = 2000000000</code>, we don&rsquo;t want to keep rotating that many times, and since we keep on rotating through the same list, we can do <code>k % length</code>.</li>
<li>The green part I have drawn is what we are using in this solution. It is <code>length - (k % length)</code>. I think it is pretty self-explanatory.</li>
</ul>
<p>In this solution, we take the green part, add it to the end of the linked list and return the new <code>cur</code> (Not the <code>head</code> node).</p>
<p>If you don&rsquo;t understand, look at the following image, it should help clear things up:</p>
<p><img src="https://i.imgur.com/XOcTlVe.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">rotateRight</span>(<span style="color:#a6e22e">head</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span> {
    <span style="color:#a6e22e">length</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">end</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    <span style="color:#a6e22e">cur</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">length</span><span style="color:#f92672">++</span>
        <span style="color:#a6e22e">end</span> = <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span>
    }
    
    <span style="color:#a6e22e">length</span><span style="color:#f92672">++</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">length</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ListNode</span>{ <span style="color:#a6e22e">Val</span>: <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Val</span>, }
            <span style="color:#a6e22e">end</span> = <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span>
            <span style="color:#a6e22e">cur</span> = <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Next</span>
        }
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cur</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 504</title><link>https://nathannaveen.dev/posts/leetcode-504/</link><pubDate>Tue, 06 Jul 2021 18:25:01 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-504/</guid><description>504. Base 7
The main idea of both solutions is to convert the number to base seven. To convert a number to base 7 we can do something similar to converting to base 2, 3, 4 and so on. So if you know how to convert a number to another base you can just scroll down to the code and skip the example image.
Using Math, and then returning string(res):</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/base-7/">504. Base 7</a></p>
<p>The main idea of both solutions is to convert the number to base seven. To convert a number to base <code>7</code> we can do something similar to converting to <code>base 2, 3, 4</code> and so on. So if you know how to convert a number to another base you can just scroll down to the code and skip the example image.</p>
<p><img src="https://i.imgur.com/mEZHtJs.jpg" alt=""></p>
<p><strong>Using Math, and then returning <code>string(res)</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">convertToBase7</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">num</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">num</span> &lt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">num</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">*</span> <span style="color:#a6e22e">counter</span>
        <span style="color:#a6e22e">num</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">7</span>
        <span style="color:#a6e22e">counter</span> <span style="color:#f92672">*=</span> <span style="color:#ae81ff">10</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">res</span>)
}
</code></pre></div><p><strong>Using Strings for every action and returning <code>res</code>:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">convertToBase7</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">neg</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> &lt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">neg</span> = <span style="color:#66d9ef">true</span>
        <span style="color:#a6e22e">num</span> <span style="color:#f92672">*=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">num</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">num</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">res</span>
        <span style="color:#a6e22e">num</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">7</span>
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;0&#34;</span>
    }
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">neg</span> {
        <span style="color:#a6e22e">res</span> = <span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">res</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1669</title><link>https://nathannaveen.dev/posts/leetcode-1669/</link><pubDate>Tue, 06 Jul 2021 18:24:53 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1669/</guid><description>1669. Merge In Between Linked Lists
The idea of this solution can be explained with a simple image:
In image 1 we can see the input of list1 = [0, 1, 2, 3, 4, 5], list2 = [10, 11, 12], a = 3, and b = 4. We can iterate through list2 and store the beginning and end of the list. Then, we can iterate through list1 and find the pos of a - 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-in-between-linked-lists/">1669. Merge In Between Linked Lists</a></p>
<p>The idea of this solution can be explained with a simple image:</p>
<p><img src="https://i.imgur.com/vfhZz0X.jpg" alt=""></p>
<ul>
<li>In image 1 we can see the input of <code>list1 = [0, 1, 2, 3, 4, 5]</code>, <code>list2 = [10, 11, 12]</code>, <code>a = 3</code>, and <code>b = 4</code>.</li>
<li>We can iterate through <code>list2</code> and store the beginning and end of the list.</li>
<li>Then, we can iterate through <code>list1</code> and find the pos of <code>a - 1</code>.</li>
<li>Then, we can iterate through <code>list1</code> and find the pos of <code>b + 1</code>.</li>
<li>Then, the position of <code>a - 1</code>&rsquo;s next pointer should be the beginning of <code>list2</code>, and the end of <code>list2</code> should be pointing to the position of <code>b + 1</code> in <code>list1</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">mergeInBetween</span>(<span style="color:#a6e22e">list1</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>, <span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">list2</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">cur</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">list1</span>
    <span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">list1</span>
    <span style="color:#a6e22e">end</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">list2</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">end</span> = <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span>
    }
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">cur</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">start</span> = <span style="color:#a6e22e">cur</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">start</span>.<span style="color:#a6e22e">Next</span> = <span style="color:#a6e22e">list2</span>
            <span style="color:#a6e22e">end</span>.<span style="color:#a6e22e">Next</span> = <span style="color:#a6e22e">cur</span>
            <span style="color:#66d9ef">break</span>
        }
        <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        <span style="color:#a6e22e">cur</span> = <span style="color:#a6e22e">cur</span>.<span style="color:#a6e22e">Next</span>
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">list1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 55</title><link>https://nathannaveen.dev/posts/leetcode-55/</link><pubDate>Tue, 06 Jul 2021 18:24:47 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-55/</guid><description>55. Jump Game
The idea of this solution is pretty simple once you understand it.
The idea of this solution is:
We get the maximum index we can go up to by getting the maximum of i + nums[i] and max. Then, if i has surpassed the maximum index, we can return false. Otherwise return true. If you don&amp;rsquo;t understand why this works, look at the following example:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/jump-game/">55. Jump Game</a></p>
<p>The idea of this solution is pretty simple once you understand it.</p>
<p>The idea of this solution is:</p>
<ul>
<li>We get the maximum index we can go up to by getting the maximum of <code>i + nums[i]</code> and <code>max</code>.</li>
<li>Then, if <code>i</code> has surpassed the maximum index, we can return <code>false</code>.</li>
<li>Otherwise return <code>true</code>.</li>
</ul>
<p>If you don&rsquo;t understand why this works, look at the following example:</p>
<p>input: <code>[3, 2, 1, 0, 4]</code>
expected output: <code>false</code></p>
<p><img src="https://i.imgur.com/jgoKd6Q.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canJump</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#a6e22e">max</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">max</span> {
            <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 280</title><link>https://nathannaveen.dev/posts/leetcode-280/</link><pubDate>Tue, 06 Jul 2021 18:24:43 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-280/</guid><description>280. Wiggle Sort
The idea of this solution is pretty simple. We sort nums and then keep switching the numbers, so we get the array wiggled.
func wiggleSort(nums []int) { sort.Ints(nums) for i := 1; i &amp;lt; len(nums) - 1; i += 2 { nums[i], nums[i + 1] = nums[i + 1], nums[i] } }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/wiggle-sort/">280. Wiggle Sort</a></p>
<p>The idea of this solution is pretty simple. We sort <code>nums</code> and then keep switching the numbers, so we get the array wiggled.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">wiggleSort</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>)  {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span> {
        <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
    }
}
</code></pre></div>]]></content></item><item><title>Leetcode 170</title><link>https://nathannaveen.dev/posts/leetcode-170/</link><pubDate>Tue, 06 Jul 2021 18:24:38 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-170/</guid><description>170. Two Sum III - Data structure design
I have to admit that this is not the best solution to solve this problem, but I think it is the easiest to understand. For all we do is:
Append to this.arr to Add(number). And use a two-pointer approach for Find(value). type TwoSum struct { arr []int } /** Initialize your data structure here. */ func Constructor() TwoSum { return TwoSum{[]int{}} } /** Add the number to an internal data structure.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/two-sum-iii-data-structure-design/">170. Two Sum III - Data structure design</a></p>
<p>I have to admit that this is not the best solution to solve this problem, but I think it is the easiest to understand. For all we do is:</p>
<ul>
<li>Append to <code>this.arr</code> to <code>Add(number)</code>.</li>
<li>And use a two-pointer approach for <code>Find(value)</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">TwoSum</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>
}


<span style="color:#75715e">/** Initialize your data structure here. */</span>
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Constructor</span>() <span style="color:#a6e22e">TwoSum</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">TwoSum</span>{[]<span style="color:#66d9ef">int</span>{}}
}


<span style="color:#75715e">/** Add the number to an internal data structure.. */</span>
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TwoSum</span>) <span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">number</span> <span style="color:#66d9ef">int</span>)  {
    <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">number</span>)
}


<span style="color:#75715e">/** Find if there exists any pair of numbers which sum is equal to the value. */</span>
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">this</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TwoSum</span>) <span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">value</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>)
    <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">left</span> &lt; <span style="color:#a6e22e">right</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">left</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">right</span>] &lt; <span style="color:#a6e22e">value</span> {
            <span style="color:#a6e22e">left</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">left</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">this</span>.<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">right</span>] &gt; <span style="color:#a6e22e">value</span> {
            <span style="color:#a6e22e">right</span><span style="color:#f92672">--</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1828</title><link>https://nathannaveen.dev/posts/leetcode-1828/</link><pubDate>Wed, 16 Jun 2021 11:22:53 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1828/</guid><description>1828. Queries on Number of Points Inside a Circle
The idea of this solution is to:
loop through the queries and then a nested loop to go through points.
After that we check whether squared(point[0] - query[0]) + squared(point[1] - query[1]) &amp;lt;= squared(query[2]). This is bascily checking whether the distance between two points is smaller than or equal to the radius but edited. This image that I have drawn and wrote up explains this part: (Note: point[0] = x1, query[0] = x2, point[1] = y1, query[1] = y2, query[2] = radius)</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle/">1828. Queries on Number of Points Inside a Circle</a></p>
<p>The idea of this solution is to:</p>
<p>loop through the <code>queries</code> and then a nested loop to go through <code>points</code>.</p>
<p>After that we check whether <code>squared(point[0] - query[0]) + squared(point[1] - query[1]) &lt;= squared(query[2])</code>. This is bascily checking whether the distance between two points is smaller than or equal to the radius but edited. This image that I have drawn and wrote up explains this part: <em>(Note: <code>point[0] = x1, query[0] = x2, point[1] = y1, query[1] = y2, query[2] = radius</code>)</em></p>
<p><img src="https://i.imgur.com/ahOEhnk.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countPoints</span>(<span style="color:#a6e22e">points</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">queries</span> [][]<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">queries</span>))
	
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">queries</span> {
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">point</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">points</span> {
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">squared</span>(<span style="color:#a6e22e">point</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">query</span>[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">squared</span>(<span style="color:#a6e22e">point</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">query</span>[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">squared</span>(<span style="color:#a6e22e">query</span>[<span style="color:#ae81ff">2</span>]) {
				<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">squared</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1837</title><link>https://nathannaveen.dev/posts/leetcode-1837/</link><pubDate>Wed, 16 Jun 2021 11:22:46 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1837/</guid><description>1837. Sum of Digits in Base K
Before I explain both solution I just want to say that for me the first solution is not as readable as the second solution but easyer to understand (Note: I wrote the first solution before the second solution so that might be why).
The first solution basicly uses the fact that n only goes up to 100 and that k has a range of 2 to 10</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-digits-in-base-k/">1837. Sum of Digits in Base K</a></p>
<p>Before I explain both solution I just want to say that <em>for me</em> the first solution is not as readable as the second solution but easyer to understand (Note: I wrote the first solution before the second solution so that might be why).</p>
<p>The first solution basicly uses the fact that <code>n</code> only goes up to <code>100</code> and that <code>k</code> has a range of <code>2</code> to <code>10</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sumBase</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">7</span>)
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">product</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">7</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">arr</span>[len(<span style="color:#a6e22e">arr</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">product</span>
		<span style="color:#a6e22e">product</span> <span style="color:#f92672">*=</span> <span style="color:#a6e22e">k</span>
	}
	
	<span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> &gt; <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">counter</span>]
		<span style="color:#a6e22e">n</span> = <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">counter</span>]
		<span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sumBase</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> &gt; <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">k</span>
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">/=</span> <span style="color:#a6e22e">k</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1854</title><link>https://nathannaveen.dev/posts/leetcode-1854/</link><pubDate>Wed, 16 Jun 2021 11:22:38 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1854/</guid><description>1854. Maximum Population Year
I first did this solution using an O(n^2) approach but then tried to think about how to do it better. I couldn&amp;rsquo;t, so I looked at the discussion and saw votrubac solution. The code below is pretty similar, except I make an array of size 101 instead of 2051 because we only need the years from 2050 to 1950.
func maximumPopulation(logs [][]int) int { populationPerYear := make([]int, 101) res := 0 for _, log := range logs { populationPerYear[log[0] - 1950]++ populationPerYear[log[1] - 1950]-- } for i := 1; i &amp;lt; 101; i++ { populationPerYear[i] += populationPerYear[i - 1] if populationPerYear[i] &amp;gt; populationPerYear[res] { res = i } } return res + 1950 }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-population-year/">1854. Maximum Population Year</a></p>
<p>I first did this solution using an <code>O(n^2)</code> approach but then tried to think about how to do it better. I couldn&rsquo;t, so I looked at the discussion and saw <a href="https://leetcode.com/problems/maximum-population-year/discuss/1198892/O(n)-Line-Sweep">votrubac solution</a>. The code below is pretty similar, except I make an array of size <code>101</code> instead of <code>2051</code> because we only need the years from <code>2050</code> to <code>1950</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maximumPopulation</span>(<span style="color:#a6e22e">logs</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">populationPerYear</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">101</span>)
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">log</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">logs</span> {
		<span style="color:#a6e22e">populationPerYear</span>[<span style="color:#a6e22e">log</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1950</span>]<span style="color:#f92672">++</span>
		<span style="color:#a6e22e">populationPerYear</span>[<span style="color:#a6e22e">log</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1950</span>]<span style="color:#f92672">--</span>
	}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">101</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">populationPerYear</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+=</span> <span style="color:#a6e22e">populationPerYear</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">populationPerYear</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">populationPerYear</span>[<span style="color:#a6e22e">res</span>] {
			<span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">i</span>
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1950</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1249</title><link>https://nathannaveen.dev/posts/leetcode-1249/</link><pubDate>Wed, 16 Jun 2021 11:22:30 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1249/</guid><description>1249. Minimum Remove to Make Valid Parentheses
The idea of this solution is:
Loop through every character in s, and: If the current character is a '(' add the index of the '(' to a stack If the current character is a ')': If the stack is not empty, we can pop off the stack If the stack is empty, remove the character from the string After looping through every character, if the stack is not empty, we remove the characters at the values in the stack.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/">1249. Minimum Remove to Make Valid Parentheses</a></p>
<p>The idea of this solution is:</p>
<ul>
<li>Loop through every character in <code>s</code>, and:</li>
<li>If the current character is a <code>'('</code> add the index of the <code>'('</code> to a stack</li>
<li>If the current character is a <code>')'</code>:
<ul>
<li>If the stack is not empty, we can pop off the stack</li>
<li>If the stack is empty, remove the character from the string</li>
</ul>
</li>
<li>After looping through every character, if the stack is not empty, we remove the characters at the values in the stack. We do this because the positions in the stack are there for the extra <code>'('</code>.</li>
<li>Then we can return <code>s</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minRemoveToMakeValid</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;(&#39;</span> {
			<span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">i</span>)
		} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;)&#39;</span> {
			<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
				<span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
			} <span style="color:#66d9ef">else</span> {
				<span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[:<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
				<span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>
			}
		}
	}

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
		<span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
		<span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[:<span style="color:#a6e22e">pop</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">pop</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 48</title><link>https://nathannaveen.dev/posts/leetcode-48/</link><pubDate>Wed, 16 Jun 2021 11:22:22 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-48/</guid><description>48. Rotate Image
The idea of this solution is first to flip the matrix, so it is upside down, and then transpose the matrix. If you don&amp;rsquo;t understand, look at the following images:
We flip the matrix by fliping the top and bottom len(matrix) / 2 rows, like in this image:
And transposing the matrix is basically making matrix[i][j] = matrix[j][i], and the flips should only flip from yellow to the blue, or blue to yellow in the following image:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rotate-image/">48. Rotate Image</a></p>
<p>The idea of this solution is first to flip the matrix, so it is upside down, and then transpose the matrix. If you don&rsquo;t understand, look at the following images:</p>
<p><img src="https://i.imgur.com/9ZfliIg.jpg" alt=""></p>
<p>We flip the matrix by fliping the top and bottom <code>len(matrix) / 2</code> rows, like in this image:</p>
<p><img src="https://i.imgur.com/VWu6zok.jpg" alt=""></p>
<p>And transposing the matrix is basically making <code>matrix[i][j] = matrix[j][i]</code>, and the flips should only flip from yellow to the blue, or blue to yellow in the following image:</p>
<p><img src="https://i.imgur.com/NLmsIsv.jpg" alt=""></p>
<p>So, we only need to loop from the yellow part and flip from the yellow to the blue.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">rotate</span>(<span style="color:#a6e22e">matrix</span> [][]<span style="color:#66d9ef">int</span>) {
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">matrix</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">newI</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span>len(<span style="color:#a6e22e">matrix</span>)) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">matrix</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">newI</span>][<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">newI</span>][<span style="color:#a6e22e">j</span>]
		}
	}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">matrix</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">matrix</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">j</span>][<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">j</span>][<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">matrix</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]
		}
	}
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}

</code></pre></div>]]></content></item><item><title>Leetcode 484</title><link>https://nathannaveen.dev/posts/leetcode-484/</link><pubDate>Wed, 16 Jun 2021 11:22:18 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-484/</guid><description>484. Find Permutation
The idea of this solution is to:
We get the first n + 1 numbers in order [1, 2, 3, ..., n + 1]. Then we reverse the numbers whenever we find a 'D', and we reverse a whole set of numbers when we find multiple 'D'&amp;rsquo;s together. Then we return the array. You might be wondering why we reverse sets of 'D'&amp;rsquo;s instead of just reversing every 'D', it can be shown using an image:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-permutation/">484. Find Permutation</a></p>
<p>The idea of this solution is to:</p>
<ul>
<li>We get the first <code>n + 1</code> numbers in order <code>[1, 2, 3, ..., n + 1]</code>.</li>
<li>Then we reverse the numbers whenever we find a <code>'D'</code>, and we reverse a whole set of numbers when we find multiple <code>'D'</code>&rsquo;s together.</li>
<li>Then we return the array.</li>
</ul>
<p>You might be wondering why we reverse sets of <code>'D'</code>&rsquo;s instead of just reversing every <code>'D'</code>, it can be shown using an image:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findPermutation</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> { <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">i</span> }

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;D&#39;</span> {
			<span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span>
			<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">temp</span> &lt; len(<span style="color:#a6e22e">s</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">temp</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;D&#39;</span> { <span style="color:#a6e22e">temp</span><span style="color:#f92672">++</span> }
			<span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>[: <span style="color:#a6e22e">i</span>], append(<span style="color:#a6e22e">reverseArray</span>(<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span> : <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]), <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">temp</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> :]<span style="color:#f92672">...</span>)<span style="color:#f92672">...</span>)
			<span style="color:#a6e22e">i</span> = <span style="color:#a6e22e">temp</span>
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">reverseArray</span>(<span style="color:#a6e22e">res</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">left</span> &lt; <span style="color:#a6e22e">right</span> {
		<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">left</span>], <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">right</span>] = <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">right</span>], <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">left</span>]
		<span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> = <span style="color:#a6e22e">left</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1874</title><link>https://nathannaveen.dev/posts/leetcode-1874/</link><pubDate>Wed, 16 Jun 2021 11:22:12 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1874/</guid><description>1874. Minimize Product Sum of Two Arrays
The idea of both solutions is pretty much the same: The smallest number multiplied by the greatest number always makes the smallest sum. If you don&amp;rsquo;t understand, look at the following image:
In the image above, the top array is sorted in non-decreasing order, and the bottom array is sorted in non-increasing order. So when we multiply nums1[i] and nums2[i] together, we get the minimum product, and when we sum the products up, we get the minimum sum.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimize-product-sum-of-two-arrays/">1874. Minimize Product Sum of Two Arrays</a></p>
<p>The idea of both solutions is pretty much the same: The smallest number multiplied by the greatest number always makes the smallest sum. If you don&rsquo;t understand, look at the following image:</p>
<p><img src="https://i.imgur.com/WKnSS11.jpg" alt=""></p>
<p>In the image above, the top array is sorted in non-decreasing order, and the bottom array is sorted in non-increasing order. So when we multiply <code>nums1[i]</code> and <code>nums2[i]</code> together, we get the minimum product, and when we sum the products up, we get the minimum sum.</p>
<p>In the image, we multiply <code>9 * 1</code>, and <code>4 * 1</code>, which both make the minimum we can get, because if we multiplied <code>9</code> by any other number, we would get a greater sum:</p>
<ul>
<li><code>9 * 2 = 18</code></li>
<li><code>9 * 3 = 27</code></li>
<li><code>9 * 4 = 36</code></li>
</ul>
<p>Which are all greater than <code>9 * 1 = 9</code>. We can also do the same for the maximum of the top array <code>4</code>. <code>4 * 1 = 4</code>, and if we multiply it any other number, the product will be greater than <code>4</code>:</p>
<ul>
<li><code>4 * 2 = 8</code></li>
<li><code>4 * 7 = 28</code></li>
<li><code>4 * 9 = 36</code></li>
</ul>
<p>All of which are greater than <code>4</code>. If we want, we can continue with the rest of the numbers, <code>2, 3, 7</code>, and the <code>2</code>. But I will leave that to you.</p>
<p>If we get the minimum products, we can add them up and get the minimum sum.</p>
<p><strong>The Code:</strong> <em>(In this code, we don&rsquo;t reverse the second array, so we have to get the product of <code>nums1[i]</code> and<code>nums2[len(nums2) - i - 1]</code>)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minProductSum</span>(<span style="color:#a6e22e">nums1</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">nums2</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums1</span>)
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums2</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums1</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">nums1</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">*</span> <span style="color:#a6e22e">nums2</span>[len(<span style="color:#a6e22e">nums2</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span>]
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>The Second Code:</strong> <em>(In this solution, we reverse the array while sorting it, so we have to get the product of <code>nums1[i]</code> and <code>nums2[i]</code>, somehow I feel this is simpler)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minProductSum</span>(<span style="color:#a6e22e">nums1</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">nums2</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums1</span>)
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Sort</span>(<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Reverse</span>(<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">IntSlice</span>(<span style="color:#a6e22e">nums2</span>)))

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums1</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">nums1</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">*</span> <span style="color:#a6e22e">nums2</span>[<span style="color:#a6e22e">i</span>]
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1403</title><link>https://nathannaveen.dev/posts/leetcode-1403/</link><pubDate>Wed, 16 Jun 2021 11:22:07 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1403/</guid><description>1403. Minimum Subsequence in Non-Increasing Order
The idea of this solution is pretty simple, we first sort nums in non-increasing order and then find the sum of nums. After that, we can loop through nums and subtract the greatest numbers in nums from the total sum and add the greatest numbers in nums to a different sum. And then, we append the num to res (the resulting function). If the other sum is greater than the total sum, we can break out of the loop and return res.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order/">1403. Minimum Subsequence in Non-Increasing Order</a></p>
<p>The idea of this solution is pretty simple, we first sort <code>nums</code> in non-increasing order and then find the sum of <code>nums</code>. After that, we can loop through <code>nums</code> and subtract the greatest numbers in <code>nums</code> from the total sum and add the greatest numbers in <code>nums</code> to a different sum. And then, we append the <code>num</code> to <code>res</code> (the resulting function). If the other sum is greater than the total sum, we can break out of the loop and return <code>res</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minSubsequence</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
	<span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">resSum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">nums</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">j</span>] })
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> { <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">num</span> }
	
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
		<span style="color:#a6e22e">sum</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">num</span>
		<span style="color:#a6e22e">resSum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">num</span>
		<span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">num</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resSum</span> &gt; <span style="color:#a6e22e">sum</span> { <span style="color:#66d9ef">break</span> }
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 944</title><link>https://nathannaveen.dev/posts/leetcode-944/</link><pubDate>Wed, 16 Jun 2021 11:21:55 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-944/</guid><description>944. Delete Columns to Make Sorted
This solution loops through every column, and then if the previous letter in the column is greater than the current letter, we know that this column can be removed.
func minDeletionSize(strs []string) int { res := 0 for i := 0; i &amp;lt; len(strs[0]); i++ { for j := 1; j &amp;lt; len(strs); j++ { if strs[j][i] &amp;lt; strs[j-1][i] { res++ break } } } return res }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/delete-columns-to-make-sorted/">944. Delete Columns to Make Sorted</a></p>
<p>This solution loops through every column, and then if the previous letter in the column is greater than the current letter, we know that this column can be removed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minDeletionSize</span>(<span style="color:#a6e22e">strs</span> []<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">strs</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">strs</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">strs</span>[<span style="color:#a6e22e">j</span>][<span style="color:#a6e22e">i</span>] &lt; <span style="color:#a6e22e">strs</span>[<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">i</span>] {
				<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
				<span style="color:#66d9ef">break</span>
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1689</title><link>https://nathannaveen.dev/posts/leetcode-1689/</link><pubDate>Wed, 16 Jun 2021 11:21:37 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1689/</guid><description>1689. Partitioning Into Minimum Number Of Deci-Binary Numbers
The idea of this solution is that the max digit in n will be the result. But you might be wondering why this works.
This works because the max digit can only be made by adding the max digit number of 1&amp;rsquo;s. If you don&amp;rsquo;t understand, look at the following image: The first image is an example, and the second example is for anyone who doesn&amp;rsquo;t understand the first example.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/">1689. Partitioning Into Minimum Number Of Deci-Binary Numbers</a></p>
<p>The idea of this solution is that the max digit in <code>n</code> will be the result. But you might be wondering why this works.</p>
<p>This works because the max digit can only be made by adding the max digit number of <code>1</code>&rsquo;s. If you don&rsquo;t understand, look at the following image: <img src="https://i.imgur.com/yqqbNtu.jpg" alt=""> The first image is an example, and the second example is for anyone who doesn&rsquo;t understand the first example.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minPartitions</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#39;0&#39;</span>

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">n</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#a6e22e">max</span> {
			<span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">i</span>
		}
	}
	
	<span style="color:#66d9ef">return</span> int(<span style="color:#a6e22e">max</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 1605</title><link>https://nathannaveen.dev/posts/leetcode-1605/</link><pubDate>Wed, 16 Jun 2021 11:21:28 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1605/</guid><description>1605. Find Valid Matrix Given Row and Column Sums
The idea of this solution is pretty simple:
We loop through len(rowSum), and len(colSum). We find the minimum for colSum[j], and rowSum[i], making the resulting matrix have the minimum. After that, we subtract the minimum from both colSum[j], and rowSum[i].
Here is an image example to help with the explanation:
func restoreMatrix(rowSum []int, colSum []int) [][]int { res := make([][]int, len(rowSum)) for i := 0; i &amp;lt; len(rowSum); i++ { arr := make([]int, len(colSum)) for j := 0; j &amp;lt; len(colSum); j++ { arr[j] = colSum[j] if colSum[j] &amp;gt; rowSum[i] { arr[j] = rowSum[i] } rowSum[i], colSum[j] = rowSum[i] - arr[j], colSum[j] - arr[j] } res[i] = arr } return res }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/">1605. Find Valid Matrix Given Row and Column Sums</a></p>
<p>The idea of this solution is pretty simple:</p>
<p>We loop through <code>len(rowSum)</code>, and <code>len(colSum)</code>. We find the minimum for <code>colSum[j]</code>, and <code>rowSum[i]</code>, making the resulting matrix have the minimum. After that, we subtract the minimum from both <code>colSum[j]</code>, and <code>rowSum[i]</code>.</p>
<p>Here is an image example to help with the explanation:</p>
<p><img src="https://i.imgur.com/MJQGppC.jpg" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">restoreMatrix</span>(<span style="color:#a6e22e">rowSum</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">colSum</span> []<span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([][]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">rowSum</span>))

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">rowSum</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">colSum</span>))

		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">colSum</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">colSum</span>[<span style="color:#a6e22e">j</span>]
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">colSum</span>[<span style="color:#a6e22e">j</span>] &gt; <span style="color:#a6e22e">rowSum</span>[<span style="color:#a6e22e">i</span>] {
				<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">rowSum</span>[<span style="color:#a6e22e">i</span>]
			}
			<span style="color:#a6e22e">rowSum</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">colSum</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">rowSum</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">colSum</span>[<span style="color:#a6e22e">j</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">j</span>]
		}

		<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">arr</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 406</title><link>https://nathannaveen.dev/posts/leetcode-406/</link><pubDate>Wed, 16 Jun 2021 11:21:17 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-406/</guid><description>406. Queue Reconstruction by Height
The idea of this solution is to:
sort people&amp;rsquo;s height in non-decreasing order, and when two people have the same height, we sort their kth place in non-increasing order.
And then we add the following person to the resulting array in the kth vacant position (zero-indexed), like in this image: As you can see in row 1, k = 4, so we add the person of height 4 into res at position 4.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/queue-reconstruction-by-height/">406. Queue Reconstruction by Height</a></p>
<p><strong>The idea of this solution is to:</strong></p>
<ul>
<li>
<p>sort <code>people</code>&rsquo;s height in non-decreasing order, and when two people have the same height, we sort their <code>k</code>th place in non-increasing order.</p>
</li>
<li>
<p>And then we add the following person to the resulting array in the <code>kth</code> vacant position (zero-indexed), like in this image: <img src="https://i.imgur.com/Yfh5FzY.jpg" alt=""></p>
<ul>
<li>As you can see in row <code>1</code>, <code>k = 4</code>, so we add the person of height <code>4</code> into res at position <code>4</code>.</li>
<li>Then we can see that in row <code>2</code> <code>k = 2</code>, so we add the second person to position <code>2</code>.</li>
<li>Then in the 3ed row, we can see that <code>k = 0</code>, so we add it to position <code>0</code></li>
<li>In the <code>4</code>th row, we can see that person <code>4</code> has <code>k = 1</code>, but is in the <code>3</code>ed position. This is because in the empty spaces left, we had <code>empties = [1, 3, 5]</code>, and <code>empties[1] = 3</code>, adding person <code>4</code> to the <code>3</code>ed position.</li>
<li>In the <code>5</code>th row, we can see that <code>k = 1</code>, but the person is in the <code>5</code>th position. Just like in the <code>4</code>th row, we only have a limited amount of empty places, and <code>5</code>th is the <code>1</code>st one we find (zero-indexed).</li>
<li>In the sixth row, we can see that the last space available is at position <code>1</code>, but since it is the only empty and <code>k = 0</code>, we can add it to the position.</li>
</ul>
</li>
</ul>
<p><strong>Quick walkthrough on how this code works:</strong></p>
<ul>
<li>We sort <code>people</code></li>
<li>Then we make an array called empties to store all the empty values</li>
<li>We fill up <code>empties</code> with the indexes of all the positions</li>
<li>Then we loop through all the people that we have sorted and:
<ul>
<li><code>res[empties[person[1]]] = person</code>, which is basically <code>res[the kth empty position] = person</code></li>
<li>Then remove that position from empty because it is now filled.</li>
</ul>
</li>
<li>Then return res.</li>
</ul>
<p>I am pretty sure that (correct me if I am wrong) the time complexity is: <code>O(nlogn + 2n)</code> because <code>O(nlogn)</code> is the time complexity of sort, and <code>2n</code> is for the other two loops.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">reconstructQueue</span>(<span style="color:#a6e22e">people</span> [][]<span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">people</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">people</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">people</span>[<span style="color:#a6e22e">j</span>][<span style="color:#ae81ff">0</span>] {
			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">people</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">people</span>[<span style="color:#a6e22e">j</span>][<span style="color:#ae81ff">1</span>]
		}
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">people</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">people</span>[<span style="color:#a6e22e">j</span>][<span style="color:#ae81ff">0</span>]
	})

	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([][]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">people</span>))
	<span style="color:#a6e22e">empties</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">people</span>))

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">people</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">empties</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">i</span>
	}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">person</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">people</span> {
		<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">empties</span>[<span style="color:#a6e22e">person</span>[<span style="color:#ae81ff">1</span>]]] = <span style="color:#a6e22e">person</span>
		<span style="color:#a6e22e">empties</span> = append(<span style="color:#a6e22e">empties</span>[:<span style="color:#a6e22e">person</span>[<span style="color:#ae81ff">1</span>]], <span style="color:#a6e22e">empties</span>[<span style="color:#a6e22e">person</span>[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]<span style="color:#f92672">...</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1338</title><link>https://nathannaveen.dev/posts/leetcode-1338/</link><pubDate>Wed, 16 Jun 2021 11:21:07 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1338/</guid><description>1338. Reduce Array Size to The Half
The idea of the first solution is to:
Find the frequency of all values in arr using a map called m. Then add all the values of m to an array called h. Then reverse sort h. Then loop through h, and subtract the maximum frequencies to be removing the minimum number of integers. While subtracting check whether n &amp;lt;= len(arr) / 2 if so return i + 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reduce-array-size-to-the-half/">1338. Reduce Array Size to The Half</a></p>
<p>The idea of the first solution is to:</p>
<ul>
<li>Find the frequency of all values in <code>arr</code> using a map called <code>m</code>.</li>
<li>Then add all the values of <code>m</code> to an array called <code>h</code>.</li>
<li>Then reverse sort <code>h</code>.</li>
<li>Then loop through <code>h</code>, and subtract the maximum frequencies to be removing the minimum number of integers. While subtracting check whether <code>n &lt;= len(arr) / 2</code> if so return <code>i + 1</code>.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minSetSize</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
	<span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">arr</span>)
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
		<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
	}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span> {
		<span style="color:#a6e22e">h</span> = append(<span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">i</span>)
	}

	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">h</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>]
	})

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">h</span> {
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">i2</span>
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> len(<span style="color:#a6e22e">arr</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span> {
			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
		}
	}
	<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">arr</span>)
}
</code></pre></div><p>The idea of the second solution is pretty similar to the first solution, but we remove the map, so space becomes <code>100%</code>.</p>
<p><strong>The Second Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minSetSize</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">100001</span>)
	<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">arr</span>)
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
		<span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
	}

	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Slice</span>(<span style="color:#a6e22e">h</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">j</span>]
	})
	
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">h</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
			<span style="color:#a6e22e">n</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">i2</span>
			<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">&lt;=</span> len(<span style="color:#a6e22e">arr</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
			}
		}
	}
	<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">arr</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 1663</title><link>https://nathannaveen.dev/posts/leetcode-1663/</link><pubDate>Wed, 16 Jun 2021 11:21:00 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1663/</guid><description>1663. Smallest String With A Given Numeric Value
This solution aims to make all the characters equal 'a' to start with, and then subtract n from k because we have added n amount of 'a'&amp;rsquo;s. After that, we can keep removing 'z'&amp;rsquo;s until k &amp;gt; 25, then we can remove the letter with an ASCII of k + 'a'.
func getSmallestString(n int, k int) string { k -= n res := make([]string, n) for i := 0; i &amp;lt; n; i++ { res[i] = &amp;#34;a&amp;#34; } for i := len(res) - 1; i &amp;gt;= 0; i-- { if k &amp;lt;= 25 { res[i] = string(k + &amp;#39;a&amp;#39;) break } else { res[i] = &amp;#34;z&amp;#34; k -= 25 } } return strings.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/">1663. Smallest String With A Given Numeric Value</a></p>
<p>This solution aims to make all the characters equal <code>'a'</code> to start with, and then subtract <code>n</code> from <code>k</code> because we have added <code>n</code> amount of <code>'a'</code>&rsquo;s. After that, we can keep removing <code>'z'</code>&rsquo;s until <code>k &gt; 25</code>, then we can remove the letter with an ASCII of <code>k + 'a'</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getSmallestString</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">k</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">n</span>
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">n</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#e6db74">&#34;a&#34;</span>
	}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">25</span> {
			<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = string(<span style="color:#a6e22e">k</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;a&#39;</span>)
			<span style="color:#66d9ef">break</span>
		} <span style="color:#66d9ef">else</span> {
			<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#e6db74">&#34;z&#34;</span>
			<span style="color:#a6e22e">k</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">25</span>
		}
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">res</span>, <span style="color:#e6db74">&#34;&#34;</span>)
}
</code></pre></div><p><strong>We can edit this solution by removing the first loop and merging it into the second:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getSmallestString</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">k</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">n</span>
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">n</span>)
    
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
			<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#e6db74">&#34;a&#34;</span>
		} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">25</span> {
			<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = string(<span style="color:#a6e22e">k</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;a&#39;</span>)
			<span style="color:#a6e22e">k</span> = <span style="color:#ae81ff">0</span>
		} <span style="color:#66d9ef">else</span> {
			<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#e6db74">&#34;z&#34;</span>
			<span style="color:#a6e22e">k</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">25</span>
		}
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">res</span>, <span style="color:#e6db74">&#34;&#34;</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 1154</title><link>https://nathannaveen.dev/posts/leetcode-1154/</link><pubDate>Wed, 16 Jun 2021 11:20:54 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1154/</guid><description>Note: I know that the second solution is pretty un-orthidoxed because we would have to change a lot of stuff if the input changed.
1154. Day of the Year
How the first solution works:
The first solution is pretty simple:
We find the year month and day (Note: We call the day res because the day is only used for adding to the result) We also have an array of the number of days per month Then we check whether it is a leep year, if so add 1 day to the result.</description><content type="html"><![CDATA[<p><em>Note: I know that the second solution is pretty un-orthidoxed because we would have to change a lot of stuff if the input changed.</em></p>
<p><a href="https://leetcode.com/problems/day-of-the-year/">1154. Day of the Year</a></p>
<p><strong>How the first solution works:</strong></p>
<p>The first solution is pretty simple:</p>
<ul>
<li>We find the year month and day <em>(Note: We call the day <code>res</code> because the day is only used for adding to the result)</em></li>
<li>We also have an array of the number of days per month</li>
<li>Then we check whether it is a leep year, if so add <code>1</code> day to the result.</li>
<li>Then we loop through every month that has passed (From Jan to <code>month</code>) and add their days to <code>res</code>.</li>
<li>Then we can return <code>res</code>.</li>
</ul>
<p><strong>The First solution</strong> <em>O(n), O(12)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">dayOfYear</span>(<span style="color:#a6e22e">date</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">days</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">31</span>} 
	
	<span style="color:#a6e22e">year</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">date</span>[: <span style="color:#ae81ff">4</span>])
	<span style="color:#a6e22e">month</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">date</span>[<span style="color:#ae81ff">5</span> : <span style="color:#ae81ff">7</span>])
	<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">date</span>[<span style="color:#ae81ff">8</span> :])
	
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">month</span> &gt; <span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">year</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">year</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">year</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">400</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
		<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
	}
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">month</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> &gt; <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">days</span>[<span style="color:#a6e22e">month</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>]
		<span style="color:#a6e22e">month</span><span style="color:#f92672">--</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>How the second solution works:</strong></p>
<ul>
<li>In this solution we also find the <code>year</code>, <code>month</code>, and <code>res</code> <em>(<code>res ==</code> current day of the month)</em>.</li>
<li>Then we check whether it is a leep year, if so add <code>1</code> day to the result.</li>
<li>Then we do <code>res += 30 * (month - 1)</code>. We do this because all the days in every month (Not including leap years for we have handeled leep years before we do <code>res += 30 * (month - 1)</code>) are either <code>30, 31</code>, or <code>28</code>, so for all months that have <code>31</code> days we can add <code>1</code> to <code>res</code>, and for Feburary we can subtract <code>2</code> from <code>res</code>.</li>
<li>Next we have <code>if month &gt; 2 { res -= 2 }</code> we know that feburary has passed so we can subtract <code>2</code> from <code>res</code>.</li>
<li>Now you might be confused by: <code>if month &lt; 9 { res += month / 2 } else { res += (month - 7) / 2 + 1 }</code> because when adding <code>1</code> per month you would think that we would do <code>month</code></li>
</ul>
<p><strong>The second solution</strong> <em>O(1), O(1)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">dayOfYear</span>(<span style="color:#a6e22e">date</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">year</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">date</span>[: <span style="color:#ae81ff">4</span>])
	<span style="color:#a6e22e">month</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">date</span>[<span style="color:#ae81ff">5</span> : <span style="color:#ae81ff">7</span>])
	<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">date</span>[<span style="color:#ae81ff">8</span> :])
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">month</span> &gt; <span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">year</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">year</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">year</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">400</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
		<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
	}
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">30</span> <span style="color:#f92672">*</span> (<span style="color:#a6e22e">month</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">month</span> &gt; <span style="color:#ae81ff">2</span> { 
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span> 
	}
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">month</span> &lt; <span style="color:#ae81ff">9</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">month</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">month</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1880</title><link>https://nathannaveen.dev/posts/leetcode-1880/</link><pubDate>Wed, 16 Jun 2021 11:19:46 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1880/</guid><description>1880. Check if Word Equals Summation of Two Words
The idea of the first solution is:
We loop through every word and add the string(letter - '1') (basically add the string of the letter made into a number). Then we make that string into a number and check whether temp + temp2 == tempRes. The First Code:
func isSumEqual(firstWord string, secondWord string, targetWord string) bool { first, second, res := &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34; for _, letter := range firstWord { first += string(letter - &amp;#39;0&amp;#39;) } for _, letter := range secondWord { second += string(letter - &amp;#39;0&amp;#39;) } for _, letter := range targetWord { res += string(letter - &amp;#39;0&amp;#39;) } temp, _ := strconv.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-word-equals-summation-of-two-words/">1880. Check if Word Equals Summation of Two Words</a></p>
<p><strong>The idea of the first solution is:</strong></p>
<ul>
<li>We loop through every word and add the <code>string(letter - '1')</code> (basically add the string of the letter made into a number).</li>
<li>Then we make that string into a number and check whether <code>temp + temp2 == tempRes</code>.</li>
</ul>
<p><strong>The First Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isSumEqual</span>(<span style="color:#a6e22e">firstWord</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">secondWord</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">targetWord</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">first</span>, <span style="color:#a6e22e">second</span>, <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">firstWord</span> { <span style="color:#a6e22e">first</span> <span style="color:#f92672">+=</span> string(<span style="color:#a6e22e">letter</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>) }
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">secondWord</span> { <span style="color:#a6e22e">second</span> <span style="color:#f92672">+=</span> string(<span style="color:#a6e22e">letter</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>) }
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">targetWord</span> { <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> string(<span style="color:#a6e22e">letter</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>) }
	
	<span style="color:#a6e22e">temp</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">first</span>)
	<span style="color:#a6e22e">temp2</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">second</span>)
	<span style="color:#a6e22e">tempRes</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">res</span>)

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">temp2</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">tempRes</span>
}
</code></pre></div><p><strong>The idea of the second solution is:</strong></p>
<ul>
<li>Just like in the first solution, we loop through each word, but this time we keep of making <code>sum, sum2, or res</code> equal <code>int(letter - 'a') + sum * 10</code> (In the previous we say <code>sum * 10</code>, but <code>sum</code> can be substituted for <code>sum2, or res</code>). The fundamental idea of this is getting each number and then adding it to the <code>sum * 10</code>. This is basically:</li>
</ul>
<pre tabindex="0"><code>sum += int(letter - 'a')
sum *= 10
</code></pre><p><strong>The Second Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isSumEqual</span>(<span style="color:#a6e22e">firstWord</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">secondWord</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">targetWord</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">sum2</span>, <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">firstWord</span> { <span style="color:#a6e22e">sum</span> = int(<span style="color:#a6e22e">letter</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> }
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">secondWord</span> { <span style="color:#a6e22e">sum2</span> = int(<span style="color:#a6e22e">letter</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">sum2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> }
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">targetWord</span> { <span style="color:#a6e22e">res</span> = int(<span style="color:#a6e22e">letter</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> }

	<span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">sum</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">sum2</span>) <span style="color:#f92672">==</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1318</title><link>https://nathannaveen.dev/posts/leetcode-1318/</link><pubDate>Wed, 16 Jun 2021 11:19:38 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1318/</guid><description>1318. Minimum Flips to Make a OR b Equal to c
The idea of this solution is pretty simple because getting a || b == c means that:
If the last bit of c is 1: a can be either 1 if b is 1 or b is 0, or 0 if b is 1 Else if the last bit of c is 0: a and b have to be 0 because 0 || 0 == 0 is the only case which == 0.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/">1318. Minimum Flips to Make a OR b Equal to c</a></p>
<p>The idea of this solution is pretty simple because getting <code>a || b == c</code> means that:</p>
<ul>
<li>If the last bit of <code>c</code> is <code>1</code>:
<ul>
<li><code>a</code> can be either <code>1</code> if <code>b</code> is <code>1</code> or <code>b</code> is <code>0</code>, or <code>0</code> if <code>b</code> is <code>1</code></li>
</ul>
</li>
<li>Else if the last bit of <code>c</code> is <code>0</code>:
<ul>
<li><code>a</code> and <code>b</code> have to be <code>0</code> because <code>0 || 0 == 0</code> is the only case which <code>== 0</code>.</li>
</ul>
</li>
</ul>
<p>Here is an example of what we do in the code:</p>
<p><code>input: a = 19, b = 6, and c = 27</code></p>
<p>If we show the numbers in a binary representation we get:</p>
<pre tabindex="0"><code>a = 1 0 0 1 1
b = 0 0 1 1 0
-------------
c = 1 1 0 1 1
</code></pre><p>And if we do the first bit of <code>a</code> or the first bit of <code>b</code>, we get <code>1 || 0 = 1</code>, which we want to get for the first bit of <code>c</code>.</p>
<p>Then if we do the second bit of <code>a</code> or the second bit of <code>b</code>, we get <code>1 || 1 = 1</code>, which is also what we want for <code>c</code>.</p>
<p>After that, if we do the third bit of <code>a</code> or the third bit of <code>b</code> we get <code>0 || 1 = 1</code>. The problem with this is the third bit of <code>c</code> is <code>0</code>, and <code>0 || 1 != 0</code>, we can change the third bit of <code>b</code> to <code>0</code>, so we get <code>0 || 0 = 0</code>, which is what we want.</p>
<p>Then in the fourth bit of <code>a</code> or the fourth bit of <code>b</code> we get <code>0 || 0 = 0</code>, but we want it to be equal to <code>1</code> because the fourth bit of <code>c</code> is <code>1</code>. So what we have to do is make either the fourth bit of <code>a</code> or <code>b</code> equal to <code>1</code>, so <code>0 || 1 = 1</code> or <code>1 || 0 = 1</code>.</p>
<p>And the final bit of <code>a</code> or the fifth bit of <code>b</code> is <code>1 || 0 = 1</code>, which we want to get for the final bit of <code>c</code> is <code>1</code>.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minFlips</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">b</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">c</span> &gt; <span style="color:#ae81ff">0</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
				<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> { 
				<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span> 
			}
		} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
			<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
		}
		
		<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span> = <span style="color:#a6e22e">a</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1858</title><link>https://nathannaveen.dev/posts/leetcode-1858/</link><pubDate>Mon, 17 May 2021 09:50:59 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1858/</guid><description>1858. Longest Word With All Prefixes
This solution aims to sort words so we get the previous prefix of the max word before the word. An example of this could be
words = [&amp;quot;k&amp;quot;, &amp;quot;kiran&amp;quot;,&amp;quot;ki&amp;quot;,&amp;quot;kira&amp;quot;,&amp;quot;kir&amp;quot;] and when we sort, it becomes words = [&amp;quot;k&amp;quot;,&amp;quot;ki&amp;quot;,&amp;quot;kir&amp;quot;,&amp;quot;kira&amp;quot;, &amp;quot;kiran&amp;quot;].
Then we can use a map to build up the word. If the len(word) is equal to 1, we know that it is a start of a word, or if the map contains word without the last letter, we know that there is the prefix of the word.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-word-with-all-prefixes/">1858. Longest Word With All Prefixes</a></p>
<p>This solution aims to sort <code>words</code> so we get the previous prefix of the max word before the word. An example of this could be</p>
<p><code>words = [&quot;k&quot;, &quot;kiran&quot;,&quot;ki&quot;,&quot;kira&quot;,&quot;kir&quot;]</code>
and when we sort, it becomes <code>words = [&quot;k&quot;,&quot;ki&quot;,&quot;kir&quot;,&quot;kira&quot;, &quot;kiran&quot;]</code>.</p>
<p>Then we can use a map to build up the word. If the <code>len(word)</code> is equal to <code>1</code>, we know that it is a start of a word, or if the map contains <code>word</code> without the last letter, we know that there is the prefix of the word. So if either of these statements we know, we should add the word to the map and make the result the <code>max(word, res)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">longestWord</span>(<span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Strings</span>(<span style="color:#a6e22e">words</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">word</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">words</span> {
		<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">word</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">word</span>[:len(<span style="color:#a6e22e">word</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> {
			<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">word</span>]<span style="color:#f92672">++</span>
			<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">word</span>) &gt; len(<span style="color:#a6e22e">maximum</span>) {
				<span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">word</span>
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1816</title><link>https://nathannaveen.dev/posts/leetcode-1816/</link><pubDate>Mon, 17 May 2021 09:50:53 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1816/</guid><description>1816. Truncate Sentence
Since the solution wants us to return the first k words
We can split the words Then we can return the the first k words joined together seperated by spaces. The Solution
func truncateSentence(s string, k int) string { return strings.Join(strings.Split(s, &amp;#34; &amp;#34;)[:k], &amp;#34; &amp;#34;) } Edited Solution for readability
func truncateSentence(s string, k int) string { arr := strings.Split(s, &amp;#34; &amp;#34;) return strings.Join(arr[:k], &amp;#34; &amp;#34;) }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/truncate-sentence/">1816. Truncate Sentence</a></p>
<p>Since the solution wants us to return the first <code>k</code> words</p>
<ul>
<li>We can split the words</li>
<li>Then we can return the the first <code>k</code> words joined together seperated by spaces.</li>
</ul>
<p><strong>The Solution</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">truncateSentence</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">s</span>, <span style="color:#e6db74">&#34; &#34;</span>)[:<span style="color:#a6e22e">k</span>], <span style="color:#e6db74">&#34; &#34;</span>)
}
</code></pre></div><p><strong>Edited Solution for readability</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">truncateSentence</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">s</span>, <span style="color:#e6db74">&#34; &#34;</span>)
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">arr</span>[:<span style="color:#a6e22e">k</span>], <span style="color:#e6db74">&#34; &#34;</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 1252</title><link>https://nathannaveen.dev/posts/leetcode-1252/</link><pubDate>Mon, 17 May 2021 09:50:46 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1252/</guid><description>1252. Cells with Odd Values in a Matrix
The idea of this solution is to use two maps, x, and y, and we can add all the values of indices to x, and y (index[0] to x, and index[1] to y).
Then we can check whether all the x&amp;rsquo;s plus all the y&amp;rsquo;s is odd. If so, we know that we can add one to the result.
If you don&amp;rsquo;t understand we can take an example:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/cells-with-odd-values-in-a-matrix/">1252. Cells with Odd Values in a Matrix</a></p>
<p>The idea of this solution is to use two maps, <code>x</code>, and <code>y</code>, and we can add all the values of indices to <code>x</code>, and <code>y</code> (<code>index[0]</code> to <code>x</code>, and <code>index[1]</code> to <code>y</code>).</p>
<p>Then we can check whether all the <code>x</code>&rsquo;s plus all the <code>y</code>&rsquo;s is odd. If so, we know that we can add one to the result.</p>
<p>If you don&rsquo;t understand we can take an example:</p>
<p><code>n = 3, m = 2, indices = [[0, 1],[1, 2]]</code></p>
<p><img src="https://i.imgur.com/VLYxqIn.jpg" alt=""></p>
<blockquote>
<p>Note: You might have noticed that the position is in the format <code>(y, x)</code> instead of the average <code>(x, y)</code>. I don&rsquo;t know why this is. If anybody knows, could you please comment?</p>
<p>Continuing with the example, we find the rows and columns and fill them up. After that, we can find the sum of each position:</p>
</blockquote>
<p><img src="https://i.imgur.com/lX74aeV.jpg" alt=""></p>
<p>You might be wondering why this code uses <code>2</code> maps instead of <code>1</code> map or instead of <code>1</code> matrix. This code uses <code>2</code> maps instead of <code>1</code> map because it is not a matrix. The maps store all the <code>x</code> values and all the <code>y</code> values. If we put both maps together, we could get a matrix, but a matrix makes the space <code>O(m * n)</code> while the space of two maps is <code>O(m + n)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">oddCells</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">m</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">indices</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">y</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">index</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">indices</span> {
		<span style="color:#a6e22e">y</span>[<span style="color:#a6e22e">index</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">++</span>
		<span style="color:#a6e22e">x</span>[<span style="color:#a6e22e">index</span>[<span style="color:#ae81ff">1</span>]]<span style="color:#f92672">++</span>
	}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">m</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
			<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">y</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">x</span>[<span style="color:#a6e22e">j</span>]) <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
				<span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1180</title><link>https://nathannaveen.dev/posts/leetcode-1180/</link><pubDate>Mon, 17 May 2021 09:50:40 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1180/</guid><description>1180. Count Substrings with Only One Distinct Letter
The idea of this solution is to use the number of consecutive letters. And to use the formula n * (n + 1) / 2 to find the number of valid substrings. We can use the example below to explain:
Before the example: n * (n + 1) / 2 is the equation for finding the sum of the first n consecutive elements.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/count-substrings-with-only-one-distinct-letter/">1180. Count Substrings with Only One Distinct Letter</a></p>
<hr>
<p>The idea of this solution is to use the number of consecutive letters. And to use the formula <code>n * (n + 1) / 2</code> to find the number of valid substrings. We can use the example below to explain:</p>
<p><em>Before the example: <code>n * (n + 1) / 2</code> is the equation for finding the sum of the first <code>n</code> consecutive elements. The sum of the first <code>3</code> consecutive elments is <code>1 + 2 + 3 = 6</code>, and <code>3 * (3 + 1) / 2 = 3 * 4 / 2 = 12/ 2 = 6</code>, Note: Use PEMDAS when calculating <code>n * (n + 1) / 2</code>.</em></p>
<ul>
<li><code>input := &quot;aaaabbbcccccca&quot;</code></li>
<li>The first substring is <code>aaaa</code>. We have one <code>aaaa</code>, two <code>aaa</code>, three <code>aa</code>, and four <code>a</code>&rsquo;s. <code>1 + 2 + 3 + 4 = 10</code> which equals <code>4 * (4 + 1) / 2 = 10</code>. So <code>res = 10</code></li>
<li>Right now, you might be thinking that there aren&rsquo;t two <code>aaa</code>&rsquo;s and there aren&rsquo;t three <code>aa</code>&rsquo;s. If we look at it with just <code>4</code> random letters, you can see it is true. Let us say that we have <code>abcd</code>, there are two substrings of size three, <code>abc</code>, and <code>bcd</code>, and there are three substrings of size two <code>ab</code>, <code>bc</code>, and <code>cd</code>. This can be shown in the equation as <code>4 * (4 + 1) / 2</code></li>
<li>Now, we can continue with our example. Our next substring would be <code>&quot;bbb&quot;</code>, and there is one <code>&quot;bbb&quot;</code>, two <code>&quot;bb&quot;</code>, and three <code>&quot;b&quot;</code>&rsquo;s. This can be shown in the equation as <code>3 * (3 + 1) / 2</code></li>
<li>Next we can get <code>cccccc</code>. And we can get one <code>&quot;cccccc&quot;</code>, two <code>&quot;ccccc&quot;</code>, three <code>&quot;cccc&quot;</code>, four <code>&quot;ccc&quot;</code>, five <code>&quot;cc&quot;</code>, and six <code>&quot;c&quot;</code>&rsquo;s. This can be shown in the equation as <code>6 * (6 + 1) / 2</code></li>
<li>After that, we have the substring <code>&quot;a&quot;</code>, and we have only one <code>&quot;a&quot;</code>. This can be shown in the equation as <code>1 * (1 + 1) / 2</code></li>
</ul>
<hr>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countLetters</span>(<span style="color:#a6e22e">S</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
	<span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">S</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">letter</span> <span style="color:#f92672">!=</span> string(<span style="color:#a6e22e">i</span>) {
			<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">counter</span> <span style="color:#f92672">*</span> (<span style="color:#a6e22e">counter</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
			<span style="color:#a6e22e">counter</span> = <span style="color:#ae81ff">0</span>
			<span style="color:#a6e22e">letter</span> = string(<span style="color:#a6e22e">i</span>)
		}
		<span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
	}
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> (<span style="color:#a6e22e">counter</span> <span style="color:#f92672">*</span> (<span style="color:#a6e22e">counter</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1833</title><link>https://nathannaveen.dev/posts/leetcode-1833/</link><pubDate>Mon, 17 May 2021 09:50:14 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1833/</guid><description>1833. Maximum Ice Cream Bars
To be truthful, I think that this problem&amp;rsquo;s difficulty should be easy instead of medium.
This solution aims to sort costs because the maximum number of popsicles is obtained with the least price.
func maxIceCream(costs []int, coins int) int { sort.Ints(costs) res := 0 for _, cost := range costs { if coins - cost &amp;lt; 0 { break } res++ coins -= cost } return res }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-ice-cream-bars/">1833. Maximum Ice Cream Bars</a></p>
<p>To be truthful, I think that this problem&rsquo;s difficulty should be easy instead of medium.</p>
<p>This solution aims to sort <code>costs</code> because the maximum number of popsicles is obtained with the least price.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxIceCream</span>(<span style="color:#a6e22e">costs</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">coins</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">costs</span>)
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">cost</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">costs</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">coins</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">cost</span> &lt; <span style="color:#ae81ff">0</span> {
			<span style="color:#66d9ef">break</span>
		}
		<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
		<span style="color:#a6e22e">coins</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">cost</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1827</title><link>https://nathannaveen.dev/posts/leetcode-1827/</link><pubDate>Mon, 17 May 2021 09:50:09 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1827/</guid><description>1827. Minimum Operations to Make the Array Increasing
The ideas of both of the solutions are similar and simple. We know that an array is strictly increasing if the current element in the array, nums[i], is greater than the previous element nums[i - 1]. So if nums[i - 1] is greater than or equal to nums[i] we know that we have to make nums[i] = nums[i - 1] + 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing/">1827. Minimum Operations to Make the Array Increasing</a></p>
<p>The ideas of both of the solutions are similar and simple. We know that an array is strictly increasing if the current element in the array, <code>nums[i]</code>, is greater than the previous element <code>nums[i - 1]</code>. So if <code>nums[i - 1]</code> is greater than or equal to <code>nums[i]</code> we know that we have to make <code>nums[i] = nums[i - 1] + 1</code>.</p>
<p><strong>The Idea Of The First Solution:</strong></p>
<p>The idea of the first solution is to loop from the first element (0 indexed) to the end element. Then check whether <code>nums[i] &lt;= nums[i - 1]</code>, if so we can add <code>nums[i - 1] + 1 - nums[i]</code> to <code>res</code>. We add <code>nums[i - 1] + 1 - nums[i]</code> to res because <code>nums[i - 1] + 1</code> is the value we want res to be, and we subtract <code>nums[i]</code> from it because we want to find the number of operations.</p>
<p><strong>The Idea Of The Second Solution:</strong></p>
<p>Like I said the second solution is pretty similar. We loop from the first element (0 indexed) to the end element and add <code>max(0, nums[i - 1] + 1 - nums[i])</code> to <code>res</code>. We add <code>max(0, nums[i - 1] + 1 - nums[i])</code> to <code>res</code> because if <code>nums[i]</code> is greater than <code>nums[i - 1]</code> we add <code>0</code>, otherwise we add the difference between them. Then we remake <code>nums[i]</code> equal to the maximum of <code>nums[i]</code>, or <code>nums[i - 1] + 1</code>.</p>
<p><strong>The First Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minOperations</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] {
			<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
			<span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>The Second Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minOperations</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">max</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>])
		<span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}

</code></pre></div>]]></content></item><item><title>Leetcode 1331</title><link>https://nathannaveen.dev/posts/leetcode-1331/</link><pubDate>Mon, 17 May 2021 09:49:56 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1331/</guid><description>1331. Rank Transform of an Array
The idea of this solution is to:
Copy arr. Then sort the copy Then loop through the copy and add all the values and indexes of the copy to a map called m. Then loop through 0 to len(arr) - 1, and make arr[i] = m[arr[i]]. Then return arr. func arrayRankTransform(arr []int) []int { g := make([]int, len(arr)) m := make(map[int]int) counter := 1 copy(g, arr) sort.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rank-transform-of-an-array/">1331. Rank Transform of an Array</a></p>
<p>The idea of this solution is to:</p>
<ul>
<li>Copy <code>arr</code>.</li>
<li>Then sort the copy</li>
<li>Then loop through the copy and add all the values and indexes of the copy to a map called <code>m</code>.</li>
<li>Then loop through <code>0</code> to <code>len(arr) - 1</code>, and make <code>arr[i] = m[arr[i]]</code>.</li>
<li>Then return <code>arr</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arrayRankTransform</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">g</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">arr</span>))
	<span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>

	copy(<span style="color:#a6e22e">g</span>, <span style="color:#a6e22e">arr</span>)
	<span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">g</span>)

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">g</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">g</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">g</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] {
			<span style="color:#a6e22e">counter</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
		}
		<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">g</span>[<span style="color:#a6e22e">i</span>]] = <span style="color:#a6e22e">counter</span>
		<span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
	}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
		<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]]
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>
}

</code></pre></div>]]></content></item><item><title>Leetcode 36</title><link>https://nathannaveen.dev/posts/leetcode-36/</link><pubDate>Mon, 17 May 2021 09:32:30 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-36/</guid><description>36. Valid Sudoku
The main idea of this solution is to find the rows, columns, and squares of the numbers. By squares, I mean the nine squares in the board:
The code goes through every position, and if the value is not a &amp;quot;.&amp;quot;, we check whether the row, column, or square contains the number. If so, we can return false.
How to Calculate The Rows And Columns
We check whether the row or column contains the number by using primes.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-sudoku/">36. Valid Sudoku</a></p>
<p>The main idea of this solution is to find the rows, columns, and squares of the numbers. By squares, I mean the nine squares in the board:</p>
<p><img src="https://i.imgur.com/E4LLg2d.jpg" alt=""></p>
<p>The code goes through every position, and if the value is not a <code>&quot;.&quot;</code>, we check whether the row, column, or square contains the number. If so, we can return false.</p>
<p><strong>How to Calculate The Rows And Columns</strong></p>
<p>We check whether the row or column contains the number by using primes. We assign every row and column a prime number:</p>
<p><img src="https://i.imgur.com/v4GM5hG.jpg" alt=""></p>
<p>Multiple prime numbers multiplyed together can only be divide by those same prime numbers, If we find a <code>5</code> in row <code>1</code> we multiply <code>row[5]</code> by <code>primes[1]</code>, and <code>primes[1] = 3</code>, and if we find another <code>5</code> in row <code>1</code> we can check whether <code>row[5] % primes[1] == 0</code> which equals <code>3 % 3 = 0</code>. But let us say that we have one <code>5</code> in row <code>1</code> and another <code>5</code> in row <code>2</code>, the code wont return false because <code>row[5] = primes[1] = 3</code>, and <code>row[5] % primes[2] == 0 = 3 % 5 != 0</code> .</p>
<p><strong>How to Calculate The Squares:</strong></p>
<p>We calculate the numbers in the squares by also using primes, but they are used differently. We us the primes for the values of sudoko, <code>&quot;1&quot; : 2, &quot;2&quot; : 3, &quot;3&quot; : 5, &quot;4&quot; : 7, &quot;5&quot; : 11, &quot;6&quot; : 13, &quot;7&quot; : 17, &quot;8&quot; : 19, &quot;9&quot; : 23</code>.</p>
<p>And we find which square each position goes into by doing <code>squares[i / 3][j / 3]</code>. <code>squares</code> is a jagged array of size 3 by 3, each position in <code>squares</code> represents a blue square in the first image. When we do <code>i / 3</code> and round it down to the nearest integer and <code>j / 3</code> rounded down to the nearest integer, we get:</p>
<p><img src="https://i.imgur.com/04RpB8s.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isValidSudoku</span>(<span style="color:#a6e22e">board</span> [][]<span style="color:#66d9ef">byte</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">primes</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">23</span>}

	<span style="color:#a6e22e">rows</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
	<span style="color:#a6e22e">cols</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)

	<span style="color:#a6e22e">squares</span> <span style="color:#f92672">:=</span> make([][]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">3</span>)
	<span style="color:#a6e22e">squares</span>[<span style="color:#ae81ff">0</span>] = []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>}; <span style="color:#a6e22e">squares</span>[<span style="color:#ae81ff">1</span>] = []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>}; <span style="color:#a6e22e">squares</span>[<span style="color:#ae81ff">2</span>] = []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">board</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">board</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {

			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">board</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;.&#39;</span> {

				<span style="color:#a6e22e">boardPosition</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(string(<span style="color:#a6e22e">board</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]))

				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rows</span>[<span style="color:#a6e22e">boardPosition</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
					<span style="color:#a6e22e">rows</span>[<span style="color:#a6e22e">boardPosition</span>] = <span style="color:#ae81ff">1</span>
				}
				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cols</span>[<span style="color:#a6e22e">boardPosition</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
					<span style="color:#a6e22e">cols</span>[<span style="color:#a6e22e">boardPosition</span>] = <span style="color:#ae81ff">1</span>
				}

				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rows</span>[<span style="color:#a6e22e">boardPosition</span>] <span style="color:#f92672">%</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> 
				<span style="color:#a6e22e">cols</span>[<span style="color:#a6e22e">boardPosition</span>] <span style="color:#f92672">%</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">j</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span>
				<span style="color:#a6e22e">squares</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>] <span style="color:#f92672">%</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">boardPosition</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
					<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
				}

				<span style="color:#a6e22e">cols</span>[<span style="color:#a6e22e">boardPosition</span>] <span style="color:#f92672">*=</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">j</span>]
				<span style="color:#a6e22e">rows</span>[<span style="color:#a6e22e">boardPosition</span>] <span style="color:#f92672">*=</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">i</span>]
				<span style="color:#a6e22e">squares</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>][<span style="color:#a6e22e">j</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>] <span style="color:#f92672">*=</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">boardPosition</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 958</title><link>https://nathannaveen.dev/posts/leetcode-958/</link><pubDate>Wed, 05 May 2021 15:45:43 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-958/</guid><description>958. Check Completeness of a Binary Tree
This solution uses the facts that:
If there is a next row, we know that the whole row has to be full If there is no next row, all the nodes have to be to the left. If you have already looked at the code, you might have seen that we check whether there is a next row by checking whether queue[0].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-completeness-of-a-binary-tree/">958. Check Completeness of a Binary Tree</a></p>
<p>This solution uses the facts that:</p>
<ul>
<li>If there is a next row, we know that the whole row has to be full</li>
<li>If there is no next row, all the nodes have to be to the left.</li>
</ul>
<p>If you have already looked at the code, you might have seen that we check whether there is a next row by checking whether <code>queue[0].Left != nil</code>. You might think what if <code>queue[0].Right != nil</code> while <code>queue[0].Left == nil</code>. This will work because if <code>queue[0].Right != nil</code> and <code>queue[0].Left == nil</code> we know that the row is not full if there is a next row, and if there is no next row, we know that not all nodes are to the left.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isCompleteTree</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">isNextRow</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)

		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">isNextRow</span> = <span style="color:#66d9ef">true</span>
		}

		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
			<span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">isNextRow</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">node</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
			}
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1572</title><link>https://nathannaveen.dev/posts/leetcode-1572/</link><pubDate>Wed, 05 May 2021 15:45:36 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1572/</guid><description>1572. Matrix Diagonal Sum
The idea of the first solution is to add all the values in the diagonals, and if len(mat) is odd, we can subtract the middle element from res. You might be able to understand this solution a little more with two example images: The idea of the second solution is to find two positions in the array (Where a position is in the format (x, y)) which are on diagonals and are equal.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/matrix-diagonal-sum/">1572. Matrix Diagonal Sum</a></p>
<p>The idea of the first solution is to add all the values in the diagonals, and if <code>len(mat)</code> is odd, we can subtract the middle element from <code>res</code>. You might be able to understand this solution a little more with two example images: <img src="https://i.imgur.com/H0DfIpU.jpg" alt=""></p>
<p>The idea of the second solution is to find two positions in the array (Where a position is in the format <code>(x, y)</code>) which are on diagonals and are equal. Suppose we find those two positions, we don&rsquo;t need to add the value at that position twice. If you don&rsquo;t understand, look at the example image: <img src="https://i.imgur.com/x98WvIl.jpg" alt=""> You might be wondering why the code only compares <code>i</code>, and <code>len(mat) - i - 1</code>. The <code>len(mat) - i - 1</code> is all the points on the pinkish reddish line going from the top right to the bottom left, and <code>i</code> is all the points on the orange line that goes from the top left to the bottom right. You also might be wondering why the code doesn&rsquo;t check the whole position and only <code>i, len(mat) - i - 1</code>. It is because every time we compare two two elements they are on the same row, so the code doesn&rsquo;t need to check for the row, but if the code did it would be <code>if i != len(mat) - i - 1 &amp;&amp; i == i</code> (where <code>i</code> is also the row), instead of just <code>if i != len(mat) - i - 1</code>.</p>
<p><strong>The First Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">diagonalSum</span>(<span style="color:#a6e22e">mat</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">mat</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][len(<span style="color:#a6e22e">mat</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
	}
	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">mat</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">mat</span>[len(<span style="color:#a6e22e">mat</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>][len(<span style="color:#a6e22e">mat</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>]
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>The Second Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">diagonalSum</span>(<span style="color:#a6e22e">mat</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">mat</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">i</span>]
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">!=</span> len(<span style="color:#a6e22e">mat</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> {
			<span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][len(<span style="color:#a6e22e">mat</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 103</title><link>https://nathannaveen.dev/posts/leetcode-103/</link><pubDate>Mon, 03 May 2021 10:26:05 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-103/</guid><description>103. Binary Tree Zigzag Level Order Traversal
The idea of this solution is to use BFS and a variable called fromRight. The fromRight checks whether the current row needs to be traversed from the right. If it does, we prepend all the nodes to temp.
func zigzagLevelOrder(root *TreeNode) [][]int { var res [][]int queue := []*TreeNode{root} fromRight := false for len(queue) != 0 { temp := []int{} n := len(queue) for i := 0; i &amp;lt; n; i++ { node := queue[0] queue = queue[1:] if node !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">103. Binary Tree Zigzag Level Order Traversal
</a></p>
<p>The idea of this solution is to use BFS and a variable called <code>fromRight</code>. The <code>fromRight</code> checks whether the current row needs to be traversed from the right. If it does, we prepend all the nodes to <code>temp</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">zigzagLevelOrder</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) [][]<span style="color:#66d9ef">int</span> {
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">res</span> [][]<span style="color:#66d9ef">int</span>
	<span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}
	<span style="color:#a6e22e">fromRight</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)

		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
			<span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">fromRight</span> {
					<span style="color:#a6e22e">temp</span> = append([]<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span>}, <span style="color:#a6e22e">temp</span><span style="color:#f92672">...</span>)
				} <span style="color:#66d9ef">else</span> {
					<span style="color:#a6e22e">temp</span> = append(<span style="color:#a6e22e">temp</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span>)
				}
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>)
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
			}
		}
		<span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">temp</span>)
		<span style="color:#a6e22e">fromRight</span> = !<span style="color:#a6e22e">fromRight</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>[:len(<span style="color:#a6e22e">res</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
}
</code></pre></div>]]></content></item><item><title>Leetcode 1609</title><link>https://nathannaveen.dev/posts/leetcode-1609/</link><pubDate>Mon, 03 May 2021 10:17:57 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1609/</guid><description>1609. Even Odd Tree
The main idea of this solution is to use BFS, but the details are:
We have a counter called row to count every row (We use this to check whether it is an even row or an odd row). Then we have a queue that has only the root to start. We loop while len(queue) != 0 Then we make a variable n equal to the len(queue).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/even-odd-tree/">1609. Even Odd Tree</a></p>
<p>The main idea of this solution is to use BFS, but the details are:</p>
<ul>
<li>We have a counter called <code>row</code> to count every row (We use this to check whether it is an even row or an odd row).</li>
<li>Then we have a queue that has only the root to start.</li>
<li>We loop while <code>len(queue) != 0</code></li>
<li>Then we make a variable <code>n</code> equal to the <code>len(queue)</code>. We need this because the length of <code>queue</code> changes.</li>
<li>Then we loop from <code>0</code> to <code>n - 1</code>.</li>
<li>Inside the loop, we find the current node and removed it from <code>queue</code>.</li>
<li>The first <code>if</code> statement is for whether the row is even. If so, and the current node&rsquo;s value is even, we know we have to return <code>false</code>. Or if the node is not the last in the row and it is greater than or equal to the following node, we know that we have to return <code>false</code>.</li>
<li>Then we can check <code>if row % 2 == 1 &amp;&amp; (node.Val % 2 == 1 || (i2 != n - 1 &amp;&amp; node.Val &lt;= queue[0].Val))</code>. The <code>node.Val % 2 == 1</code> is for checking whether we are on an odd numbered row. Then <code>node.Val % 2 == 1</code> is for checking whether the current node is odd. The <code>i2 != n - 1 &amp;&amp; node.Val &lt;= queue[0].Val</code> is for checking whether the current node is not the last node in the row, and whether the current nodes value is smaller than or equal to the next nodes value. If any of these things happen the code returns <code>false</code>.</li>
<li>Then we have to check whether the <code>node.Left</code>, and the <code>node.Right</code> are not equal to <code>nil</code>. If so, we can append them into the queue.</li>
<li>Outside of this loop, we do <code>row++</code> to move onto the next row.</li>
<li>And if the code hasn&rsquo;t returned <code>false</code> we can return <code>true</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isEvenOddTree</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
	<span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i2</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i2</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
			<span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">row</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span>
			(<span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">Val</span>)) {
			
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">row</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span>
			(<span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">Val</span>)) {
			
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>)
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
			}
		}
		<span style="color:#a6e22e">row</span><span style="color:#f92672">++</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 107</title><link>https://nathannaveen.dev/posts/leetcode-107/</link><pubDate>Mon, 03 May 2021 10:17:25 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-107/</guid><description>107. Binary Tree Level Order Traversal II
First solution: faster than 100% Second solution: faster than 100%
I put in the edited for people who don&amp;rsquo;t code in go because people who don&amp;rsquo;t code in go won&amp;rsquo;t understand res = append(res[:0], append([][]int{temp}, res[0:]...)...). So if you don&amp;rsquo;t understand the first solution look at the edited.
First solution:
func levelOrderBottom(root *TreeNode) [][]int { res := [][]int{} queue := []*TreeNode{root} for len(queue) !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/">107. Binary Tree Level Order Traversal II</a></p>
<p><em>First solution: faster than 100%</em>
<em>Second solution: faster than 100%</em></p>
<p>I put in the edited for people who don&rsquo;t code in go because people who don&rsquo;t code in go won&rsquo;t understand <code>res = append(res[:0], append([][]int{temp}, res[0:]...)...)</code>. So if you don&rsquo;t understand the first solution look at the edited.</p>
<p><strong>First solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">levelOrderBottom</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) [][]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}
	<span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
		<span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
			<span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">temp</span> = append(<span style="color:#a6e22e">temp</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span>)
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>)
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
			}
		}
		<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">temp</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
			<span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>[:<span style="color:#ae81ff">0</span>], append([][]<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">temp</span>}, <span style="color:#a6e22e">res</span>[<span style="color:#ae81ff">0</span>:]<span style="color:#f92672">...</span>)<span style="color:#f92672">...</span>)
		}
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>The edited solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">levelOrderBottom</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) [][]<span style="color:#66d9ef">int</span> {
	<span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}
	<span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">root</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> make([][]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">0</span>)
	}

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
		<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
			<span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
			<span style="color:#a6e22e">h</span> = append(<span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span>)
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>)
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
			}
		}
		<span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">h</span>)
	}
	<span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">res</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">left</span> &lt; <span style="color:#a6e22e">right</span> {
		<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">left</span>], <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">right</span>] = <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">right</span>], <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">left</span>]
		<span style="color:#a6e22e">left</span><span style="color:#f92672">++</span>
		<span style="color:#a6e22e">right</span><span style="color:#f92672">--</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1602</title><link>https://nathannaveen.dev/posts/leetcode-1602/</link><pubDate>Mon, 03 May 2021 10:17:00 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1602/</guid><description>1602. Find Nearest Right Node in Binary Tree
The idea of this solution is to use a queue to loop through the tree, and then for every node we loop through, we check whether the node.Val == u.Val, if so, we go through the if statement if i == n - 1. Using this, we know whether the node is the last. If so, we return nil. Else we return the node after the current node.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-nearest-right-node-in-binary-tree/">1602. Find Nearest Right Node in Binary Tree</a></p>
<p>The idea of this solution is to use a queue to loop through the tree, and then for every node we loop through, we check whether the <code>node.Val == u.Val</code>, if so, we go through the if statement <code>if i == n - 1</code>. Using this, we know whether the node is the last. If so, we return <code>nil</code>. Else we return the node after the current node.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findNearestRightNode</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">u</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span> {
	<span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

	<span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">queue</span>)
		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
			<span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
			<span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">u</span>.<span style="color:#a6e22e">Val</span> {
				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
					<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
				} <span style="color:#66d9ef">else</span> {
					<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
				}
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>)
			}
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
			}
		}
	}

	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1161</title><link>https://nathannaveen.dev/posts/leetcode-1161/</link><pubDate>Mon, 03 May 2021 10:16:45 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1161/</guid><description>1161. Maximum Level Sum of a Binary Tree
What the Problem is Asking Us:
The problem is asking us to go through each level of the binary tree and find the maximum sum and make that the returned level, but if the maximum sum is on two levels, we get the minimum level of those two.
The Code:
func maxLevelSum(root *TreeNode) int { maximum, minLevel, level := root.Val, 1, 0 queue := []*TreeNode{root} for len(queue) !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/">1161. Maximum Level Sum of a Binary Tree</a></p>
<p><strong>What the Problem is Asking Us:</strong></p>
<p>The problem is asking us to go through each level of the binary tree and find the maximum sum and make that the returned level, but if the maximum sum is on two levels, we get the minimum level of those two.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxLevelSum</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">minLevel</span>, <span style="color:#a6e22e">level</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">root</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">queue</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">queue</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">queue</span>)

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">node</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">0</span>]
            <span style="color:#a6e22e">queue</span> = <span style="color:#a6e22e">queue</span>[<span style="color:#ae81ff">1</span>:]
            <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Val</span>

            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
                <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Left</span>)
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
                <span style="color:#a6e22e">queue</span> = append(<span style="color:#a6e22e">queue</span>, <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">Right</span>)
            }
        }
        <span style="color:#a6e22e">level</span><span style="color:#f92672">++</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span> &gt; <span style="color:#a6e22e">maximum</span> {
            <span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">minLevel</span> = <span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">level</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">minLevel</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 844</title><link>https://nathannaveen.dev/posts/leetcode-844/</link><pubDate>Wed, 28 Apr 2021 21:33:02 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-844/</guid><description>844. Backspace String Compare
To be truthful I am not sure whether this solution is an O(n) time or a O(2n) time because this code loops through s then t. Could someone tell me which it is?
So the idea of this solution is: *Note: I will be explaining only the loop for s because the loop for s is pretty much the same as the loop for t.
So the code first loops from 0 to len(s).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/backspace-string-compare/">844. Backspace String Compare</a></p>
<p>To be truthful I am not sure whether this solution is an <code>O(n)</code> time or a <code>O(2n)</code> time because this code loops through <code>s</code> then <code>t</code>. Could someone tell me which it is?</p>
<p>So the idea of this solution is: *Note: I will be explaining only the loop for <code>s</code> because the loop for <code>s</code> is pretty much the same as the loop for <code>t</code>.</p>
<ul>
<li>So the code first loops from <code>0</code> to <code>len(s)</code>.</li>
<li>The code checks whether <code>i &gt; 0 &amp;&amp; s[i] == '#'</code> because if <code>s[i] == '#'</code> we know that we have to remove the previous element, and <code>i &gt; 0</code> is for whether there is a previous element to remove. So, if <code>i &gt; 0 &amp;&amp; s[i] == '#'</code> we can remove the <code>#</code> and the previous element, then we move <code>i</code> back by <code>2</code> because we have removed two characters from <code>s</code>.</li>
<li>The else if checks whether <code>s[i] == '#'</code>. This is for if we have to remove the previous element but there is no previous element that we can remove. So if <code>s[i] == '#'</code> we can remove the <code>#</code> and move <code>i</code> back by <code>1</code> because we removed <code>1</code> character from <code>s</code>.</li>
</ul>
<p>If you don&rsquo;t understand why we are moveing <code>i</code> back by <code>1</code> or <code>2</code> look at the following image:</p>
<p><code>input = &quot;Ta#co#s&quot;</code></p>
<p><img src="https://i.imgur.com/yaJqbq8.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">backspaceCompare</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">t</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[:<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">1</span>:]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
        }
    }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">t</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span> {
            <span style="color:#a6e22e">t</span> = <span style="color:#a6e22e">t</span>[:<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">t</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">t</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span> {
            <span style="color:#a6e22e">t</span> = <span style="color:#a6e22e">t</span>[<span style="color:#ae81ff">1</span>:]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">t</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 720</title><link>https://nathannaveen.dev/posts/leetcode-720/</link><pubDate>Wed, 28 Apr 2021 21:30:47 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-720/</guid><description>720. Longest Word in Dictionary
The idea of this solution is pretty simple:
The code will sort words, so the minor parts we use to build the biggest words are before the built-up words. Also, since words is sorted, we don&amp;rsquo;t have to worry about the &amp;ldquo;longest word with the smallest lexicographical order&amp;rdquo;; we only have to care about the &amp;ldquo;longest word&amp;rdquo; part. After that, the code will loop through words.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-word-in-dictionary/">720. Longest Word in Dictionary</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>The code will sort <code>words</code>, so the minor parts we use to build the biggest words are before the built-up words. Also, since <code>words</code> is sorted, we don&rsquo;t have to worry about the &ldquo;longest word with the smallest lexicographical order&rdquo;; we only have to care about the &ldquo;longest word&rdquo; part.</li>
<li>After that, the code will loop through <code>words</code>.
<ul>
<li>Then, the code will check whether a map called <code>m</code> contains the word without the last letter. We know that the current word builds onto a previous word. If the length of the current word is <code>1</code>, we know that it is the beginning of a build.
<ul>
<li>Inside the if statement, we can check whether the length of <code>word</code> is greater than the length of the maximum length string. If so, we can make the maximum word equal to <code>word</code>.</li>
<li>Then, we can add <code>word</code> to the map with a value of <code>1</code>.</li>
</ul>
</li>
</ul>
</li>
<li>Then we can return <code>max</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">longestWord</span>(<span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Strings</span>(<span style="color:#a6e22e">words</span>)
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">word</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">words</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">word</span>[:len(<span style="color:#a6e22e">word</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> len(<span style="color:#a6e22e">word</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">word</span>) &gt; len(<span style="color:#a6e22e">max</span>) {
                <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">word</span>
            }
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">word</span>] = <span style="color:#ae81ff">1</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">max</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 500</title><link>https://nathannaveen.dev/posts/leetcode-500/</link><pubDate>Wed, 28 Apr 2021 21:30:43 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-500/</guid><description>500. Keyboard Row
I know that this code is not pretty, but the idea of the solution is pretty simple:
We can first make a map of letters where the top rows letters are assigned to the number 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, the middle row&amp;rsquo;s characters are assigned to the numbers 10, 11, 12, 13, 14, 15, 16, 17, 18, and the last rows characters are assigned to the numbers 19, 20, 21, 22, 23, 24, 25.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/keyboard-row/">500. Keyboard Row</a></p>
<p>I know that this code is not pretty, but the idea of the solution is pretty simple:</p>
<ul>
<li>We can first make a map of letters where the top rows letters are assigned to the number <code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9</code>, the middle row&rsquo;s characters are assigned to the numbers <code>10, 11, 12, 13, 14, 15, 16, 17, 18</code>, and the last rows characters are assigned to the numbers <code>19, 20, 21, 22, 23, 24, 25</code>. We call this map <code>m</code>.</li>
<li>The code loops through each word where each word in <code>words</code> is called <code>word</code>
<ul>
<li>Note the indented are saying that this is inside the loop</li>
<li>We make a string called <code>firstLetter</code> and make that store the first letter. Then we make it lowercase in the following if.</li>
<li>Then we make a variable called <code>row</code>, <code>row</code> is used to know which row our first key starts on, either <code>0</code> the top row, <code>1</code> the middle row, or <code>2</code> the bottom row. We start with <code>row = 0</code>, but then we check whether <code>m[firstLetter]</code> is in the range of <code>10 to 18</code>, or <code>19 to 25</code>, we can check whether the number value of the key letter is in those ranges because if it is in the range <code>10 to 18</code> we know that it is the middle row, and if it is in the range <code>19 to 25</code> it is in the last row.</li>
<li>Then we loop over each letter of <code>word</code>.
<ul>
<li>Inside that loop, we make a variable called <code>letter</code> equal to the current letter in <code>word</code>. We are then using the following if statement to make it lowercase.</li>
<li>Then we can check whether <code>row == 0</code>, if so and <code>letters[letter]</code> is not in the range of <code>0 to 9</code> we know that the word is not on all one keyboard row.</li>
<li>Then we can check whether <code>row == 1</code>, if so and <code>letters[letter]</code> is not in the range of <code>10 to 18</code> we know that the word is not on all one keyboard row.</li>
<li>Then we can check whether <code>row == 2</code>, if so and <code>letters[letter]</code> is not in the range of <code>19 to 25</code> we know that the word is not on all one keyboard row.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findWords</span>(<span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>) []<span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{}
    <span style="color:#a6e22e">letters</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;q&#34;</span>] = <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;w&#34;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;e&#34;</span>] = <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;r&#34;</span>] = <span style="color:#ae81ff">3</span>
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;t&#34;</span>] = <span style="color:#ae81ff">4</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;y&#34;</span>] = <span style="color:#ae81ff">5</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;u&#34;</span>] = <span style="color:#ae81ff">6</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;i&#34;</span>] = <span style="color:#ae81ff">7</span>
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;o&#34;</span>] = <span style="color:#ae81ff">8</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;p&#34;</span>] = <span style="color:#ae81ff">9</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;a&#34;</span>] = <span style="color:#ae81ff">10</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;s&#34;</span>] = <span style="color:#ae81ff">11</span>
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;d&#34;</span>] = <span style="color:#ae81ff">12</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;f&#34;</span>] = <span style="color:#ae81ff">13</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;g&#34;</span>] = <span style="color:#ae81ff">14</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;h&#34;</span>] = <span style="color:#ae81ff">15</span>
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;j&#34;</span>] = <span style="color:#ae81ff">16</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;k&#34;</span>] = <span style="color:#ae81ff">17</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;l&#34;</span>] = <span style="color:#ae81ff">18</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;z&#34;</span>] = <span style="color:#ae81ff">19</span>
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;x&#34;</span>] = <span style="color:#ae81ff">20</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;c&#34;</span>] = <span style="color:#ae81ff">21</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;v&#34;</span>] = <span style="color:#ae81ff">22</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;b&#34;</span>] = <span style="color:#ae81ff">23</span>
    <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;n&#34;</span>] = <span style="color:#ae81ff">24</span>; <span style="color:#a6e22e">letters</span>[<span style="color:#e6db74">&#34;m&#34;</span>] = <span style="color:#ae81ff">25</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">word</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">words</span> {
        <span style="color:#a6e22e">shouldAddWordToRes</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>
        <span style="color:#a6e22e">firstLetter</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">0</span>])
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> {
            <span style="color:#a6e22e">firstLetter</span> = string(<span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">32</span>)
        }
        <span style="color:#a6e22e">row</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">firstLetter</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">firstLetter</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">18</span> {
            <span style="color:#a6e22e">row</span> = <span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">firstLetter</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">19</span> {
            <span style="color:#a6e22e">row</span> = <span style="color:#ae81ff">2</span>
        }

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">word</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">letter</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">word</span>[<span style="color:#a6e22e">i</span>])
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">word</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">word</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> {
                <span style="color:#a6e22e">letter</span> = string(<span style="color:#a6e22e">word</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">32</span>)
            }

            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">row</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">letter</span>] &gt; <span style="color:#ae81ff">9</span> {
                <span style="color:#a6e22e">shouldAddWordToRes</span> = <span style="color:#66d9ef">false</span>; <span style="color:#66d9ef">break</span>
            } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">row</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">letter</span>] &lt; <span style="color:#ae81ff">10</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">letter</span>] &gt; <span style="color:#ae81ff">18</span>) {
                <span style="color:#a6e22e">shouldAddWordToRes</span> = <span style="color:#66d9ef">false</span>; <span style="color:#66d9ef">break</span>
            } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">row</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">letters</span>[<span style="color:#a6e22e">letter</span>] &lt; <span style="color:#ae81ff">19</span> {
                <span style="color:#a6e22e">shouldAddWordToRes</span> = <span style="color:#66d9ef">false</span>; <span style="color:#66d9ef">break</span>
            }
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">shouldAddWordToRes</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">word</span>)
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1374</title><link>https://nathannaveen.dev/posts/leetcode-1374/</link><pubDate>Mon, 26 Apr 2021 07:51:50 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1374/</guid><description>1374. Generate a String With Characters That Have Odd Counts
This solution is relatively straightforward. All it does is if n is odd, we can return n numbers of 'a', but if n is even, we can return a count of n - 1, 'a'&amp;rsquo;s plus one 'b'.
You might be wondering why we are doing n number of a&amp;rsquo;s for when n is odd and n - 1 number of a&amp;rsquo;s and a b for when n is even.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/">1374. Generate a String With Characters That Have Odd Counts</a></p>
<p>This solution is relatively straightforward. All it does is if <code>n</code> is odd, we can return <code>n</code> numbers of <code>'a'</code>, but if <code>n</code> is even, we can return a count of <code>n - 1</code>, <code>'a'</code>&rsquo;s plus one <code>'b'</code>.</p>
<p>You might be wondering why we are doing <code>n</code> number of <code>a</code>&rsquo;s for when <code>n</code> is odd and <code>n - 1</code> number of <code>a</code>&rsquo;s and a <code>b</code> for when <code>n</code> is even. When <code>n</code> is odd, we can add an odd number of <code>a</code>&rsquo;s and finish the string. If <code>n</code> is even, we can add an odd number of <code>a</code>&rsquo;s, but the number of letters is <code>n - 1</code>, so we can add one more <code>b</code> to finish the job.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateTheString</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Repeat</span>(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#a6e22e">n</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Repeat</span>(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#a6e22e">n</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;b&#34;</span>
}
</code></pre></div><p><strong>Edited for understanding</strong> <em>(If you don&rsquo;t understand the first code because of the <code>strings.Repeat()</code> and all the following code has fixed that)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateTheString</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;a&#34;</span>
        }
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">n</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;a&#34;</span>
        }
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;b&#34;</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1232</title><link>https://nathannaveen.dev/posts/leetcode-1232/</link><pubDate>Sun, 25 Apr 2021 21:15:52 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1232/</guid><description>1232. Check If It Is a Straight Line
The idea of this solution is we use 3 points to find whether two slopes are equal. We can use the equation:where x0, x1, x2, y0, y1, y2 are all coordinates: You might not understand the equation, so we can multiply divide both sides by (x1 - x0) and (x2 - x1) and we can get: The equation above is based off of a familar slope equation: The reason we are doing the original equation instead of the where we have divided both sides by (x1 - x0) and (x2 - x1) is we don&amp;rsquo;t have to worry about dividing by 0 such as when we divide both sides by (x1 - x0) and (x2 - x1) but (x1 - x0) = 0 or (x2 - x1) = 0 we have to contumplate what to do.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-it-is-a-straight-line/">1232. Check If It Is a Straight Line</a></p>
<p>The idea of this solution is we use <code>3</code> points to find whether two slopes are equal. We can use the equation:<img src="https://assets.leetcode.com/users/images/b1a5e6f1-79e2-48fd-9595-97bbc4e799b5_1619403108.4592967.jpeg" alt="image">
where <code>x0, x1, x2, y0, y1, y2</code> are all coordinates: <img src="https://assets.leetcode.com/users/images/436b4e59-b158-4901-b2fb-4865f2a5ab6a_1619403125.7176585.jpeg" alt="image">
You might not understand the equation, so we can multiply divide both sides by <code>(x1 - x0)</code> and <code>(x2 - x1)</code> and we can get: <img src="https://assets.leetcode.com/users/images/a9321f76-d54f-4003-bed0-b772c0a5867f_1619403157.863461.jpeg" alt="image">
The equation above is based off of a familar slope equation: <img src="https://assets.leetcode.com/users/images/a9f5ac94-57c1-476b-8747-e67e32b34b13_1619403182.6362567.jpeg" alt="image">
The reason we are doing the original equation instead of the where we have divided both sides by <code>(x1 - x0)</code> and <code>(x2 - x1)</code> is we don&rsquo;t have to worry about dividing by <code>0</code> such as when we divide both sides by <code>(x1 - x0)</code> and <code>(x2 - x1)</code> but <code>(x1 - x0) = 0</code> or <code>(x2 - x1) = 0</code> we have to contumplate what to do.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkStraightLine</span>(<span style="color:#a6e22e">coordinates</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">x0</span>, <span style="color:#a6e22e">x1</span>, <span style="color:#f92672">:=</span> <span style="color:#a6e22e">coordinates</span>[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">coordinates</span>[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]
    <span style="color:#a6e22e">y0</span>, <span style="color:#a6e22e">y1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">coordinates</span>[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">coordinates</span>[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">coordinates</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">x2</span>, <span style="color:#a6e22e">y2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">coordinates</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">coordinates</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>]
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">x1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">x0</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">y2</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">y1</span>) <span style="color:#f92672">!=</span> (<span style="color:#a6e22e">y1</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">y0</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">x2</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">x1</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1564</title><link>https://nathannaveen.dev/posts/leetcode-1564/</link><pubDate>Sun, 25 Apr 2021 18:43:09 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1564/</guid><description>1564. Put Boxes Into the Warehouse I
The idea of this solution is:
We sort boxes. Then, we make an array called minimums, and put the minimum values of warehouse from left to right into the array. If you don&amp;rsquo;t understand, look at the following images: Then we can just look from len(minimums) - 1 to 0 and check whether minimums[i] &amp;gt;= boxes[boxCounter] we can go to the next box, other wise we continue going through the loop until minimums[i] &amp;gt;= boxes[boxCounter].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/put-boxes-into-the-warehouse-i/">1564. Put Boxes Into the Warehouse I</a></p>
<p>The idea of this solution is:</p>
<ul>
<li>We sort <code>boxes</code>.</li>
<li>Then, we make an array called <code>minimums</code>, and put the minimum values of <code>warehouse</code> from left to right into the array. If you don&rsquo;t understand, look at the following images: <img src="https://i.imgur.com/O8cQYXz.jpg" alt=""></li>
<li>Then we can just look from <code>len(minimums) - 1</code> to <code>0</code> and check whether <code>minimums[i] &gt;= boxes[boxCounter]</code> we can go to the next box, other wise we continue going through the loop until <code>minimums[i] &gt;= boxes[boxCounter]</code>.</li>
<li>Then we can return <code>boxCounter</code> because <code>boxCounter = the number of boxes we have boxes we have fitted in</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxBoxesInWarehouse</span>(<span style="color:#a6e22e">boxes</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">warehouse</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">boxCounter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">boxes</span>)
    <span style="color:#a6e22e">minimums</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">warehouse</span>[<span style="color:#ae81ff">0</span>]}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">warehouse</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">minimums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">warehouse</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">minimums</span> = append(<span style="color:#a6e22e">minimums</span>, <span style="color:#a6e22e">warehouse</span>[<span style="color:#a6e22e">i</span>])
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">minimums</span> = append(<span style="color:#a6e22e">minimums</span>, <span style="color:#a6e22e">minimums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>])
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">minimums</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">boxCounter</span> <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">boxes</span>) {
            <span style="color:#66d9ef">break</span>
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">minimums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">boxes</span>[<span style="color:#a6e22e">boxCounter</span>] {
            <span style="color:#a6e22e">boxCounter</span><span style="color:#f92672">++</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">boxCounter</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1422</title><link>https://nathannaveen.dev/posts/leetcode-1422/</link><pubDate>Sun, 25 Apr 2021 11:08:11 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1422/</guid><description>1422. Maximum Score After Splitting a String
The idea of the first solution is pretty simple, and the second solution is based on the first solution.
The idea of the first solution is:
We loop through s and add all the numbers to a counter called numberOfOnes to count the number of ones. We do this by using ASCII. The ASCII of 0 is 48, and the ASCII of 1 is 49, so we can get the int of s[i] and then subtract 48 from it to get 0 or 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-score-after-splitting-a-string/">1422. Maximum Score After Splitting a String</a></p>
<p>The idea of the first solution is pretty simple, and the second solution is based on the first solution.</p>
<p>The idea of the first solution is:</p>
<ul>
<li>We loop through <code>s</code> and add all the numbers to a counter called <code>numberOfOnes</code> to count the number of ones. We do this by using ASCII. The ASCII of <code>0</code> is <code>48</code>, and the ASCII of <code>1</code> is <code>49</code>, so we can get the <code>int</code> of <code>s[i]</code> and then subtract <code>48</code> from it to get <code>0</code> or <code>1</code>. If it is <code>0</code> <code>s[i] = '0'</code> and if it is <code>1</code> <code>s[i] = '1'</code>.</li>
<li>If the first element is a <code>'0'</code> we add one to <code>numberOfZeros</code> and if it is a <code>'1'</code> we can subtract one from <code>numberOfOnes</code> because the split string starts with a substring of length <code>1</code> on the left and a substring of length <code>(len(s) - 1) - 1</code>.</li>
<li>Then we can loop through <code>1</code> to <code>len(s) - 1</code> and add one to <code>numberOfZeros</code> or subtract one from the <code>numberOfOnes</code>, and then check whether the <code>numberOfZeros + numberOfOnes</code> is greater than <code>maximum</code>, if so make <code>maximum</code> equal to <code>numberOfZeros + numberOfOnes</code>.</li>
</ul>
<p>The idea of the second solution is: We do the same thing as the first solution, but we combine <code>numberOfZeros</code> and <code>numberOfOnes</code> into a variable called <code>sum</code>.</p>
<p><strong>The First Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxScore</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">numberOfZeros</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">+=</span> int(<span style="color:#a6e22e">i</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span>
    }
    
    <span style="color:#a6e22e">numberOfZeros</span>, <span style="color:#a6e22e">numberOfOnes</span> = 
    <span style="color:#a6e22e">addAndSubtractFromOnesAndZeros</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">numberOfZeros</span>, <span style="color:#a6e22e">numberOfOnes</span>, <span style="color:#ae81ff">0</span>)
    
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numberOfZeros</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">numberOfZeros</span>, <span style="color:#a6e22e">numberOfOnes</span> = 
        <span style="color:#a6e22e">addAndSubtractFromOnesAndZeros</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">numberOfZeros</span>, <span style="color:#a6e22e">numberOfOnes</span>, <span style="color:#a6e22e">i</span>)
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numberOfZeros</span> &gt; <span style="color:#a6e22e">maximum</span> {
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">numberOfZeros</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">addAndSubtractFromOnesAndZeros</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, 
<span style="color:#a6e22e">numberOfZeros</span>, <span style="color:#a6e22e">numberOfOnes</span>, <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) (<span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">int</span>) {

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">numberOfZeros</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">numberOfOnes</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">numberOfZeros</span>, <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
}
</code></pre></div><p><strong>The Second Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxScore</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> int(<span style="color:#a6e22e">i</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span>
    }

    <span style="color:#a6e22e">sum</span> = <span style="color:#a6e22e">addAndSubtractFromOnesAndZeros2</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">sum</span>, <span style="color:#ae81ff">0</span>)
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">sum</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">sum</span> = <span style="color:#a6e22e">addAndSubtractFromOnesAndZeros2</span>(<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">i</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span> &gt; <span style="color:#a6e22e">maximum</span> {
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">sum</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">addAndSubtractFromOnesAndZeros2</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 748</title><link>https://nathannaveen.dev/posts/leetcode-748/</link><pubDate>Sun, 25 Apr 2021 11:08:04 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-748/</guid><description>Shortest Completing Word
Here is how I got to this solution. I couldn&amp;rsquo;t think of any way to solve this problem without doing a naive solution, so I looked at the discussion and saw jmcelvenny&amp;rsquo;s solution.
The idea of this solution is:
we get all the letters in licensePlate and multiply each letter&amp;rsquo;s prime number to a variable called product. We have an array of 26 prime numbers, so each letter has its own prime number (upper case and lower case of the same letter share a prime number), such as a : primes[0], b : primes[1], c : primes[2], and A : primes[0], B : primes[1], C : primes[2].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/shortest-completing-word/">Shortest Completing Word</a></p>
<p>Here is how I got to this solution. I couldn&rsquo;t think of any way to solve this problem without doing a naive solution, so I looked at the discussion and saw <a href="https://leetcode.com/problems/shortest-completing-word/discuss/158110/Java-6ms-beats-100-PRIME-NUMBERS">jmcelvenny&rsquo;s solution</a>.</p>
<p>The idea of this solution is:</p>
<ul>
<li>we get all the letters in <code>licensePlate</code> and multiply each letter&rsquo;s prime number to a variable called <code>product</code>. We have an array of <code>26</code> prime numbers, so each letter has its own prime number (upper case and lower case of the same letter share a prime number), such as <code>a : primes[0], b : primes[1], c : primes[2]</code>, and <code>A : primes[0], B : primes[1], C : primes[2]</code>.</li>
<li>After we have multiplied all the <code>licensePlate</code> letters prime numbers together, we multiply each word letters prime numbers together into another product.</li>
<li>Then check whether the <code>newProduct % originalProduct == 0</code>, and the length of the current word is smaller than the length of the shortest word. If so, make the shortest word equal to the present word.</li>
</ul>
<p>You might be wondering why we are doing <code>newProduct % originalProduct == 0</code>, it is because if there is a product of only prime numbers, the only divisors are the same prime numbers. So since the <code>originalProduct</code> is the product of the primes, and <code>newProduct</code> is also the product of primes. Since we know that prime products can only be divided by the primes the were multiplied to get the outcome, we can do <code>newProduct % originalProduct == 0</code> because if <code>newProduct % originalProduct</code> equals <code>0</code> we know that <code>newProduct</code> has all the primes of <code>originalProduct</code>, which intern means that the current word has the letters of the license plate.</p>
<p>If you still don&rsquo;t understand but understand one-way encryption, this solution is similar to one-way encryption.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">shortestCompletingWord</span>(<span style="color:#a6e22e">licensePlate</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">primes</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">29</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">37</span>, <span style="color:#ae81ff">41</span>, <span style="color:#ae81ff">43</span>,
        <span style="color:#ae81ff">47</span>, <span style="color:#ae81ff">53</span>, <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">61</span>, <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">71</span>, <span style="color:#ae81ff">73</span>, <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">89</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">101</span>}
    <span style="color:#a6e22e">product</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#a6e22e">product</span> = <span style="color:#a6e22e">productOfWord</span>(<span style="color:#a6e22e">licensePlate</span>, <span style="color:#a6e22e">product</span>, <span style="color:#a6e22e">primes</span>)
    <span style="color:#a6e22e">shortest</span>, <span style="color:#a6e22e">length</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#ae81ff">16</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">word</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">words</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">productOfWord</span>(<span style="color:#a6e22e">word</span>, <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">primes</span> ) <span style="color:#f92672">%</span> <span style="color:#a6e22e">product</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> len(<span style="color:#a6e22e">word</span>) &lt; <span style="color:#a6e22e">length</span> {
            <span style="color:#a6e22e">shortest</span>, <span style="color:#a6e22e">length</span> = <span style="color:#a6e22e">word</span>, len(<span style="color:#a6e22e">word</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">shortest</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">productOfWord</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">product</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">primes</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">lowerIndex</span>, <span style="color:#a6e22e">higherIndex</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;A&#39;</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">lowerIndex</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">lowerIndex</span> &lt; <span style="color:#ae81ff">26</span> {
            <span style="color:#a6e22e">product</span> <span style="color:#f92672">*=</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">lowerIndex</span>]
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">higherIndex</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">higherIndex</span> &lt; <span style="color:#ae81ff">26</span> {
            <span style="color:#a6e22e">product</span> <span style="color:#f92672">*=</span> <span style="color:#a6e22e">primes</span>[<span style="color:#a6e22e">higherIndex</span>]
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">product</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1151</title><link>https://nathannaveen.dev/posts/leetcode-1151/</link><pubDate>Thu, 22 Apr 2021 09:14:35 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1151/</guid><description>1151. Minimum Swaps to Group All 1&amp;rsquo;s Together
The idea of this solution is:
We find the number of 1&amp;rsquo;s. Then we know that the 1&amp;rsquo;s have to be in a subarray of the length of all the 1&amp;rsquo;s. We know that this works because the problem statement says that all the 1&amp;rsquo;s should be together in any place. Since we know that all the ones should be in a substring of length the number of ones in data, we just have to find the substring with the maximum number of 1&amp;rsquo;s in it already so, we get the minimum switches.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/">1151. Minimum Swaps to Group All 1&rsquo;s Together</a></p>
<p>The idea of this solution is:</p>
<ul>
<li>We find the number of <code>1</code>&rsquo;s.</li>
<li>Then we know that the <code>1</code>&rsquo;s have to be in a subarray of the length of all the <code>1</code>&rsquo;s. We know that this works because the problem statement says that all the <code>1</code>&rsquo;s should be together in <strong>any place</strong>. Since we know that all the ones should be in a substring of length the number of ones in <code>data</code>, we just have to find the substring with the maximum number of <code>1</code>&rsquo;s in it already so, we get the minimum switches.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minSwaps</span>(<span style="color:#a6e22e">data</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">oneCounter</span>, <span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">data</span> {
        <span style="color:#a6e22e">oneCounter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">oneCounter</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">i</span>]
    }
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">counter</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">oneCounter</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">data</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">oneCounter</span>]
        <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">counter</span>)
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">oneCounter</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 859</title><link>https://nathannaveen.dev/posts/leetcode-859/</link><pubDate>Thu, 22 Apr 2021 09:14:13 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-859/</guid><description>859. Buddy Strings
To check whether two strings are buddy strings we have to check whether:
len(a) == len(b) if a == b, and there is a duplicate letter in a if there are a[j] != b[j] and a[i] != b[i] and a[j] == b[i] and a[i] == b[j] func buddyStrings(a string, b string) bool { if len(a) != len(b) { return false } m := make(map[uint8]int) temp := -1 counter := 0 for i := 0; i &amp;lt; len(a); i++ { m[a[i]]++ if a == b &amp;amp;&amp;amp; m[a[i]] == 2 { return true } if a[i] !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/buddy-strings/">859. Buddy Strings</a></p>
<p>To check whether two strings are buddy strings we have to check whether:</p>
<ul>
<li><code>len(a) == len(b)</code></li>
<li>if <code>a == b</code>, and there is a duplicate letter in <code>a</code></li>
<li>if there are <code>a[j] != b[j]</code> and <code>a[i] != b[i]</code> and <code>a[j] == b[i]</code> and <code>a[i] == b[j]</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">buddyStrings</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">a</span>) <span style="color:#f92672">!=</span> len(<span style="color:#a6e22e">b</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
    }

    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">uint8</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">a</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]]<span style="color:#f92672">++</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
                <span style="color:#a6e22e">temp</span> = <span style="color:#a6e22e">i</span>
            } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">temp</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">||</span> <span style="color:#a6e22e">a</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">b</span>[<span style="color:#a6e22e">temp</span>] {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1176</title><link>https://nathannaveen.dev/posts/leetcode-1176/</link><pubDate>Mon, 19 Apr 2021 10:48:25 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1176/</guid><description>1176. Diet Plan Performance
This is how the code works:
We sum up the first k elements. Then compare whether sum is greater than upper or smaller than lower. After comparing we can loop from k to len(calories). Then we can take off the beggining of the subarray by subtracting calories[i - k]. And then we have to add the next element from the end of the subarray to the end to the subarray, we do this by adding calories[i].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/diet-plan-performance/">1176. Diet Plan Performance</a></p>
<p>This is how the code works:</p>
<ul>
<li>We sum up the first <code>k</code> elements.</li>
<li>Then compare whether sum is greater than upper or smaller than lower.</li>
<li>After comparing we can loop from <code>k</code> to <code>len(calories)</code>.</li>
<li>Then we can take off the beggining of the subarray by subtracting <code>calories[i - k]</code>. And then we have to add the next element from the end of the subarray to the end to the subarray, we do this by adding <code>calories[i]</code>. We can do <code>sum -= calories[i - k]</code>, and then <code>sum += calories[i]</code>, or we can simplify these two lines into one line, <code>sum -= calories[i - k] - calories[i]</code> or <code>sum += calories[i] - calories[i - k]</code>.</li>
<li>Then compare whether sum is greater than upper or smaller than lower.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">dietPlanPerformance</span>(<span style="color:#a6e22e">calories</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">lower</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">upper</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">calories</span>[<span style="color:#a6e22e">i</span>]
    }
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">comparison</span>(<span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">lower</span>, <span style="color:#a6e22e">upper</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">calories</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">calories</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">k</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">calories</span>[<span style="color:#a6e22e">i</span>]
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">comparison</span>(<span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">lower</span>, <span style="color:#a6e22e">upper</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">comparison</span>(<span style="color:#a6e22e">sum</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">lower</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">upper</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span> &lt; <span style="color:#a6e22e">lower</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span> &gt; <span style="color:#a6e22e">upper</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1323</title><link>https://nathannaveen.dev/posts/leetcode-1323/</link><pubDate>Mon, 19 Apr 2021 10:48:16 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1323/</guid><description>1323. Maximum 69 Number
This solution is pretty simple once you understand it.
The idea of this solution is since 9 - 6 = 3, so 6 + 3 = 9. When we add 3 * the current place value to 6 * the current place value we get 9 * the current place value. So if we do 60 + (3 * 10) = 90, 600 + (3 * 100) = 900, 6000 + (3 * 1000) = 9000.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-69-number/">1323. Maximum 69 Number</a></p>
<p>This solution is pretty simple once you understand it.</p>
<p><strong>The idea of this solution is</strong> since <code>9 - 6 = 3</code>, so <code>6 + 3 = 9</code>. When we add <code>3 * the current place value</code> to <code>6 * the current place value</code> we get <code>9 * the current place value</code>. So if we do <code>60 + (3 * 10) = 90</code>, <code>600 + (3 * 100) = 900, 6000 + (3 * 1000) = 9000</code>. Now we can apply this for the current problem. We are given the number <code>num</code>, so all we have to do is find the <code>6</code> with the greatest place value and then multiply it by <code>3</code>, and add <code>num</code> to the result. This can be shown with the expretion <code>(6 with the greatest place value * 3) + num</code>.</p>
<p><strong>The walk through this solution is:</strong></p>
<ul>
<li>We first loop while <code>temp &gt; 0</code>, <code>temp</code> is a temporary variable of <code>num</code></li>
<li>Then we check whether <code>temp % 10 == 6</code>, which checks whether the current digit starting from the <code>1</code>&rsquo;s digit is equal to <code>6</code>. If it is, we can make the <code>last6Position</code> similar to <code>placeValue</code> (<code>placeValue</code> has the pattern of <code>1, 10, 100, 1000...</code>)</li>
<li>Then we divide <code>temp</code> by <code>10</code> and multiply <code>placeValue</code> by <code>10</code>.</li>
<li>Then we can return <code>num + last6Position * 3</code>.</li>
</ul>
<p><strong>If you still don&rsquo;t understand look at the following example:</strong></p>
<p><code>num = 96966969</code>
<code>expected output = 99966969</code></p>
<p>What we can do:</p>
<ul>
<li><code>temp = 96966969, placeValue = 1</code>, <code>temp % 10 == 9</code> so continue, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 9696696, placeValue = 10</code>, <code>temp % 10 == 6</code> so <code>last6Position = 10</code>, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 969669, placeValue = 100</code>, <code>temp % 10 == 9</code> so continue, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 96966, placeValue = 1000</code>, <code>temp % 10 == 6</code> so <code>last6Position = 1000</code>, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 9696, placeValue = 10000</code>, <code>temp % 10 == 6</code> so <code>last6Position = 10000</code>, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 969, placeValue = 100000</code>, <code>temp % 10 == 9</code> so continue, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 96, placeValue = 1000000</code>, <code>temp % 10 == 6</code> so <code>last6Position = 1000000</code>, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp = 9, placeValue = 10000000</code>, <code>temp % 10 == 9</code> so continue, <code>temp /= 10, placeValue *= 10</code></li>
<li><code>temp &lt;= 0</code> so break out of loop.</li>
<li><code>num + (3 * 1000000) = num + 3000000 = 96966969 + 3000000 = 99966969</code>, return <code>99966969</code>.</li>
<li>our expected output equal our actual output so this works.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maximum69Number</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">temp</span>, <span style="color:#a6e22e">placeValue</span>, <span style="color:#a6e22e">last6Position</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">num</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">temp</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">6</span> {
            <span style="color:#a6e22e">last6Position</span> = <span style="color:#a6e22e">placeValue</span>
        }
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
        <span style="color:#a6e22e">placeValue</span> <span style="color:#f92672">*=</span> <span style="color:#ae81ff">10</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">last6Position</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 392</title><link>https://nathannaveen.dev/posts/leetcode-392/</link><pubDate>Mon, 19 Apr 2021 10:48:01 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-392/</guid><description>392. Is Subsequence
func isSubsequence(s string, t string) bool { sCounter, i := 0, 0 for i &amp;lt; len(t) &amp;amp;&amp;amp; sCounter &amp;lt; len(s) { if t[i] == s[sCounter] { sCounter++ } i++ } return sCounter == len(s) }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/is-subsequence/">392. Is Subsequence</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isSubsequence</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">t</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">sCounter</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">t</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">sCounter</span> &lt; len(<span style="color:#a6e22e">s</span>) {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">t</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">sCounter</span>] {
            <span style="color:#a6e22e">sCounter</span><span style="color:#f92672">++</span>
        }
        <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sCounter</span> <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">s</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 229</title><link>https://nathannaveen.dev/posts/leetcode-229/</link><pubDate>Sat, 17 Apr 2021 09:23:24 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-229/</guid><description>229. Majority Element II
This solution is pretty simple:
We loop through nums We add 1 to a map of integers called m, so we add 1 to m[num] where num is the current number in nums. Then we check whether m[num] == len(nums) / 3 + 1 this is checking whether the element is a majority element. Note: We can&amp;rsquo;t do m[num] &amp;gt;= len(nums) / 3 + 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/majority-element-ii/">229. Majority Element II</a></p>
<p>This solution is pretty simple:</p>
<ul>
<li>We loop through <code>nums</code></li>
<li>We add <code>1</code> to a map of integers called <code>m</code>, so we add <code>1</code> to <code>m[num]</code> where <code>num</code> is the current number in <code>nums</code>.</li>
<li>Then we check whether <code>m[num] == len(nums) / 3 + 1</code> this is checking whether the element is a majority element.</li>
</ul>
<p>Note: We can&rsquo;t do <code>m[num] &gt;= len(nums) / 3 + 1</code>. This can be shown with an example:</p>
<p>If we have the example <code>nums = [1, 2, 1, 1, 1]</code>, and we have the expected output of <code>res = [1]</code>, it won&rsquo;t work because we can:</p>
<ol>
<li>First add one to <code>m[1]</code> so <code>m = [1 : 1]</code></li>
<li>Then add one to <code>m[2]</code> so <code>m = [1 : 1, 2 : 1]</code></li>
<li>Then add one to <code>m[1]</code> so <code>m = [1 : 2, 2 : 1]</code>, since <code>5 / 3 == 1</code>, <code>m[1] = 2</code>, and <code>2 &gt; 1</code>. We can append <code>1</code> to <code>res</code>, so <code>res = [1]</code>.</li>
<li>Then add one to <code>m[1]</code> so <code>m = [1 : 3, 2 : 1]</code>, since <code>5 / 3 == 1</code>, <code>m[1] = 3</code>, and <code>3 &gt; 1</code>. We can append <code>1</code> to <code>res</code>, so <code>res = [1, 1]</code>.</li>
<li>Then add one to <code>m[1]</code> so <code>m = [1 : 4, 2 : 1]</code>, since <code>5 / 3 == 1</code>, <code>m[1] = 4</code>, and <code>4 &gt; 1</code>. We can append <code>1</code> to <code>res</code>, so <code>res = [1, 1, 1]</code>.</li>
</ol>
<p>Since <code>res = [1, 1, 1]</code> we can see how it is not the expected output of <code>res = [1]</code>.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">majorityElement</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>] <span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">num</span>]<span style="color:#f92672">++</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">num</span>] <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">nums</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">num</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1100</title><link>https://nathannaveen.dev/posts/leetcode-1100/</link><pubDate>Fri, 16 Apr 2021 10:48:46 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1100/</guid><description>1100. Find K-Length Substrings With No Repeated Characters
The Idea Of This Solution:
This solution aims to use a counter called counter to count the number of duplicates. Also, when counter == 0, the substring has no duplicates.
How This Solution Works:
First, we make the variables counter, res, and m. counter is the duplicate counter, res is the resulting number of substrings that have unique characters, and m is a map that is used to find out whether a character is a duplicate.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters/">1100. Find K-Length Substrings With No Repeated Characters</a></p>
<p><strong>The Idea Of This Solution:</strong></p>
<p>This solution aims to use a counter called <code>counter</code> to count the number of duplicates. Also, when <code>counter == 0</code>, the substring has no duplicates.</p>
<p><strong>How This Solution Works:</strong></p>
<ul>
<li>First, we make the variables <code>counter</code>, <code>res</code>, and <code>m</code>. <code>counter</code> is the duplicate counter, <code>res</code> is the resulting number of substrings that have unique characters, and <code>m</code> is a map that is used to find out whether a character is a duplicate.</li>
<li>Then we loop from <code>0</code> to <code>K - 1</code>.
<ul>
<li>Inside that loop, we add one to <code>m[S[i]]</code> (We are adding one to the character counter).</li>
<li>After adding one to <code>m[S[i]]</code> we can check whether <code>m[S[i]] == 2</code> (We are checking whether there is a duplicate). If <code>m[S[i]] == 2</code> we have to add one to <code>counter</code> because <code>counter</code> counts the number of duplicates.</li>
</ul>
</li>
<li>After we have done the first <code>K</code> elements, we can check whether <code>counter == 0</code>. If so, we can add one to <code>res</code>. If <code>counter == 0</code>, we know that there are no duplicates.</li>
<li>Then we can loop from <code>K</code> to <code>len(S)</code>.
<ul>
<li>Inside that loop, we remove the first element of the substring from <code>m</code>, and then we check whether <code>m[first letter of substring] == 1</code>. If so, we can subtract <code>1</code> from <code>counter</code> because when the frequency of a letter is <code>1</code>, we know that it is not a duplicate.</li>
<li>Next, we make the letter after the end of the substring the new end of the substring and add <code>1</code> to <code>m[S[i]]</code>. If <code>m[S[i]] == 2</code> we know that there is a duplicate so we add <code>1</code> to <code>counter</code>.</li>
<li>After adding and subtracting from <code>counter</code>, we can check whether <code>counter == 0</code>. We do this because if <code>counter == 0</code>, there are no duplicates. So if <code>counter == 0</code> we can add <code>1</code> to <code>res</code>.</li>
</ul>
</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numKLenSubstrNoRepeats</span>(<span style="color:#a6e22e">S</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">K</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">K</span> &gt; len(<span style="color:#a6e22e">S</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }
    <span style="color:#a6e22e">counter</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">uint8</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">K</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]]<span style="color:#f92672">++</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> { <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span> }
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> { <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span> }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">K</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">S</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#a6e22e">K</span>]]<span style="color:#f92672">--</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#a6e22e">K</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> { <span style="color:#a6e22e">counter</span><span style="color:#f92672">--</span> }

        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]]<span style="color:#f92672">++</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> { <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span> }

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {<span style="color:#a6e22e">res</span><span style="color:#f92672">++</span> }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>If You Don&rsquo;t Like The Top Solutions Format:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numKLenSubstrNoRepeats</span>(<span style="color:#a6e22e">S</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">K</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">K</span> &gt; len(<span style="color:#a6e22e">S</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }
    <span style="color:#a6e22e">counter</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">uint8</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">K</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]]<span style="color:#f92672">++</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        }
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">K</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">S</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#a6e22e">K</span>]]<span style="color:#f92672">--</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#a6e22e">K</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">--</span>
        }

        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]]<span style="color:#f92672">++</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">S</span>[<span style="color:#a6e22e">i</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        }

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1822</title><link>https://nathannaveen.dev/posts/leetcode-1822/</link><pubDate>Thu, 15 Apr 2021 09:40:17 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1822/</guid><description>1822. Sign of the Product of an Array
The idea of this solution is elementary:
If the current number in nums is negative, then we can flip the sign If the current number in nums is equal to 0, we can return 0 because any number multiplied by 0 is 0. You might think that we can check for if num == 0 after we have iterated, but that won&amp;rsquo;t work because we only switch the sign and don&amp;rsquo;t multiply by 0, so we will never know whether there is a 0 in the array.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sign-of-the-product-of-an-array/">1822. Sign of the Product of an Array</a></p>
<p>The idea of this solution is elementary:</p>
<ul>
<li>If the current number in <code>nums</code> is negative, then we can flip the sign</li>
<li>If the current number in <code>nums</code> is equal to <code>0</code>, we can return <code>0</code> because any number multiplied by <code>0</code> is <code>0</code>. You might think that we can check for <code>if num == 0</code> after we have iterated, but that won&rsquo;t work because we only switch the sign and don&rsquo;t multiply by <code>0</code>, so we will never know whether there is a <code>0</code> in the array.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arraySign</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sign</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">sign</span> = <span style="color:#f92672">-</span> <span style="color:#a6e22e">sign</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sign</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1800</title><link>https://nathannaveen.dev/posts/leetcode-1800/</link><pubDate>Thu, 15 Apr 2021 08:50:00 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1800/</guid><description>1800. Maximum Ascending Subarray Sum
The idea of this solution is pretty simple:
We need two variables, sum for the current sum of ascending values and maximum for the maximum sum. Then we loop through nums. Inside the loop, we check whether the current number is greater than the previous number. If so, we can add the number to sum. Else the number is smaller than or equal to the previous number, we can make maximum equal to the math.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-ascending-subarray-sum/">1800. Maximum Ascending Subarray Sum</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We need two variables, <code>sum</code> for the current sum of ascending values and <code>maximum</code> for the maximum sum.</li>
<li>Then we loop through <code>nums</code>.</li>
<li>Inside the loop, we check whether the current number is greater than the previous number. If so, we can add the number to <code>sum</code>.</li>
<li>Else the number is smaller than or equal to the previous number, we can make <code>maximum</code> equal to the <code>math.Max(maximum, sum)</code> and reset sum to the current number.</li>
<li>After we have looped through <code>nums</code> we can make <code>maximum</code> equal to <code>math.Max(maximum, sum)</code> again.</li>
<li>Now we can return <code>maximum.</code></li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxAscendingSum</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">0</span>]
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">0</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] {
            <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">sum</span> = 
            int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Max</span>(float64(<span style="color:#a6e22e">maximum</span>), float64(<span style="color:#a6e22e">sum</span>))), <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
        }
    }
    <span style="color:#a6e22e">maximum</span> = int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Max</span>(float64(<span style="color:#a6e22e">maximum</span>), float64(<span style="color:#a6e22e">sum</span>)))
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}
</code></pre></div><p><strong>Same Solution Without <code>math.Max()</code></strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxAscendingSum</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">0</span>]
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#ae81ff">0</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] {
            <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">sum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">sum</span>), <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
        }
    }
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">sum</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 119</title><link>https://nathannaveen.dev/posts/leetcode-119/</link><pubDate>Thu, 15 Apr 2021 08:49:51 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-119/</guid><description>119. Pascal&amp;rsquo;s Triangle II
I will explain the first solution.
If you want to understand the second solution click on the link above the code.
So the first solution only wants us to return the last row of the triangle.
Since we need two rows always for this problem the current row and the previous row. In this problem res is the current row and temp is the previous row.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/pascals-triangle-ii/">119. Pascal&rsquo;s Triangle II</a></p>
<p>I will explain the first solution.</p>
<p>If you want to understand the second solution click on the link above the code.</p>
<p>So the first solution only wants us to return the last row of the triangle.</p>
<p>Since we need two rows always for this problem the current row and the previous row. In this problem <code>res</code> is the current row and <code>temp</code> is the previous row.</p>
<p>Here is how the problem works</p>
<ul>
<li>We have <code>res[0]</code> equal to <code>1</code> so all we have to do is keep on appending <code>1</code> to <code>res</code> every time we iterate.</li>
<li>Then we have to loop through <code>res</code>&rsquo;s indexes starting at <code>1</code> and ending at <code>len(res) - 1</code> because we don&rsquo;t want to count the start and end <code>1</code>&rsquo;s.</li>
<li>Inside the nested for we can make <code>res[j] = temp[j-1] + temp[j]</code>. If you don&rsquo;t understand why this works look at the image bellow: <img src="https://i.imgur.com/vPafRCe.png" alt=""></li>
<li>After iterating through everything we can return <code>res</code>.</li>
</ul>
<p><strong>The Code:</strong> <em>This is the one that is 100%, 100%</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getRow</span>(<span style="color:#a6e22e">rowIndex</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">rowIndex</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">res</span>))
        copy(<span style="color:#a6e22e">temp</span>, <span style="color:#a6e22e">res</span>)
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">res</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">temp</span>[<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">temp</span>[<span style="color:#a6e22e">j</span>]
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>We could do somthing similar to what we did in <a href="https://nathannaveen.dev/posts/leetcode-118/">Leetcode 118</a> But it is a pretty brute force solution for this problem:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getRow</span>(<span style="color:#a6e22e">rowIndex</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">rowIndex</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
        <span style="color:#a6e22e">temp</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">temp</span>[len(<span style="color:#a6e22e">temp</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">temp</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">temp</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>]
        }
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">temp</span>)
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>[len(<span style="color:#a6e22e">res</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
}
</code></pre></div>]]></content></item><item><title>Leetcode 118</title><link>https://nathannaveen.dev/posts/leetcode-118/</link><pubDate>Wed, 14 Apr 2021 12:29:07 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-118/</guid><description>118. Pascal&amp;rsquo;s Triangle
The idea of this solution is pretty simple:
We first have a matrix array called res Then we loop through numRows While iterating through numRows we have to make an array called temp. It is going to be our current row. We make temp[0] and temp[len(temp)] equal to 1 so we get the outer 1&amp;rsquo;s. Then we loop through the middle elements (basically excluding the outside 1&amp;rsquo;s) We have to make every temp[j] equal to the previous rows previous rows[j - 1] + previous rows[j].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/pascals-triangle/">118. Pascal&rsquo;s Triangle</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We first have a matrix array called <code>res</code></li>
<li>Then we loop through <code>numRows</code></li>
<li>While iterating through <code>numRows</code> we have to make an array called <code>temp</code>. It is going to be our current row.</li>
<li>We make <code>temp[0]</code> and <code>temp[len(temp)]</code> equal to <code>1</code> so we get the outer <code>1</code>&rsquo;s.</li>
<li>Then we loop through the middle elements (basically excluding the outside <code>1</code>&rsquo;s)</li>
<li>We have to make every <code>temp[j]</code> equal to the previous rows <code>previous rows[j - 1] + previous rows[j]</code>. We do <code>j - 1</code> and <code>j</code>. If you don&rsquo;t understand, why look at the image below: <img src="https://i.imgur.com/KLtNp7P.png" alt=""></li>
<li>Then we append <code>temp</code> to <code>res</code></li>
<li>After iterating, we can return <code>res</code>.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generate</span>(<span style="color:#a6e22e">numRows</span> <span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">numRows</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
        <span style="color:#a6e22e">temp</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">temp</span>[len(<span style="color:#a6e22e">temp</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">temp</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">temp</span>[<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>]
        }
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">temp</span>)
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>We can Take Out Temp And Get:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generate</span>(<span style="color:#a6e22e">numRows</span> <span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">numRows</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, make([]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>))
        <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>][len(<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] = <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">res</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>]
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 56</title><link>https://nathannaveen.dev/posts/leetcode-56/</link><pubDate>Wed, 14 Apr 2021 09:58:31 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-56/</guid><description>func merge(intervals [][]int) [][]int { res := [][]int{} for i := 1; i &amp;lt; len(intervals); i++ { if i &amp;gt;= 1 &amp;amp;&amp;amp; intervals[i-1][0] &amp;gt; intervals[i][0] { intervals[i-1], intervals[i] = intervals[i], intervals[i-1] i -= 2 } } res = append(res, intervals[0]) for i := 1; i &amp;lt; len(intervals); i++ { if res[len(res)-1][1] &amp;gt;= intervals[i][0] { res[len(res)-1][1] = max(intervals[i][1], res[len(res)-1][1]) } else { res = append(res, intervals[i]) } } return res } func max(a, b int) int { if a &amp;gt; b { return a } return b }</description><content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">merge</span>(<span style="color:#a6e22e">intervals</span> [][]<span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">intervals</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] &gt; <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
            
            <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>] = 
            <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }
    <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">intervals</span>[<span style="color:#ae81ff">0</span>])
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">intervals</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">res</span>[len(<span style="color:#a6e22e">res</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
        
            <span style="color:#a6e22e">res</span>[len(<span style="color:#a6e22e">res</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] = 
            <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">res</span>[len(<span style="color:#a6e22e">res</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>])
            
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>])
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}

</code></pre></div>]]></content></item><item><title>Leetcode 824</title><link>https://nathannaveen.dev/posts/leetcode-824/</link><pubDate>Wed, 14 Apr 2021 09:58:25 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-824/</guid><description>824. Goat Latin
The idea of this solution is actualy pretty simple. We:
First add all the vowels to a map. We make a a string where we keep on appending &amp;quot;a&amp;quot; to it per word. Then we split S by spaces so we get all the words in an array called words. Then we loop through words. Inside the iteration we check whether the first letter of the current word is not a vowel we can move the first letter to the end.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/goat-latin/">824. Goat Latin</a></p>
<p>The idea of this solution is actualy pretty simple. We:</p>
<ul>
<li>First add all the vowels to a map. We make a <code>a</code> string where we keep on appending <code>&quot;a&quot;</code> to it per word. Then we split <code>S</code> by spaces so we get all the words in an array called <code>words</code>.</li>
<li>Then we loop through <code>words</code>.</li>
<li>Inside the iteration we check whether the first letter of the current word is not a vowel we can move the first letter to the end.</li>
<li>After checking whether it is a consonant we can add <code>&quot;ma&quot; + a</code> because we are supposed to add <code>&quot;ma&quot; + a</code> to a word that begins with a vowel or a consonant.</li>
<li>Then we add <code>&quot;a&quot;</code> to <code>a</code> because as the problem statment says &ldquo;Add one letter &lsquo;a&rsquo; to the end of each word per its word index in the sentence, starting with 1.&rdquo;</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">toGoatLatin</span>(<span style="color:#a6e22e">S</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">words</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">S</span>, <span style="color:#e6db74">&#34; &#34;</span>)
    <span style="color:#a6e22e">vowels</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">uint8</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;a&#34;</span>
    
    <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;a&#39;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;e&#39;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;i&#39;</span>] = <span style="color:#ae81ff">1</span>;
    <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;o&#39;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;u&#39;</span>] = <span style="color:#ae81ff">1</span>
    
    <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;A&#39;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;E&#39;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;I&#39;</span>] = <span style="color:#ae81ff">1</span>; 
    <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;O&#39;</span>] = <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">vowels</span>[<span style="color:#e6db74">&#39;U&#39;</span>] = <span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">words</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">vowels</span>[<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>:] <span style="color:#f92672">+</span> string(<span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>])
        }
        <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;ma&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span>
        <span style="color:#a6e22e">a</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;a&#34;</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">words</span>, <span style="color:#e6db74">&#34; &#34;</span>)
}
</code></pre></div>]]></content></item><item><title>Leetcode 252</title><link>https://nathannaveen.dev/posts/leetcode-252/</link><pubDate>Tue, 13 Apr 2021 10:11:45 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-252/</guid><description>252. Meeting Rooms
The Idea Of The Solutions:
The idea of these two solutions is pretty simple because the second solution is based on the first solution, and the first solution is pretty simple.
The idea of the first solution is:
First, we sort intervals. Then, we check whether the previous interval&amp;rsquo;s ends intersect with the following interval&amp;rsquo;s beginning. The idea of the second solution is:
While sorting, we check for overlaps.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/meeting-rooms/">252. Meeting Rooms</a></p>
<p><strong>The Idea Of The Solutions:</strong></p>
<p>The idea of these two solutions is pretty simple because the second solution is based on the first solution, and the first solution is pretty simple.</p>
<p>The idea of the first solution is:</p>
<ul>
<li>First, we sort <code>intervals</code>.</li>
<li>Then, we check whether the previous interval&rsquo;s ends intersect with the following interval&rsquo;s beginning.</li>
</ul>
<p>The idea of the second solution is:</p>
<ul>
<li>While sorting, we check for overlaps.</li>
</ul>
<p>As you can see, the ideas are pretty simple.</p>
<p><strong>How the Ideas Are Implemented:</strong></p>
<p>The sort for both solutions is pretty simple and are pretty similar. If you don&rsquo;t understand how they work, look at my explanation on how the sort works, <a href="https://nathannaveen.dev/posts/how-the-manual-sort-works/">How the Manual Sort Works</a> (Note: the sort won&rsquo;t be the same in the explanation but will be similar).</p>
<p>In the first solution, we loop through the indexes of <code>intervals</code> from <code>1</code> to <code>len(intervals - 1)</code>. Then the code checks whether the <code>intervals[i - 1]</code>&rsquo;s end is greater than <code>intervals[i]</code>&rsquo;s start. This is checking for an overlap. If so, we can return false.</p>
<p>For the second solution we check whether there is an overlap by doing: <code>if i &gt;= 1 &amp;&amp; intervals[i-1][0] &lt;= intervals[i][0] &amp;&amp; intervals[i-1][1] &gt; intervals[i][0] {</code>.</p>
<ul>
<li>The <code>i &gt;= 1</code> is for checking comparing the previous and current intervals.</li>
<li>The <code>intervals[i-1][0] &lt;= intervals[i][0]</code> is for checking that the current and previous positions are sorted.</li>
<li><code>intervals[i-1][1] &gt; intervals[i][0]</code> is for checking that the end of the previous interval is greater than the start of the current interval.</li>
<li>If all of that we can return <code>false</code>.</li>
</ul>
<p><strong>The First Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canAttendMeetings</span>(<span style="color:#a6e22e">intervals</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">intervals</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] &gt; <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
            <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>] =
            <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
            
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">intervals</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p><strong>The Second solution:</strong> (which combines the two for loops from the first solution)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canAttendMeetings</span>(<span style="color:#a6e22e">intervals</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">intervals</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] &gt; <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
            <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>] = 
            <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">intervals</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
        
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1551</title><link>https://nathannaveen.dev/posts/leetcode-1551/</link><pubDate>Sat, 10 Apr 2021 20:14:34 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1551/</guid><description>1551. Minimum Operations to Make Array Equal
This is a pretty simple solution once you understand the concept.
What the Problem Is Asking:
The problem gives us an array where arr[i] = (2 * i) + 1, you could make an array where every arr[i] = (2 * i) + 1 but I am just going to tell you that this plots a sequence of odd integers. Bascily arr[1, 3, 5 .</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-make-array-equal/">1551. Minimum Operations to Make Array Equal</a></p>
<p>This is a pretty simple solution once you understand the concept.</p>
<p><strong>What the Problem Is Asking:</strong></p>
<p>The problem gives us an array where <code>arr[i] = (2 * i) + 1</code>, you could make an array where every <code>arr[i] = (2 * i) + 1</code> but I am just going to tell you that this plots a sequence of odd integers. Bascily <code>arr[1, 3, 5 ... nth odd number]</code>.</p>
<p>Then the problem is telling us that we can pick two indexes, <code>x</code> and <code>y</code>. It is telling us that at every turn, we can add one to <code>arr[x]</code> and subtract one from <code>arr[y]</code> until all the elements in <code>arr</code> are equal.</p>
<p>The problem asks us to return the number of operations.</p>
<p><strong>The Idea Of This Solution:</strong></p>
<p>One thing that is key to this solution is all the numbers are odd and are sorted.</p>
<p>Since <code>arr</code> is sorted and all the values are odd, we can make <code>x</code> equal to a left pointer and <code>y</code> equal to a right pointer, and we can find the number that can make all the numbers matching.</p>
<p>We can take a couple examples of <code>[1, 3, 5, 7, 9]</code>, <code>[1, 3, 5, 7, 9, 11]</code>, and <code>[1, 3, 5]</code>:</p>
<ul>
<li>
<p><code>[1, 3, 5, 7, 9]</code></p>
<ul>
<li>
<p><code>1 + 1 = 2</code>, <code>9 - 1 = 8</code>, so our new numbers are <code>2, 8</code>
<code>2 + 1 = 3</code>, <code>8 - 1 = 7</code>, so our new numbers are <code>3, 7</code>
<code>3 + 1 = 4</code>, <code>7 - 1 = 6</code>, so our new numbers are <code>4, 6</code>
<code>4 + 1 = 5</code>, <code>6 - 1 = 5</code>, so our new numbers are <code>5, 5</code>. Since <code>5 == 5</code> we can continue to the next two numbers, basicly <code>x += 1</code> and <code>y -= 1</code>.</p>
</li>
<li>
<p><code>3 + 1 = 4</code>, <code>7 - 1 = 6</code>, so our new numbers are <code>4, 6</code>
<code>4 + 1 = 5</code>, <code>6 - 1 = 5</code>, so our new numbers are <code>5, 5</code>.</p>
</li>
</ul>
<p><strong>Foreshadowing:</strong> Remember that there have been <code>6</code> changes.</p>
</li>
<li>
<p><code>[1, 3, 5, 7, 9, 11]</code></p>
<ul>
<li>
<p><code>1 + 1 = 2</code>, <code>11 - 1 = 10</code>, so our new numbers are <code>2, 10</code>
<code>2 + 1 = 3</code>, <code>10 - 1 = 9</code>, so our new numbers are <code>3, 9</code>
<code>3 + 1 = 4</code>, <code>9 - 1 = 8</code>, so our new numbers are <code>4, 8</code>
<code>4 + 1 = 5</code>, <code>8 - 1 = 7</code>, so our new numbers are <code>5, 7</code>
<code>5 + 1 = 6</code>, <code>7 - 1 = 6</code>, so our new numbers are <code>6, 6</code>. Since <code>6 == 6</code> we can continue to the next two numbers, basicly <code>x += 1</code> and <code>y -= 1</code>.</p>
</li>
<li>
<p><code>3 + 1 = 4</code>, <code>9 - 1 = 8</code>, so our new numbers are <code>4, 8</code>
<code>4 + 1 = 5</code>, <code>8 - 1 = 7</code>, so our new numbers are <code>5, 7</code>
<code>5 + 1 = 6</code>, <code>7 - 1 = 6</code>, so our new numbers are <code>6, 6</code></p>
</li>
<li>
<p><code>5 + 1 = 6</code>, <code>7 - 1 = 6</code>, so our new numbers are <code>6, 6</code></p>
</li>
</ul>
<p><strong>Foreshadowing again:</strong> Remember that there have been <code>9</code> operations.</p>
</li>
<li>
<p><code>[1, 3, 5]</code></p>
<ul>
<li><code>1 + 1 = 2</code>, <code>5 - 1 = 4</code>, so our new numbers are <code>2, 4</code>
<code>2 + 1 = 3</code>, <code>4 - 1 = 3</code>, so our new numbers are <code>3, 3</code>.</li>
</ul>
<p><strong>Foreshadowing again:</strong> Remember that there have been <code>2</code> operations.</p>
</li>
</ul>
<p>When we were looking at <code>arr = [1, 3, 5, 7, 9, 11]</code> we saw that there were <code>9</code> operations, first <code>5</code> operations, then <code>3</code> operations, and then the last <code>1</code>. So if we line them up we can see that <code>5, 3, 1</code> is a sequence of consecutive odd numbers. Consecutive odd numbers can be summed up by using the expretion <code>n^2</code> where <code>n = the number of odd numbers</code>. Let us look at a couple examples:</p>
<ul>
<li><code>n = 3</code>, <code>3^2 = 9</code>, <code>9 = 1 + 3 + 5</code></li>
<li><code>n = 5</code>, <code>5^2 = 25</code>, <code>25 = 1 + 3 + 5 + 7 + 9</code></li>
<li><code>n = 1</code>, <code>1^2 = 1</code>, <code>1 = 1</code></li>
</ul>
<p>But if we try this out a couple more times, we can see that this only works with <code>n</code> being even.</p>
<p>So if <code>n</code> is odd what do we do? Well as we saw in the previous two examples: <code>arr = [1, 3, 5, 7, 9]</code> and <code>arr = [1, 3, 5]</code>. We saw that <code>arr = [1, 3, 5, 7, 9]</code> had <code>6</code> operations, first <code>4</code> operations and then <code>2</code> opperations. Next <code>arr = [1, 3, 5]</code> had <code>2</code> operations. When we put the operations for the first test case together we get <code>4, 2</code> and then when we put the second test case we see that we get <code>2</code>. Now we can see that <code>4, 2</code>, and <code>2</code> are consecutive even numbers. The way to sum up consecutive even numbers is to do <code>n(n + 1)</code> where <code>n = number of even numbers</code>. Here are some examples:</p>
<ul>
<li><code>n = 2</code>, <code>2(2 + 1) = 2(3) = 6</code>, <code>2 + 4 = 6</code></li>
<li><code>n = 3</code>, <code>3(3 + 1) = 3(4) = 12</code>, <code>2 + 4 + 6 = 12</code></li>
<li><code>n = 4</code>, <code>4(4 + 1) = 4(5) = 20</code>, <code>2 + 4 + 6 + 8 = 20</code></li>
</ul>
<p>Since we add one to <code>x</code> and subtract one from <code>y</code> we can do <code>n</code> where <code>n = len(arr) / 2</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minOperations</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">*</span> ((<span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>)
    }
}
</code></pre></div><p><strong>Using a little bit of bit manipulation:</strong> <em>I used <a href="https://leetcode.com/problems/minimum-operations-to-make-array-equal/discuss/1145082/Simple-O(1)-1-Liner-or-Easy-Solution-w-Explanation-or-Beats-100">archit91&rsquo;s solution</a> to get the idea of using bit manipulation</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minOperations</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
        <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> ((<span style="color:#a6e22e">n</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>)
    }
}
</code></pre></div>]]></content></item><item><title>Leetcode 1742</title><link>https://nathannaveen.dev/posts/leetcode-1742/</link><pubDate>Sat, 10 Apr 2021 09:44:53 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1742/</guid><description>1742. Maximum Number of Balls in a Box
The idea of this solution is pretty simple:
We use a map to store all the elements and their frequencies, and we use a variable called maximum to store the maximum frequency. We loop from lowLimit to highLimit. Inside the first loop, we make a nested loop to sum up all the digits of each number between lowLimit and highLimt. After we have got the sum, we do m[sum]++ because we have to add one to the frequency of sum.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-number-of-balls-in-a-box/">1742. Maximum Number of Balls in a Box</a></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>We use a map to store all the elements and their frequencies, and we use a variable called <code>maximum</code> to store the maximum frequency.</li>
<li>We loop from <code>lowLimit</code> to <code>highLimit</code>.</li>
<li>Inside the first loop, we make a nested loop to sum up all the digits of each number between <code>lowLimit</code> and <code>highLimt</code>.</li>
<li>After we have got the sum, we do <code>m[sum]++</code> because we have to add one to the frequency of <code>sum</code>.</li>
<li>Then we check whether the new frequency is greater than our old <code>maximum</code>. If so, we should make <code>maximum = m[sum]</code>.</li>
<li>Then we return <code>maximum</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countBalls</span>(<span style="color:#a6e22e">lowLimit</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">highLimit</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>), <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">lowLimit</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">highLimit</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span>, <span style="color:#ae81ff">0</span>

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> &gt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">n</span> = <span style="color:#a6e22e">sum</span><span style="color:#f92672">+</span>(<span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>), <span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>
        }
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">sum</span>]<span style="color:#f92672">++</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">sum</span>] &gt; <span style="color:#a6e22e">maximum</span> {
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">sum</span>]
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}
</code></pre></div><p><strong>Using A <code>max()</code> Function:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countBalls</span>(<span style="color:#a6e22e">lowLimit</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">highLimit</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>), <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">lowLimit</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">highLimit</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span>, <span style="color:#ae81ff">0</span>

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> &gt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">sum</span>, <span style="color:#a6e22e">n</span> = <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>), <span style="color:#a6e22e">n</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>
        }
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">sum</span>]<span style="color:#f92672">++</span>
        <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">sum</span>])
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1426</title><link>https://nathannaveen.dev/posts/leetcode-1426/</link><pubDate>Sat, 10 Apr 2021 09:44:48 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1426/</guid><description>1426. Counting Elements
This solution is straightforward, and the idea of this solution is we add all the values of arr into a map called m. All we do is check whether m contains arr[i] + 1. If it does, we can add one to the resulting counter.
So the code:
First, makes a map called m and a variable called res. Then we loop through arr and add all the values into m.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/counting-elements/">1426. Counting Elements</a></p>
<p>This solution is straightforward, and the idea of this solution is we add all the values of <code>arr</code> into a map called <code>m</code>. All we do is check whether <code>m</code> contains <code>arr[i] + 1</code>. If it does, we can add one to the resulting counter.</p>
<p>So the code:</p>
<ul>
<li>First, makes a map called <code>m</code> and a variable called <code>res</code>.</li>
<li>Then we loop through <code>arr</code> and add all the values into <code>m</code>.</li>
<li>Then we loop through <code>arr</code> again, but this time check whether <code>m</code> contains <code>arr[i] + 1</code>, and if it does, is it greater than <code>0</code>. If so, we can add one to <code>res</code>.</li>
<li>Now, all we have to do is return <code>res</code>.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">countElements</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] &gt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">res</span><span style="color:#f92672">++</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1071</title><link>https://nathannaveen.dev/posts/leetcode-1071/</link><pubDate>Fri, 09 Apr 2021 10:56:57 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1071/</guid><description>1071. Greatest Common Divisor of Strings
The idea of this solution is actually pretty simple. But before we go into the problem, we have to know that a string with a common factor has a prefix (the definition of a prefix is the beginning characters of a string, a prefix can be any length) that is repeated throughout the string. This can be shown using some examples:
&amp;quot;abcdabcdabcd&amp;quot; we know that the repeated substring is &amp;quot;abcd&amp;quot;, and we can see that &amp;quot;abcd&amp;quot; is a prefix.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/greatest-common-divisor-of-strings/">1071. Greatest Common Divisor of Strings
</a></p>
<p>The idea of this solution is actually pretty simple. But before we go into the problem, we have to know that a string with a common factor has a prefix (the definition of a prefix is the beginning characters of a string, a prefix can be any length) that is repeated throughout the string. This can be shown using some examples:</p>
<ul>
<li><code>&quot;abcdabcdabcd&quot;</code> we know that the repeated substring is <code>&quot;abcd&quot;</code>, and we can see that <code>&quot;abcd&quot;</code> is a prefix.</li>
<li><code>&quot;abcabcabcabc&quot;</code> we can see that <code>&quot;abc&quot;</code> is the repeated substring, and we can see that <code>&quot;abc&quot;</code> is the prefix.</li>
</ul>
<p>So the idea of this solution is:</p>
<ul>
<li>We loop through <code>str1</code> and <code>str2</code>.</li>
<li>Then we get the substring of <code>str1</code> and <code>str2</code> from <code>0</code> to <code>i</code>.</li>
<li>Then all we have to do is check whether the rest of the strings can be split up into prefixes. If it is, we can make the resulting string equal to the substring.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">gcdOfStrings</span>(<span style="color:#a6e22e">str1</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">str2</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Min</span>(float64(len(<span style="color:#a6e22e">str1</span>)),
    float64(len(<span style="color:#a6e22e">str2</span>)))); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
    
        <span style="color:#a6e22e">sub</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">str1</span>[:<span style="color:#a6e22e">i</span>]
        <span style="color:#a6e22e">sub2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">str2</span>[:<span style="color:#a6e22e">i</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sub</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">sub2</span> <span style="color:#f92672">&amp;&amp;</span> len(<span style="color:#a6e22e">str1</span>)<span style="color:#f92672">%</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> len(<span style="color:#a6e22e">str2</span>)<span style="color:#f92672">%</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">str1</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">str1</span>[<span style="color:#a6e22e">j</span>:<span style="color:#a6e22e">j</span><span style="color:#f92672">+</span><span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">sub</span> {
                    <span style="color:#a6e22e">h</span> = <span style="color:#66d9ef">false</span>
                    <span style="color:#66d9ef">break</span>
                }
            }
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">str2</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">str2</span>[<span style="color:#a6e22e">j</span>:<span style="color:#a6e22e">j</span><span style="color:#f92672">+</span><span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">sub</span> {
                    <span style="color:#a6e22e">h</span> = <span style="color:#66d9ef">false</span>
                    <span style="color:#66d9ef">break</span>
                }
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">h</span> {
                <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">sub</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

</code></pre></div><p><strong>Edited Vertion:</strong> <em>(Without the built in <code>math.Min()</code>)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">gcdOfStrings</span>(<span style="color:#a6e22e">str1</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">str2</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">min</span>(len(<span style="color:#a6e22e">str1</span>), len(<span style="color:#a6e22e">str2</span>)); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">sub</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">str1</span>[:<span style="color:#a6e22e">i</span>]
        <span style="color:#a6e22e">sub2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">str2</span>[:<span style="color:#a6e22e">i</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sub</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">sub2</span> <span style="color:#f92672">&amp;&amp;</span> len(<span style="color:#a6e22e">str1</span>)<span style="color:#f92672">%</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> len(<span style="color:#a6e22e">str2</span>)<span style="color:#f92672">%</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">str1</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">str1</span>[<span style="color:#a6e22e">j</span>:<span style="color:#a6e22e">j</span><span style="color:#f92672">+</span><span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">sub</span> {
                    <span style="color:#a6e22e">h</span> = <span style="color:#66d9ef">false</span>
                    <span style="color:#66d9ef">break</span>
                }
            }
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">str2</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">str2</span>[<span style="color:#a6e22e">j</span>:<span style="color:#a6e22e">j</span><span style="color:#f92672">+</span><span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">sub</span> {
                    <span style="color:#a6e22e">h</span> = <span style="color:#66d9ef">false</span>
                    <span style="color:#66d9ef">break</span>
                }
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">h</span> {
                <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">sub</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 892</title><link>https://nathannaveen.dev/posts/leetcode-892/</link><pubDate>Fri, 09 Apr 2021 10:56:50 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-892/</guid><description>892. Surface Area of 3D Shapes
The Idea Of This Solution:
This solution uses the fact that each stack of cubes surface area is the equation 2 + 4 * v. This works because each cube has 6 sides. This can be shown using some images:
We can see that each cube has 6 planes. There are 4 sides, 1 top, and 1 bottom.
Now, as we can see, there are 10 units of surface area while the other one only had 6, there are 8 sides, 1 top, and 1 bottom.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/surface-area-of-3d-shapes/">892. Surface Area of 3D Shapes</a></p>
<p><strong>The Idea Of This Solution:</strong></p>
<p>This solution uses the fact that each stack of cubes surface area is the equation <code>2 + 4 * v</code>. This works because each cube has <code>6</code> sides. This can be shown using some images:</p>
<p><img src="https://i.imgur.com/jVZR9I5.jpg" alt=""></p>
<blockquote>
<p>We can see that each cube has <code>6</code> planes. There are <code>4</code> sides, <code>1</code> top, and <code>1</code> bottom.</p>
</blockquote>
<p><img src="https://i.imgur.com/9Vt9RPI.jpg" alt=""></p>
<blockquote>
<p>Now, as we can see, there are <code>10</code> units of surface area while the other one only had <code>6</code>, there are <code>8</code> sides, <code>1</code> top, and <code>1</code> bottom.</p>
</blockquote>
<p><img src="https://i.imgur.com/8Adx4dO.jpg" alt=""></p>
<blockquote>
<p>This example is <code>3</code> cubes, and it has a surface area of <code>14</code> units. There are <code>12</code> side units, <code>1</code> top, and <code>1</code> bottom.</p>
</blockquote>
<p>As you can see in all three examples, there is always 1 top, one bottom, and four sides per cube, so we can write the equation <code>2 + 4 * v</code>, where <code>v</code> is the number of cubes. This equation will work for all stacks except for one with <code>v = 0</code>. This is because if we do this equation with <code>v = 0</code>, we get the output of <code>2</code>. After all, the code thinks that there is a top and a bottom, but we know that there is no top and no bottom on a stack of size <code>0</code>.</p>
<p>Now that we have got the total surface area, we have to subtract the overlapping part. Now you might be asking, what overlap? Just look at the following image:</p>
<p><img src="https://i.imgur.com/19n56ry.jpg" alt=""></p>
<blockquote>
<p>First, we can get the input of a stack of <code>4</code> and then a pile of <code>2</code> back to back, so we have to subtract the stack size <code>2</code>&rsquo;s one side from the stack of size <code>2</code> and the pile of size <code>4</code>. So basically, we are subtracting <code>2 * minimum(grid before, current grid)</code>.</p>
</blockquote>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">surfaceArea</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#75715e">// 2 + shape * 4 == area of each shape
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
                <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> {
                <span style="color:#a6e22e">res</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">j</span>], <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>])
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> {
                <span style="color:#a6e22e">res</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>])
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1272</title><link>https://nathannaveen.dev/posts/leetcode-1272/</link><pubDate>Wed, 07 Apr 2021 12:36:27 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1272/</guid><description>1272. Remove Interval
What This Code Is Doing:
We make a new resulting array and then loop through intervals.
What we need to know for the following if and else statements is when the code loops through intervals, we get interval per iteration. interval is in the format [start, end]. Also, the constraints say -10^9 &amp;lt;= start &amp;lt; end &amp;lt;= 10^9, so we can see that start and end are never on the exact same location and the start is always lesser than end.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-interval/">1272. Remove Interval</a></p>
<p><strong>What This Code Is Doing:</strong></p>
<p>We make a new resulting array and then loop through <code>intervals</code>.</p>
<p>What we need to know for the following if and else statements is when the code loops through <code>intervals</code>, we get <code>interval</code> per iteration. <code>interval</code> is in the format <code>[start, end]</code>. Also, the constraints say <code>-10^9 &lt;= start &lt; end &lt;= 10^9</code>, so we can see that <code>start</code> and <code>end</code> are never on the exact same location and the <code>start</code> is always lesser than <code>end</code>.</p>
<p>The if and else statments are as follows:</p>
<ul>
<li>
<p>When we do the if statment: <code>if interval[0] &lt; toBeRemoved[0] &amp;&amp; toBeRemoved[1] &lt; interval[1] {</code> we are checking whether the <code>start</code> of <code>interval</code> is smaller than the <code>start</code> of <code>toBeRemoved</code> and the <code>end</code> of <code>interval</code> is greater than the <code>end</code> of <code>toBeRemoved</code>, like in the following image: <img src="https://i.imgur.com/As6SkRK.jpg" alt=""> <em>(Note: <code>interval</code> is green and <code>toBeRemoved</code> is red)</em> The <code>start</code> of <code>interval</code> is smaller than the <code>start</code> of <code>toBeRemoved</code>, and the <code>end</code> of <code>interval</code> is greater than the <code>end</code> of <code>toBeRemoved</code>.</p>
</li>
<li>
<p>The first else if statment is <code>else if interval[0] &lt; toBeRemoved[0] &amp;&amp; interval[1] &gt; toBeRemoved[0] &amp;&amp; interval[1] &lt;= toBeRemoved[1] {</code>. It is for if the interception of <code>interval</code> and <code>toBeRemoved</code> is on the right of <code>toBeRemoved</code>, this can be shown with an image: <img src="https://i.imgur.com/r7HrHZa.jpg" alt=""> This is for if <code>interval</code>&rsquo;s <code>start</code> is smaller than <code>toBeRemoved</code>&rsquo;s <code>start</code>, <code>intervals</code>&rsquo;s <code>end</code> is smaller than <code>toBeRemoved</code>&rsquo;s <code>end</code>, and <code>interval</code>&rsquo;s <code>end</code> is greater than <code>toBeRemoved</code>&rsquo;s <code>start</code>.</p>
</li>
<li>
<p>The next else if is <code>else if interval[0] &gt;= toBeRemoved[0] &amp;&amp; interval[0] &lt; toBeRemoved[1] &amp;&amp; interval[1] &gt; toBeRemoved[1] {</code>. Is for the same thing as the first else if except it is on the other side of <code>toBeRemoved</code>. This can be shown using an image: <img src="https://i.imgur.com/YyTQdID.jpg" alt=""></p>
</li>
<li>
<p>The next else if is <code>else if interval[0] &gt;= toBeRemoved[0] &amp;&amp; interval[0] &lt; toBeRemoved[1] &amp;&amp; interval[1] &lt;= toBeRemoved[1] &amp;&amp; interval[1] &gt; toBeRemoved[0] {</code>. This is for if the <code>start</code> of <code>interval</code> is greater than the <code>start</code> of <code>toBeRemoved</code> and the <code>end</code> of <code>interval</code> is smaller than <code>end</code> of <code>toBeRemoved</code>. This can be shown using an image: <img src="https://i.imgur.com/Jm3W1S8.jpg" alt=""></p>
</li>
<li>
<p>And last but not least our else. This is for if there is no overlap of <code>interval</code> and <code>toBeRemoved</code>. This can be shown using an image: <img src="https://i.imgur.com/2PsNVdQ.jpg" alt=""></p>
</li>
</ul>
<p>That is all there is to the code, thank you for reading.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeInterval</span>(<span style="color:#a6e22e">intervals</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">toBeRemoved</span> []<span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">interval</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">intervals</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>] &lt; <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>] {
        
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>]}, 
            []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>]})
            
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>]
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>] {
        
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>]})
            
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>]
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>] {
        
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>]})
            
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>]
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">interval</span>[<span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">toBeRemoved</span>[<span style="color:#ae81ff">0</span>] {
        
            <span style="color:#66d9ef">continue</span>
            
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">interval</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 874</title><link>https://nathannaveen.dev/posts/leetcode-874/</link><pubDate>Wed, 07 Apr 2021 12:36:17 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-874/</guid><description>874. Walking Robot Simulation
Warning: This solution is pretty annoying.
What The Problem is Telling Us:
The problem description says that they will give an array called commands that tell you to turn right, left, or move forward, and they will also give you a matrix array called obstacles. obstacles is pretty self-explanatory. It is points where an obstacle is at. The points are in the format of (x, y).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/walking-robot-simulation/">874. Walking Robot Simulation</a></p>
<p>Warning: This solution is pretty annoying.</p>
<p><strong>What The Problem is Telling Us:</strong></p>
<p>The problem description says that they will give an array called <code>commands</code> that tell you to turn right, left, or move forward, and they will also give you a matrix array called <code>obstacles</code>. <code>obstacles</code> is pretty self-explanatory. It is points where an obstacle is at. The points are in the format of <code>(x, y)</code>.</p>
<p>There are three types of commands in <code>commands</code>:</p>
<ul>
<li>-1 is to turn right 90 degrees</li>
<li>-2 is to turn left 90 degrees (Or just -90 degrees)</li>
<li>And numbers from 1 to 9. This is how many units to move by.</li>
</ul>
<p>If the robot hits an obstacle while in mid-journey, the robot stops at the step before the barrier and continues on with the rest of the commands.</p>
<p><strong>The Idea of This Code:</strong></p>
<p>The idea of this code is pretty simple:</p>
<ol>
<li>First, we make some variables called:
<ul>
<li><code>maximum</code> is for the maximum Euclidean distance squared</li>
<li><code>direction</code> is for what direction we are going such as <code>0 = north, 1 = east, 2 = south, 3 = west, 4 = north, 5 = east, 6 = south, 7 = west ...</code></li>
<li><code>x, y</code> are for storing the current x value and the current y value</li>
</ul>
</li>
<li>Then, we loop through <code>commands</code>.</li>
<li>We check whether the current command, which we call <code>command</code> (save <code>command</code> for future reference) is <code>-1</code>. If so, we need to add one to <code>direction</code> so in example if we are pointing north, we will now be pointing east.</li>
<li>Else if <code>command</code> is <code>-2</code> we add <code>3</code> to <code>direction</code>. You might be wondering why we add <code>3</code> instead of subtracting <code>1</code>, it is because <code>4 - 1 = 3</code> and since when <code>direction = 0</code> it is <code>north</code>, when <code>direction = 4</code> it is when <code>north</code>, <code>direction = 8</code> it is <code>north</code>, and so on. Since <code>direction</code> just keeps on going on and is never negative, we add <code>3</code> to solve some problems.</li>
<li>Now else, if it is not <code>-1</code> or <code>-2</code>, we can loop through all the obstacles to see whether our robot has hit any.
<ul>
<li>First, we can start we are facing north, and there is an obstacle in the way</li>
<li>Next, we can do where the robot is facing east, and there is an obstacle in its path</li>
<li>Next, we can do the test case where the robot is facing south, and there is an obstacle in its path</li>
<li>Next, if we are facing west and there is an obstacle in its path</li>
<li>Last but not least, if the robot does not hit any obstacles.</li>
</ul>
</li>
</ol>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">robotSim</span>(<span style="color:#a6e22e">commands</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">obstacles</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">direction</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">command</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">commands</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">command</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> { <span style="color:#75715e">// Turn right
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">direction</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">command</span> <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span> { <span style="color:#75715e">// Turn left
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">direction</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">hitObsticle</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">obstacle</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">obstacles</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span>
                <span style="color:#a6e22e">y</span> &lt; <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y</span><span style="color:#f92672">+</span><span style="color:#a6e22e">command</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] { 
                
                    <span style="color:#75715e">// North
</span><span style="color:#75715e"></span>                    <span style="color:#a6e22e">hitObsticle</span> = <span style="color:#66d9ef">true</span>
                    <span style="color:#a6e22e">y</span> = <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
                    
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x</span> &lt; <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span>
                <span style="color:#a6e22e">y</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x</span><span style="color:#f92672">+</span><span style="color:#a6e22e">command</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] { 
                    
                    <span style="color:#75715e">// East
</span><span style="color:#75715e"></span>                    <span style="color:#a6e22e">hitObsticle</span> = <span style="color:#66d9ef">true</span>
                    <span style="color:#a6e22e">x</span> = <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
                    
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span>
                <span style="color:#a6e22e">y</span> &gt; <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y</span><span style="color:#f92672">-</span><span style="color:#a6e22e">command</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] { 
                
                    <span style="color:#75715e">// South
</span><span style="color:#75715e"></span>                    <span style="color:#a6e22e">hitObsticle</span> = <span style="color:#66d9ef">true</span>
                    <span style="color:#a6e22e">y</span> = <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
                    
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x</span> &gt; <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;&amp;</span>
                <span style="color:#a6e22e">y</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x</span><span style="color:#f92672">-</span><span style="color:#a6e22e">command</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] { 
                    
                    <span style="color:#75715e">// West
</span><span style="color:#75715e"></span>                    <span style="color:#a6e22e">hitObsticle</span> = <span style="color:#66d9ef">true</span>
                    <span style="color:#a6e22e">x</span> = <span style="color:#a6e22e">obstacle</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
                }
            }

            <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">hitObsticle</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
                    <span style="color:#a6e22e">y</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">command</span>
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
                    <span style="color:#a6e22e">x</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">command</span>
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">direction</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
                    <span style="color:#a6e22e">y</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">command</span>
                } <span style="color:#66d9ef">else</span> {
                    <span style="color:#a6e22e">x</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">command</span>
                }
            }
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">x</span>)<span style="color:#f92672">*</span><span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">x</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">y</span>)<span style="color:#f92672">*</span><span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">y</span>))

        }

    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">maximum</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1475</title><link>https://nathannaveen.dev/posts/leetcode-1475/</link><pubDate>Tue, 06 Apr 2021 09:57:29 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1475/</guid><description>1475. Final Prices With a Special Discount in a Shop
This solution is pretty simple just loop through prices and then find the first price smaller than the current one. After that, remake prices[i] the current price minus the minimum.
The Code:
func finalPrices(prices []int) []int { for i, price := range prices { minimum := 1001 for j := i + 1; j &amp;lt; len(prices); j++ { if prices[j] &amp;lt;= price { minimum = prices[j] break } } if minimum !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/">1475. Final Prices With a Special Discount in a Shop</a></p>
<p>This solution is pretty simple just loop through <code>prices</code> and then find the first price smaller than the current one. After that, remake <code>prices[i]</code> the current price minus the minimum.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">finalPrices</span>(<span style="color:#a6e22e">prices</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">price</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">prices</span> {
        <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1001</span>

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">prices</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">prices</span>[<span style="color:#a6e22e">j</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">price</span> {
                <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">prices</span>[<span style="color:#a6e22e">j</span>]
                <span style="color:#66d9ef">break</span>
            }
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1001</span> {
            <span style="color:#a6e22e">prices</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">price</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">minimum</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">prices</span>
}
</code></pre></div><p><strong>Solution With A Little Better Time:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">finalPrices</span>(<span style="color:#a6e22e">prices</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">minimumIndex</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1001</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">price</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">prices</span> {
        <span style="color:#a6e22e">hasMinimum</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">minimumIndex</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">i</span> {
            <span style="color:#a6e22e">hasMinimum</span> = <span style="color:#66d9ef">false</span>
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">prices</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">prices</span>[<span style="color:#a6e22e">j</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">price</span> {
                    <span style="color:#a6e22e">hasMinimum</span> = <span style="color:#66d9ef">true</span>
                    <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">prices</span>[<span style="color:#a6e22e">j</span>]
                    <span style="color:#66d9ef">break</span>
                }
            }
        }

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">hasMinimum</span> {
            <span style="color:#a6e22e">prices</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">price</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">minimum</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">prices</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 633</title><link>https://nathannaveen.dev/posts/leetcode-633/</link><pubDate>Mon, 05 Apr 2021 12:24:12 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-633/</guid><description>633. Sum of Square Numbers
Both solutions use the simple knowledge of:
If c = a^2 + b^2 then b^2 = c - a^2 and a^2 = c - b^2.
The Idea of the First Solution:
The idea of this solution is pretty simple since we know that a^2 = c - b^2 we can store a^2 in a map called m, and then we check whether m contains c - b^2.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-square-numbers/">633. Sum of Square Numbers</a></p>
<p>Both solutions use the simple knowledge of:</p>
<p>If <code>c = a^2 + b^2</code> then <code>b^2 = c - a^2</code> and <code>a^2 = c - b^2</code>.</p>
<p><strong>The Idea of the First Solution:</strong></p>
<p>The idea of this solution is pretty simple since we know that <code>a^2 = c - b^2</code> we can store <code>a^2</code> in a map called <code>m</code>, and then we check whether <code>m</code> contains <code>c - b^2</code>. If <code>m</code> contains <code>c - b^2</code>, we can return <code>true</code> because we know that two squared numbers add up to <code>c</code>.</p>
<p><strong>The Idea of the Second Solution:</strong></p>
<p>The idea of this solution is also straightforward and is based on <code>a^2 = c - b^2</code>. This solution iterates from <code>0</code> to the square root of <code>c</code>. We know that <code>i * i == a^2</code>, so we know that if <code>c - b^2</code> is a square, we can return true.</p>
<p>We can check whether it is a square by checking if the <code>int(sqrt(float64(n)))^2 == n</code>. This works because if when we do <code>sqrt(n)</code> we get a <code>float64</code>. If you don&rsquo;t understand look at the following two examples:</p>
<p><code>sqrt(13) = 3.605551</code> and <code>sqrt(4) = 2.000000</code>.</p>
<p>When we make both integers we get <code>int(sqrt(13)) = 3</code> and <code>int(sqrt(4)) = 2</code>. <code>3^2 = 9</code>, <code>3^2 != 13</code> so we know that there is no integer square root of <code>13</code>, but when we do <code>2^2 = 4</code> we know that there is an integer square root of <code>4</code>.</p>
<p><strong>The First Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">judgeSquareSum</span>(<span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">*</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">c</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">squaredValue</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">i</span>
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">squaredValue</span>] = <span style="color:#ae81ff">1</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">c</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">squaredValue</span>]; <span style="color:#a6e22e">ok</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div><p><strong>The Second Solution:</strong> <em>(The solution that is faster than 100%)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">judgeSquareSum</span>(<span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">*</span><span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">c</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">isSquare</span>(<span style="color:#a6e22e">c</span> <span style="color:#f92672">-</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">i</span>)) {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isSquare</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">squareRooted</span> <span style="color:#f92672">:=</span> int(<span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Sqrt</span>(float64(<span style="color:#a6e22e">n</span>)))
    
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">squareRooted</span><span style="color:#f92672">*</span><span style="color:#a6e22e">squareRooted</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1465</title><link>https://nathannaveen.dev/posts/leetcode-1465/</link><pubDate>Mon, 05 Apr 2021 12:23:52 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1465/</guid><description>1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts
What The Problem Is Asking:
The problem is telling us that there are cuts in a rectangular cake of width w and height h. The cuts are only horizontal and vertical.
The problem wants us to find the largest slice of cake.
The Main Idea of This Solution:
We can find the maximum area slice by finding the maximum vertical length between each horizontal portion and the maximum horizontal length between each slice and then multiplying them together to get the maximum area.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/">1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts</a></p>
<p><strong>What The Problem Is Asking:</strong></p>
<p>The problem is telling us that there are cuts in a rectangular cake of width <code>w</code> and height <code>h</code>. The cuts are only horizontal and vertical.</p>
<p>The problem wants us to find the largest slice of cake.</p>
<p><strong>The Main Idea of This Solution:</strong></p>
<p>We can find the maximum area slice by finding the maximum vertical length between each horizontal portion and the maximum horizontal length between each slice and then multiplying them together to get the maximum area.</p>
<p>We might have some edge cases of the maximum slice is on the edge of the cake. An example can be shown with the following image:</p>
<p><img src="https://i.imgur.com/oPk3uzd.jpg" alt=""></p>
<blockquote>
<p>In this image, the max slice is the distance from a cut to the edge of the cake. It is not between two cuts but between a cut and the edge of the cake.</p>
</blockquote>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">maxArea</span>(<span style="color:#a6e22e">h</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">w</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">horizontalCuts</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">verticalCuts</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">horizontalCuts</span>)
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">verticalCuts</span>)

    <span style="color:#a6e22e">maxX</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">h</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">horizontalCuts</span>[len(<span style="color:#a6e22e">horizontalCuts</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>],
    <span style="color:#a6e22e">horizontalCuts</span>[<span style="color:#ae81ff">0</span>])
    
    <span style="color:#a6e22e">maxY</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">w</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">verticalCuts</span>[len(<span style="color:#a6e22e">verticalCuts</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>],
    <span style="color:#a6e22e">verticalCuts</span>[<span style="color:#ae81ff">0</span>])

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">horizontalCuts</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">maxX</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maxX</span>, <span style="color:#a6e22e">horizontalCuts</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#a6e22e">horizontalCuts</span>[<span style="color:#a6e22e">i</span>])
    }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">verticalCuts</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">maxY</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maxY</span>, <span style="color:#a6e22e">verticalCuts</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#a6e22e">verticalCuts</span>[<span style="color:#a6e22e">i</span>])
    }
    
    <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">maxX</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">maxY</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">1000000007</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 658</title><link>https://nathannaveen.dev/posts/leetcode-658/</link><pubDate>Sun, 04 Apr 2021 16:47:26 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-658/</guid><description>658. Find K Closest Elements
What The Problem Is Asking:
The problem asks us to find the k closest elements in an array to the value x. We find the distance between elements by doing |value - x| and the k elements with the smallest distances.
The Main Idea Of This Solution:
Since we have to find the k closest elements, we can sort the array from the smallest distance to the greatest distance.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-k-closest-elements/">658. Find K Closest Elements</a></p>
<p><strong>What The Problem Is Asking:</strong></p>
<p>The problem asks us to find the <code>k</code> closest elements in an array to the value <code>x</code>. We find the distance between elements by doing <code>|value - x|</code> and the <code>k</code> elements with the smallest distances.</p>
<p><strong>The Main Idea Of This Solution:</strong></p>
<p>Since we have to find the <code>k</code> closest elements, we can sort the array from the smallest distance to the greatest distance. After we have done that, we can get the smallest <code>k</code> elements by getting the first <code>k</code> elements of <code>arr</code>. The problem wants us to return the smallest <code>k</code> elements in a sorted array so we can sort the first <code>k</code> elements of <code>arr</code>.</p>
<p>The manual sort can be similarly explained with this post: <a href="https://nathannaveen.dev/posts/how-the-manual-sort-works/">How the Manual Sort Works</a>.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findClosestElements</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#a6e22e">x</span>) &gt; <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">-</span><span style="color:#a6e22e">x</span>) {
            <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }
    <span style="color:#a6e22e">arr</span> = <span style="color:#a6e22e">arr</span>[:<span style="color:#a6e22e">k</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>How the Manual Sort Works</title><link>https://nathannaveen.dev/posts/how-the-manual-sort-works/</link><pubDate>Sun, 04 Apr 2021 16:40:14 -0500</pubDate><guid>https://nathannaveen.dev/posts/how-the-manual-sort-works/</guid><description>The idea of this is pretty simple:
We check whether the previous number is greater than the current number. If it is switch the two values in the array around and subtract two from i (i = The current position). After that we subtract 2 from i because we want to go back by one position. We subtract 2 to go back 1 because we add one to i in the for loop.</description><content type="html"><![CDATA[<p>The idea of this is pretty simple:</p>
<p>We check whether the previous number is greater than the current number. If it is switch the two values in the array around and subtract two from <code>i</code> (<code>i = The current position</code>). After that we subtract <code>2</code> from <code>i</code> because we want to go back by one position. We subtract <code>2</code> to go back <code>1</code> because we add one to <code>i</code> in the for loop. We keep on doing this and we get <code>arr</code> sorted.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] {
        <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
    }
}
</code></pre></div><p><strong>An Edited Vertion:</strong> <em>(If you don&rsquo;t understand the <code>i -= 2</code> part look at the following vertion)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>

<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>) {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] {
        <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>
    }
}
</code></pre></div>]]></content></item><item><title>Leetcode 734</title><link>https://nathannaveen.dev/posts/leetcode-734/</link><pubDate>Fri, 02 Apr 2021 13:08:17 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-734/</guid><description>734. Sentence Similarity
The idea of this solution is to:
We have to first check whether the lengths of the two sentences are the same. If they aren&amp;rsquo;t, we return false. Then we have to make a map called m. The map is in a format of string, []string where string is the key and []string is the value. We add all the values from the matrix array called similarPairs to m.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sentence-similarity/">734. Sentence Similarity</a></p>
<p>The idea of this solution is to:</p>
<ul>
<li>We have to first check whether the lengths of the two sentences are the same. If they aren&rsquo;t, we return <code>false</code>.</li>
<li>Then we have to make a map called <code>m</code>. The map is in a format of <code>string, []string</code> where <code>string</code> is the <code>key</code> and <code>[]string</code> is the value.</li>
<li>We add all the values from the matrix array called <code>similarPairs</code> to <code>m</code>.</li>
<li>After we have added all the values from <code>similarPairs</code> to <code>m</code>, we can loop through sentence 1 and 2 and check whether <code>m[sentence1[i]]</code> contains <code>sentence2[i]</code>, if it doesn&rsquo;t and the two words are not similar we have to return <code>false</code>.</li>
<li>After we have looped through, we can return true because then we know that the sentences are similar.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">areSentencesSimilar</span>(<span style="color:#a6e22e">sentence1</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">sentence2</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">similarPairs</span> [][]<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">sentence1</span>) <span style="color:#f92672">!=</span> len(<span style="color:#a6e22e">sentence2</span>) { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }

    <span style="color:#a6e22e">length</span>, <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">sentence1</span>), make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>][]<span style="color:#66d9ef">string</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">pair</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">similarPairs</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">0</span>]], <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">1</span>]] = append(<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">0</span>]], <span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">1</span>]), 
        append(<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">1</span>]], <span style="color:#a6e22e">pair</span>[<span style="color:#ae81ff">0</span>])
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">arrayContains</span>(<span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">sentence1</span>[<span style="color:#a6e22e">i</span>]], <span style="color:#a6e22e">sentence2</span>[<span style="color:#a6e22e">i</span>]) <span style="color:#f92672">&amp;&amp;</span>
        <span style="color:#a6e22e">sentence1</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">sentence2</span>[<span style="color:#a6e22e">i</span>] { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arrayContains</span>(<span style="color:#a6e22e">h</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">h</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span> }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1118</title><link>https://nathannaveen.dev/posts/leetcode-1118/</link><pubDate>Thu, 01 Apr 2021 13:15:33 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1118/</guid><description>1118. Number of Days in a Month
To start, I wouldn&amp;rsquo;t say that this is a good interview problem because it is not an algorithmic problem.
The months and the number of days in each month can be shown in the table below:
In February, it can be either 28 days or 29 days. 28 days in a regular year and 29 days in a leap year.
We can see that if the month is January, March, May, July, August, October, December, we return 31 days.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-days-in-a-month/">1118. Number of Days in a Month</a></p>
<p>To start, I wouldn&rsquo;t say that this is a good interview problem because it is not an algorithmic problem.</p>
<p>The months and the number of days in each month can be shown in the table below:</p>
<p><img src="https://i.imgur.com/cBmSB5Y.jpg" alt=""></p>
<blockquote>
<p>In February, it can be either <code>28</code> days or <code>29</code> days. <code>28</code> days in a regular year and <code>29</code> days in a leap year.</p>
</blockquote>
<p>We can see that if the month is <code>January, March, May, July, August, October, December</code>, we return <code>31</code> days.</p>
<p>Otherwise, if the month is not <code>February</code>, we can return <code>30</code> days.</p>
<p>Otherwise, if it is a leap year and it is <code>February</code>, we know that we can return <code>29</code>.</p>
<p>Else we know that it is not a leap year and it is <code>February we can return </code>28`.</p>
<p><strong>First Version:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numberOfDays</span>(<span style="color:#a6e22e">Y</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">M</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">||</span> 
    <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">7</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">12</span> { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">31</span> }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">30</span> }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">Y</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">Y</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">Y</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">400</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">29</span> }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">28</span>
</code></pre></div><p><strong>Edited First Vertion:</strong> <em>()</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numberOfDays</span>(<span style="color:#a6e22e">Y</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">M</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">M</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">7</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">||</span> (<span style="color:#a6e22e">M</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">31</span> }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">M</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">30</span> }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">Y</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">Y</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">Y</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">400</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) { <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">29</span> }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">28</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1708</title><link>https://nathannaveen.dev/posts/leetcode-1708/</link><pubDate>Thu, 01 Apr 2021 11:53:48 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1708/</guid><description>1708. Largest Subarray Length K
The idea of this solution is pretty simple we get every subarray so length k. We get the max subarray, compare it with the current subarray, and then check which array is greater, the current subarray, or the maximum subarray.
We compare subarrays by looping through the length of the subarrays (They are both have the same size). Every time we iterate, we check whether the index of the current subarray is greater than the index of the max subarray and the opposite.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/largest-subarray-length-k/">1708. Largest Subarray Length K</a></p>
<p>The idea of this solution is pretty simple we get every subarray so length <code>k</code>. We get the max subarray, compare it with the current subarray, and then check which array is greater, the current subarray, or the maximum subarray.</p>
<p>We compare subarrays by looping through the length of the subarrays (They are both have the same size). Every time we iterate, we check whether the index of the current subarray is greater than the index of the max subarray and the opposite.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">largestSubarray</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> = <span style="color:#a6e22e">whichArrayIsGreater</span>(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> : <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">k</span>])
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">whichArrayIsGreater</span>(<span style="color:#a6e22e">one</span>, <span style="color:#a6e22e">two</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">one</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">one</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">two</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">one</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">one</span>[<span style="color:#a6e22e">i</span>] &lt; <span style="color:#a6e22e">two</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">two</span>
        }
    }
    <span style="color:#66d9ef">return</span> []<span style="color:#66d9ef">int</span>{}
}
</code></pre></div>]]></content></item><item><title>Leetcode 246</title><link>https://nathannaveen.dev/posts/leetcode-246/</link><pubDate>Thu, 01 Apr 2021 10:34:39 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-246/</guid><description>246. Strobogrammatic Number
This solution is pretty simple and pretty similar to Leetcode 163.
The problem asks us to flip a number by 180 degrees and then return true if the fliped number is equal to the non-fliped number.
You might think that just flipping every digit and then check whether the following fliped number is equal to the non fliped number, but there is a problem with just flipping. Here is an example to show that just flipping doesn&amp;rsquo;t work:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/strobogrammatic-number/">246. Strobogrammatic Number</a></p>
<p>This solution is pretty simple and pretty similar to <a href="https://nathannaveen.dev/posts/leetcode-163/">Leetcode 163</a>.</p>
<p>The problem asks us to flip a number by 180 degrees and then return true if the fliped number is equal to the non-fliped number.</p>
<p>You might think that just flipping every digit and then check whether the following fliped number is equal to the non fliped number, but there is a problem with just flipping. Here is an example to show that just flipping doesn&rsquo;t work:</p>
<p><code>input: &quot;69&quot;</code>
<code>expected output: true.</code></p>
<p>If we flip every digit, we get <code>6</code> converts to <code>9</code> and <code>9</code> flips to <code>6</code>, so we get <code>96</code>. When we compare <code>96 == 69</code>, we have to return false even though we want it to output <code>true</code>.</p>
<p>But if we reverse the fliped string and then compare it with the original string, we get the proper output. This can be shown with some images:</p>
<p><img src="https://i.imgur.com/YAXBBOI.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isStrobogrammatic</span>(<span style="color:#a6e22e">num</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">num</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#a6e22e">lastDigit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">num</span>[<span style="color:#a6e22e">i</span>]
        <span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">lastDigit</span> {
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;0&#39;</span>:
            <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;0&#34;</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;1&#39;</span>:
            <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;1&#34;</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;6&#39;</span>:
            <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;9&#34;</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;8&#39;</span>:
            <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;8&#34;</span>
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;9&#39;</span>:
            <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;6&#34;</span>
        <span style="color:#66d9ef">default</span>:
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">newNumber</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">num</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1427</title><link>https://nathannaveen.dev/posts/leetcode-1427/</link><pubDate>Tue, 30 Mar 2021 13:23:55 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1427/</guid><description>1427. Perform String Shifts
The idea of this solution is pretty simple.
Since there are only two directions, we can shift the strings in one direction. The reason we can shift in only one direction is when the input tells us to shift
First left and then right: The right might cancel out the left and will end up with no shift. The right might be greater than the left, so we shift right.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/perform-string-shifts/">1427. Perform String Shifts</a></p>
<p>The idea of this solution is pretty simple.</p>
<ul>
<li>
<p>Since there are only two directions, we can shift the strings in one direction. The reason we can shift in only one direction is when the input tells us to shift</p>
<ul>
<li>First left and then right:
<ul>
<li>The right might cancel out the left and will end up with no shift.</li>
<li>The right might be greater than the left, so we shift right.</li>
<li>The left might be greater than the right, so we shift left.</li>
</ul>
</li>
<li>First right then left:
<ul>
<li>The left might be equal to the right, so it will cancel both of them out, and we won&rsquo;t shift.</li>
<li>The left might be greater than the right, so we shift left.</li>
<li>The left might be smaller than the right, so we shift right.</li>
</ul>
</li>
<li>First left then another left:
<ul>
<li>We can only go left because there is no right to cancel out.</li>
</ul>
</li>
<li>First right then another right:
<ul>
<li>We only shift right because there is no left for us to cancel the right shift with.</li>
</ul>
</li>
</ul>
<p>These are the possibilities that we can shift but in different permutations. This can be shown with the following example:</p>
<p><code>s = &quot;abc&quot;, shift = [[0,1],[1,2]]</code>, as we see it firsts tells us to shift left (<code>0 = left</code>) by one unit and then to shift right (<code>1 = right</code>) by two units. The left gets canceled out by the right, and we have to shift right. This can be shown with an image:</p>
<p><img src="https://i.imgur.com/1CZ7taX.jpg" alt=""></p>
<p>First, go left by one (green) and then go right by two (red), and we can see that we have to shift right by one.</p>
<p>So we find whether we have to shift right or left by using a counter called <code>counter</code>.</p>
<p><em>(Note: Since the current shift is in the format of <code>[direction, number of shifts]</code> I am going to be referring to the current shifts direction or the number of shifts)</em></p>
<p>We check whether the direction of the current shift is <code>0</code>. If it is <code>0</code>, we know that we have to shift left, so we subtract the number of shifts from the counter. Else we know that the direction has to be right, shown as <code>1</code>, and we add the number of shifts to <code>counter</code> because it is right.</p>
</li>
<li>
<p>The next part is shifting the letters.</p>
<ul>
<li>First, we can check whether the counter is smaller than <code>0</code> (if we have to shift left):
<ul>
<li>We make a variable called <code>temp</code> to store the first letter. Then we remake <code>s</code> from the second letter to the end, and we add <code>temp</code> to the back to <code>s</code>. This is basically shifting left.</li>
</ul>
</li>
<li>Else we know that counter is greater than or equal to <code>0</code> (for shifting right):
<ul>
<li>We make a variable called <code>temp</code> to store the last number. Then we remake <code>s</code> to the last number plus the rest of the string. This is basically shifting right.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">stringShift</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">shift</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">shift</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> &lt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>])
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">1</span>:] <span style="color:#f92672">+</span> <span style="color:#a6e22e">temp</span>
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[:len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div><p><strong>We Can Simplify This Solution:</strong> <em>(We don&rsquo;t use <code>temp</code> because we can just add the last and first letter to the end and the last letter to the beginning)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">stringShift</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">shift</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">shift</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> &lt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">1</span>:] <span style="color:#f92672">+</span> string(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>])
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">s</span> = string(<span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[:len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div><hr>
]]></content></item><item><title>Leetcode 163</title><link>https://nathannaveen.dev/posts/leetcode-163/</link><pubDate>Fri, 26 Mar 2021 10:27:54 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-163/</guid><description>1427. Perform String Shifts
The idea of this solution is pretty simple.
Since there are only two directions, we can shift the strings in one direction. The reason we can shift in only one direction is when the input tells us to shift
First left and then right: The right might cancel out the left and will end up with no shift. The right might be greater than the left, so we shift right.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/perform-string-shifts/">1427. Perform String Shifts</a></p>
<p>The idea of this solution is pretty simple.</p>
<ul>
<li>
<p>Since there are only two directions, we can shift the strings in one direction. The reason we can shift in only one direction is when the input tells us to shift</p>
<ul>
<li>First left and then right:
<ul>
<li>The right might cancel out the left and will end up with no shift.</li>
<li>The right might be greater than the left, so we shift right.</li>
<li>The left might be greater than the right, so we shift left.</li>
</ul>
</li>
<li>First right then left:
<ul>
<li>The left might be equal to the right, so it will cancel both of them out, and we won&rsquo;t shift.</li>
<li>The left might be greater than the right, so we shift left.</li>
<li>The left might be smaller than the right, so we shift right.</li>
</ul>
</li>
<li>First left then another left:
<ul>
<li>We can only go left because there is no right to cancel out.</li>
</ul>
</li>
<li>First right then another right:
<ul>
<li>We only shift right because there is no left for us to cancel the right shift with.</li>
</ul>
</li>
</ul>
<p>These are the possibilities that we can shift but in different permutations. This can be shown with the following example:</p>
<p><code>s = &quot;abc&quot;, shift = [[0,1],[1,2]]</code>, as we see it firsts tells us to shift left (<code>0 = left</code>) by one unit and then to shift right (<code>1 = right</code>) by two units. The left gets canceled out by the right, and we have to shift right. This can be shown with an image:</p>
<p><img src="https://i.imgur.com/1CZ7taX.jpg" alt=""></p>
<p>First, go left by one (green) and then go right by two (red), and we can see that we have to shift right by one.</p>
<p>So we find whether we have to shift right or left by using a counter called <code>counter</code>.</p>
<p><em>(Note: Since the current shift is in the format of <code>[direction, number of shifts]</code> I am going to be referring to the current shifts direction or the number of shifts)</em></p>
<p>We check whether the direction of the current shift is <code>0</code>. If it is <code>0</code>, we know that we have to shift left, so we subtract the number of shifts from the counter. Else we know that the direction has to be right, shown as <code>1</code>, and we add the number of shifts to <code>counter</code> because it is right.</p>
</li>
<li>
<p>The next part is shifting the letters.</p>
<ul>
<li>First, we can check whether the counter is smaller than <code>0</code> (if we have to shift left):
<ul>
<li>We make a variable called <code>temp</code> to store the first letter. Then we remake <code>s</code> from the second letter to the end, and we add <code>temp</code> to the back to <code>s</code>. This is basically shifting left.</li>
</ul>
</li>
<li>Else we know that counter is greater than or equal to <code>0</code> (for shifting right):
<ul>
<li>We make a variable called <code>temp</code> to store the last number. Then we remake <code>s</code> to the last number plus the rest of the string. This is basically shifting right.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">stringShift</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">shift</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">shift</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> &lt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>])
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">1</span>:] <span style="color:#f92672">+</span> <span style="color:#a6e22e">temp</span>
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">temp</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[:len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div><p><strong>We Can Simplify This Solution:</strong> <em>(We don&rsquo;t use <code>temp</code> because we can just add the last and first letter to the end and the last letter to the beginning)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">stringShift</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">shift</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">shift</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">counter</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> &lt; <span style="color:#ae81ff">0</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">1</span>:] <span style="color:#f92672">+</span> string(<span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>])
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">s</span> = string(<span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[:len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1791</title><link>https://nathannaveen.dev/posts/leetcode-1791/</link><pubDate>Wed, 24 Mar 2021 12:35:49 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1791/</guid><description>1791. Find Center of Star Graph
This solution is straightforward.
We first make an array called nodes with edges + 1 values. We need edges + 1 values because len(edges) is the number of edge nodes, and the + 1 is for the center node. We only need edges + 1 nodes because the nodes are from 1...n. Then we loop through edges and get each edge. edge[0] and edge[1] are the two values given per edge.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-center-of-star-graph/">1791. Find Center of Star Graph</a></p>
<p>This solution is straightforward.</p>
<ul>
<li>We first make an array called <code>nodes</code> with <code>edges + 1</code> values. We need <code>edges + 1</code> values because <code>len(edges)</code> is the number of edge nodes, and the <code>+ 1</code> is for the center node. We only need <code>edges + 1</code> nodes because the nodes are from <code>1...n</code>.</li>
<li>Then we loop through <code>edges</code> and get each <code>edge</code>. <code>edge[0]</code> and <code>edge[1]</code> are the two values given per edge. One of them is the center node, and the other one is the edge. We add one to <code>node[edge[0]]</code> and <code>node[edge[1]]</code>.</li>
<li>Inside the loop we check whether <code>nodes[edge[0]]</code> and <code>nodes[edge[1]]</code> equals <code>2</code> because the only node that repeats twice is the center node. And if <code>nodes[edge[0]] == 2</code> or <code>nodes[edge[1]] == 2</code> we should return the center node.</li>
</ul>
<p><em>(Note: The problem says <code>3 &lt;= n &lt;= 10^5</code>, but if it didn&rsquo;t at the end the code returns <code>edge[0][0]</code> becuase of the test case <code>len(edges) == 1</code>)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findCenter</span>(<span style="color:#a6e22e">edges</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">nodes</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, len(<span style="color:#a6e22e">edges</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">edge</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">edges</span> {
        <span style="color:#a6e22e">nodes</span>[<span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">++</span>
        <span style="color:#a6e22e">nodes</span>[<span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">1</span>]]<span style="color:#f92672">++</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nodes</span>[<span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">0</span>]
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nodes</span>[<span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">edge</span>[<span style="color:#ae81ff">1</span>]
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">edges</span>[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]
}
</code></pre></div>]]></content></item><item><title>Leetcode 1213</title><link>https://nathannaveen.dev/posts/leetcode-1213/</link><pubDate>Wed, 24 Mar 2021 10:44:39 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1213/</guid><description>1213. Intersection of Three Sorted Arrays
What The Problem Asks:
The problem statement is:
Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.
They are giving us an input of three strictly increasing arrays, and we have to find all the numbers that repeat in all three arrays.
This problem statement&amp;rsquo;s critical thing is strictly increasing because strictly increasing is different from Non-decreasing.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/intersection-of-three-sorted-arrays/">1213. Intersection of Three Sorted Arrays</a></p>
<p><strong>What The Problem Asks:</strong></p>
<p>The problem statement is:</p>
<blockquote>
<p>Given three integer arrays <code>arr1</code>, <code>arr2</code> and <code>arr3</code> sorted in <strong>strictly increasing</strong> order, return a sorted array of <strong>only</strong> the integers that appeared in <strong>all</strong> three arrays.</p>
</blockquote>
<p>They are giving us an input of three <strong>strictly increasing</strong> arrays, and we have to find all the numbers that repeat in all three arrays.</p>
<p>This problem statement&rsquo;s critical thing is <strong>strictly increasing</strong> because strictly increasing is different from <strong>Non-decreasing</strong>. Strictly increasing is every number is unique, and it increases, while non-decreasing is a sorted array that includes repeated values.</p>
<p><strong>The First Solutions idea:</strong></p>
<p>Since we know that all values in each array are unique, we can see that if there are <code>3</code> of the same digit, that digit is in all three arrays.</p>
<p>So this solution loops through all the arrays and adds all the values to a map called <code>m</code>. After that, we loop through <code>m</code> and add the key to a resulting array called <code>rea</code> if the value of <code>m</code> is equal to <code>3</code>.</p>
<p><strong>The Second Solutions idea:</strong></p>
<p>Since we know that all of the arrays are sorted, we can find the repeated numbers without an additional map or array. Basically we loop through all three arrays while :</p>
<ul>
<li><code>arr1</code>&rsquo;s counter is smaller than <code>len(arr1)</code>, the counter is called <code>a</code>.</li>
<li><code>arr2</code>&rsquo;s counter is smaller than <code>len(arr2)</code>. The counter is called <code>b</code>.</li>
<li><code>arr3</code>&rsquo;s counter is smaller than <code>len(arr3)</code>, the counter is called <code>c</code>.</li>
</ul>
<p>Then we can find the maximum of <code>arr1[a], arr2[b], arr3[c]</code>. If <code>arr1[a], arr2[b]</code>, and <code>arr3[c]</code> are equal to <code>maximum</code>, we know that the number occurs in all three arrays, so we can append the number to the resulting array <code>res</code>.</p>
<p>If you don&rsquo;t understand, since the arrays are sorted, we can increase the positions of <code>a, b, c</code> to find the common values in all arrays.</p>
<p>If you still don&rsquo;t understand, look at the following example:</p>
<p><strong>Example:</strong></p>
<p><code>input: arr1 = [1, 2, 5, 6, 9, 10], arr2 = [2, 3, 4, 5, 8, 10], arr3 = [1, 3, 4, 5, 6, 10]</code></p>
<p><code>expected output: res = [5, 10]</code></p>
<p>First we start with <code>a = 0, b = 0, c = 0</code>, and <code>arr1[a] = 1, arr2[b] = 2, arr3[c] = 1</code>, and the maximum of them is <code>2</code>.</p>
<ul>
<li>Since <code>arr[a] &lt; 2</code> we have to add one to <code>a</code> so <code>a = 1</code>.</li>
<li><code>arr2[b] == 2</code> so do noting to <code>b</code>.</li>
<li><code>arr3[c] &lt; 2</code> so we have to add one to <code>c</code> and <code>c = 1</code>.</li>
</ul>
<p>Now <code>a = 1, b = 0, c = 1</code>, and <code>arr1[a] = 2, arr2[b] = 2, arr3[c] = 3</code>. Now the maximum is <code>3</code> so:</p>
<ul>
<li><code>arr1[a] &lt; 3</code> so add one to <code>a</code>.</li>
<li><code>arr2[b] &lt; 3</code> so add one to <code>b</code>.</li>
<li><code>arr3[c] == 3</code> so do nothing.</li>
</ul>
<p>Next <code>a = 2, b = 1, c = 1</code>, and <code>arr1[a] = 5, arr2[b] = 3, arr3[c] = 3</code>. Now the <code>maximum = 5</code>.</p>
<ul>
<li><code>arr1[a] == 5</code> so do nothing.</li>
<li><code>arr2[b] &lt; 5</code> so add one to <code>b</code>.</li>
<li><code>arr3[c] &lt; 5</code> so add one to <code>c</code>.</li>
</ul>
<p>Now <code>a = 2, b = 2, c = 2</code>, and <code>arr1[a] = 5, arr2[b] = 4, arr3[c] = 4</code>. <code>maximum = 5</code>.</p>
<ul>
<li><code>arr1[a] == 5</code> so still do nothing to <code>a</code>.</li>
<li><code>arr2[b] &lt; 5</code> so add one to <code>b</code>.</li>
<li><code>arr3[c] &lt; 5</code> so add one to <code>c</code>.</li>
</ul>
<p>Now <code>a = 2, b = 3, c = 3</code>, and <code>arr1[a] = 5, arr2[b] = 5, arr3[c] = 5</code>, <code>maximum = 5</code>.</p>
<ul>
<li><code>arr1[a] == 5</code></li>
<li><code>arr2[b] == 5</code></li>
<li><code>arr3[c] == 5</code></li>
<li>Since <code>arr1[a], arr2[b], arr3[c]</code> all equal <code>5</code> we know that <code>5</code> appears in all three arrays. So we can add <code>5</code> to our resulting array <code>res</code>. Now <code>res = [5]</code>. Also since they all equal <code>5</code> we can add one to <code>a, b</code> and <code>c</code>.</li>
</ul>
<p>Now <code>a = 3, b = 4, c = 4</code>. <code>arr1[a] = 6, arr2[b] = 8, arr3[c] = 6</code>. <code>maximum = 8</code>.</p>
<ul>
<li><code>arr1[a] &lt; 8</code> so add one to <code>a</code>.</li>
<li><code>arr2[b] == 8</code> so do nothing.</li>
<li><code>arr3[c] &lt; 8</code> so add one to <code>c</code>.</li>
</ul>
<p>Next <code>a = 4, b = 4, c = 5</code>, and <code>arr1[a] = 9, arr2[b] = 8, arr3[c] = 10</code>. <code>maximum = 10</code>.</p>
<ul>
<li><code>arr1[a] &lt; 10</code> so add one to <code>a</code>.</li>
<li><code>arr2[b] &lt; 10</code> so add one to <code>b</code>.</li>
<li><code>arr3[c] == 10</code> so do nothing to <code>c</code>.</li>
</ul>
<p>Now <code>a = 5, b = 5, c = 5</code>, and <code>arr1[a] = 10, arr2[b] = 10, arr3[c] = 10</code>. <code>maximum = 10</code>.</p>
<ul>
<li><code>arr1[a] == 10</code>, so do nothing.</li>
<li><code>arr2[b] == 10</code>, so do nothing.</li>
<li><code>arr3[c] == 10</code>, so do nothing.</li>
<li>Since <code>arr1[a], arr2[b], arr3[c]</code> are all equal to <code>10</code> we can append <code>10</code> to <code>res</code>, so <code>res = [5, 10]</code>. Now we add one to <code>a, b</code> and <code>c</code>.</li>
</ul>
<p>Now <code>a = 6, b = 6, c = 6</code>. But now <code>a == len(arr1), b == len(arr2), c == len(arr3)</code> so we have to break out of the loop. Now we also return <code>res</code>. <code>res = [5, 10]</code> and the expected output was <code>[5, 10]</code>. So it is correct.</p>
<p>You might be wondering what we are doing to sort the returning array because it wants the array to be sorted and then returned. Since we are iterating through the three arrays, and the arrays are sorted, the result will be sorted.</p>
<p><strong>Solution One:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arraysIntersection</span>(<span style="color:#a6e22e">arr1</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">arr2</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">arr3</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr1</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr2</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr3</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">i</span>)
        }
    }
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">res</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><strong>Solution Two:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arraysIntersection</span>(<span style="color:#a6e22e">arr1</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">arr2</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">arr3</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">a</span> &lt; len(<span style="color:#a6e22e">arr1</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">b</span> &lt; len(<span style="color:#a6e22e">arr2</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">c</span> &lt; len(<span style="color:#a6e22e">arr3</span>) {
        <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">arr1</span>[<span style="color:#a6e22e">a</span>], <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">arr2</span>[<span style="color:#a6e22e">b</span>], <span style="color:#a6e22e">arr3</span>[<span style="color:#a6e22e">c</span>]))
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr1</span>[<span style="color:#a6e22e">a</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr2</span>[<span style="color:#a6e22e">b</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr3</span>[<span style="color:#a6e22e">c</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">maximum</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">arr1</span>[<span style="color:#a6e22e">a</span>])
            <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span> = <span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">c</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr1</span>[<span style="color:#a6e22e">a</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">maximum</span> {
                <span style="color:#a6e22e">a</span><span style="color:#f92672">++</span>
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr2</span>[<span style="color:#a6e22e">b</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">maximum</span> {
                <span style="color:#a6e22e">b</span><span style="color:#f92672">++</span>
            }
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arr3</span>[<span style="color:#a6e22e">c</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">maximum</span> {
                <span style="color:#a6e22e">c</span><span style="color:#f92672">++</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 360</title><link>https://nathannaveen.dev/posts/leetcode-360/</link><pubDate>Tue, 23 Mar 2021 12:20:59 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-360/</guid><description>360. Sort Transformed Array
The idea of this solution is to loop through nums and do the quadratic equation f(x) = ax^2 + bx + c where x = nums[i] and then make nums[i] the result of the ax^2 + bx + c. After that we can sort and return nums.
Solution Using Manual Sort
func sortTransformedArray(nums []int, a int, b int, c int) []int { for i := 0; i &amp;lt; len(nums); i++ { nums[i] = a*nums[i]*nums[i] + b*nums[i] + c } for i := 1; i &amp;lt; len(nums); i++ { if i &amp;gt;= 1 &amp;amp;&amp;amp; nums[i] &amp;lt; nums[i-1] { nums[i], nums[i-1] = nums[i-1], nums[i] i -= 2 } } return nums } The Same Solution But Using a Built In Sort:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sort-transformed-array/">360. Sort Transformed Array</a></p>
<p>The idea of this solution is to loop through <code>nums</code> and do the quadratic equation <code>f(x) = ax^2 + bx + c</code> where <code>x = nums[i]</code> and then make <code>nums[i]</code> the result of the <code>ax^2 + bx + c</code>. After that we can sort and return <code>nums</code>.</p>
<p><strong>Solution Using Manual Sort</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sortTransformedArray</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">a</span><span style="color:#f92672">*</span><span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span><span style="color:#f92672">*</span><span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">c</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &lt; <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] {
            <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">nums</span>
}
</code></pre></div><p><strong>The Same Solution But Using a Built In Sort:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sortTransformedArray</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">c</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">a</span><span style="color:#f92672">*</span><span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span><span style="color:#f92672">*</span><span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">c</span>
    }

    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">nums</span>)
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">nums</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1198</title><link>https://nathannaveen.dev/posts/leetcode-1198/</link><pubDate>Mon, 22 Mar 2021 12:57:36 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1198/</guid><description>1198. Find Smallest Common Element in All Rows
m = len(mat), n = len(mat[0])
speed = O(mn) space = O(number of unique numbers) What The Problem Is Asking:
The problem description is
Given a matrix mat where every row is sorted in strictly increasing order, return the smallest common element in all rows.
If there is no common element, return -1.
The problem is asking us to return an element that appears in every array of the matrix array, and if there are multiple, we should return the smallest.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-smallest-common-element-in-all-rows/">1198. Find Smallest Common Element in All Rows</a></p>
<p>m = len(mat), n = len(mat[0])</p>
<ul>
<li>speed = O(mn)</li>
<li>space = O(number of unique numbers)</li>
</ul>
<p><strong>What The Problem Is Asking:</strong></p>
<p>The problem description is</p>
<blockquote>
<p>Given a matrix <code>mat</code> where every row is sorted in <strong>strictly increasing</strong> order, return the <strong>smallest common element</strong> in all rows.</p>
<p>If there is no common element, return <code>-1</code>.</p>
</blockquote>
<p>The problem is asking us to return an element that appears in every array of the matrix array, and if there are multiple, we should return the smallest.</p>
<p>You might not have seen some things that are said in the problem description. It is ok because they are pretty small.</p>
<ul>
<li>First, when they say <strong>strictly increasing</strong> they mean that all the elements are unique. Now, if they said <strong>sorted in non-decreasing order</strong> it wouldn&rsquo;t mean that the elements are unique.</li>
<li>Next, when they say <strong>strictly increasing</strong>, they mean that every array in the matrix is sorted.</li>
</ul>
<p><strong>How This Solution Works:</strong></p>
<p>As we have seen, the arrays inside the matrix array are sorted and unique. We can say that a common element in all rows will only appear <code>len(mat)</code> times. And since we know that each array is sorted, we can see that the minimum element that appears in each row will be the first element that will appear in each row.</p>
<p><strong>How The Code Works:</strong></p>
<p>Now we can implement the idea into code, so we can use a map to store the number and the frequency of the number. When we iterate through <code>mat</code>, we first add one to the frequency of that element. Then we check whether that element frequency is equal to <code>len(mat)</code>. If it is, then return the element because it will be the smallest, and it will be in all rows.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">smallestCommonElement</span>(<span style="color:#a6e22e">mat</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">mat</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">mat</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]]<span style="color:#f92672">++</span>
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]] <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">mat</span>) {
                <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>]
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 296</title><link>https://nathannaveen.dev/posts/leetcode-296/</link><pubDate>Mon, 22 Mar 2021 11:57:20 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-296/</guid><description>296. Best Meeting Point
What the Problem Is Asking:
The problem gives us an input binary matrix array called grid. If grid[i][j] = 1 then it is a house of a friend, and if grid[i][j] = 0 then there is no house there.
The problem asks us to find a point on the grid that is the smallest distance to walk from all the houses. Note that the point on the grid with the smallest distance can be on a house or an empty space.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/best-meeting-point/">296. Best Meeting Point</a></p>
<p><strong>What the Problem Is Asking:</strong></p>
<p>The problem gives us an input binary matrix array called <code>grid</code>. If <code>grid[i][j] = 1</code> then it is a house of a friend, and if <code>grid[i][j] = 0</code> then there is no house there.</p>
<p>The problem asks us to find a point on the grid that is the smallest distance to walk from all the houses. <em>Note that the point on the grid with the smallest distance can be on a house or an empty space.</em></p>
<p>They want you to calculate manhattan distance. The manhattan distance is:</p>
<p><img src="https://i.imgur.com/dW8q8xG.jpg" alt=""></p>
<p>Where the lines signify absolute value.</p>
<p>For example, the example input given by the problem statement in Leetcode is:</p>
<pre tabindex="0"><code>[
[1,0,0,0,1],
[0,0,0,0,0],
[0,0,1,0,0]
]
</code></pre><p>And the output is <code>6</code>. The meeting spot is <code>(2, 0)</code> because the one points are <code>(0, 0)(4, 0)(2, 2)</code>, and the manhattan distance from <code>(2, 0)</code> to the one points are <code>2</code>, so <code>2 + 2 + 2 = 6</code>.</p>
<p><strong>The Idea Of This Solution:</strong></p>
<p>The idea of this solution is pretty simple:</p>
<ul>
<li>First, add all the <code>1</code>&rsquo;s on the grid (houses) to an array called <code>ones</code>.</li>
<li>Next, create a variable called <code>minimum</code> and loop through the grid at all points, then find the manhattan distance from all house points to the current point and sum them up. Make <code>minimum</code> the minimum of <code>minimum</code> and <code>manhattanDistance</code>.</li>
</ul>
<p><strong>How This Solution Works:</strong></p>
<ul>
<li>First, we find all the <code>1</code>&rsquo;s (houses) in the grid and add them to an array of <code>point</code>. Point is a struct that I created to store the points, so <code>point.x</code> is the x value, and <code>point.y</code> is the value. Anyways continuing, we add all the values that have to the array of points.</li>
<li>After that, we make a variable called <code>minimum</code> and set it to the max integer value <code>2^31 = 2147483648</code>.</li>
<li>We loop through the grid again and go through every point and get the manhattan distance from the position of that point to all the positions of the houses and sum up all the distances. If the sum of all the distances is smaller than the minimum distance, make <code>minimum = manhattanDistance</code>.</li>
<li>Then all we have to do is return the minimum distance.</li>
</ul>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">point</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">y</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minTotalDistance</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">ones</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">point</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
                <span style="color:#a6e22e">ones</span> = append(<span style="color:#a6e22e">ones</span>, <span style="color:#a6e22e">point</span>{<span style="color:#a6e22e">x</span>: <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">y</span>: <span style="color:#a6e22e">i</span>})
            }
        }
    }

    <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">2147483648</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">manhattanDistance</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">ones</span>), <span style="color:#a6e22e">minimum</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">minimum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">manhattanDistance</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">ones</span> []<span style="color:#a6e22e">point</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">thePoint</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">ones</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#a6e22e">thePoint</span>.<span style="color:#a6e22e">x</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#a6e22e">thePoint</span>.<span style="color:#a6e22e">y</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div><p><strong>Code Without The Struct Point:</strong> <em>(This solution stores the points in a matrix array instead of a struct called point)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minTotalDistance</span>(<span style="color:#a6e22e">grid</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">ones</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">grid</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">j</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
                <span style="color:#a6e22e">ones</span> = append(<span style="color:#a6e22e">ones</span>, []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>})
            }
        }
    }

    <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">2147483648</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">grid</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">grid</span>[<span style="color:#ae81ff">0</span>]); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">manhattanDistance</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">ones</span>), <span style="color:#a6e22e">minimum</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">minimum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">manhattanDistance</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">ones</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">one</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">ones</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">j</span><span style="color:#f92672">-</span><span style="color:#a6e22e">one</span>[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#a6e22e">one</span>[<span style="color:#ae81ff">0</span>])
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1121</title><link>https://nathannaveen.dev/posts/leetcode-1121/</link><pubDate>Sun, 21 Mar 2021 22:01:48 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1121/</guid><description>1121. Divide Array Into Increasing Sequences
What the Problem is Asking Us To Do:
The problem statement is:
Given a non-decreasing array of positive integers nums and an integer K, find out if this array can be divided into one or more disjoint increasing subsequences of length at least K.
What this is saying is:
We are first given a sorted array of positive integers called nums and an integer K for our input.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/divide-array-into-increasing-sequences/">1121. Divide Array Into Increasing Sequences</a></p>
<p><strong>What the Problem is Asking Us To Do:</strong></p>
<p>The problem statement is:</p>
<blockquote>
<p>Given a non-decreasing array of positive integers nums and an integer K, find out if this array can be divided into one or more disjoint increasing subsequences of length at least K.</p>
</blockquote>
<p>What this is saying is:</p>
<ul>
<li>We are first given a sorted array of positive integers called <code>nums</code> and an integer <code>K</code> for our input.</li>
<li>We have to determine whether <code>nums</code> can be split into disjoint <em>(disjoint means not together because the prefix dis is not and joint means together. Thus, the definition of disjoint is not together)</em> sequences of at least <code>K</code>&lsquo;th length.</li>
</ul>
<p>You might be confused by the example which the problem gives on Leetcode:</p>
<pre tabindex="0"><code>Input: nums = [1,2,2,3,3,4,4], K = 3
Output: true
Explanation: 
The array can be divided into the two subsequences [1,2,3,4] and [2,3,4]
</code></pre><p>This is kind of misdirecting if you don&rsquo;t read the problem statement because you usually think that the arrays you have made have to be consecutive. <code>[1, 2, 3, 4]</code> and <code>[2, 3, 4]</code> are both consecutive.</p>
<p><strong>The idea of this solution:</strong></p>
<p>The idea of this solution is to find the max frequency of a certain number and then check whether <code>maxFrequency * K &lt;= len(nums)</code>. This works because the max frequency is the minimum number of disjoint sequences, and <code>K</code> is the minimum number of items per sequence. Even if the number of sequences is greater than the max frequency and there are more than <code>K</code> items per sequence, it will still work.</p>
<p>We find the max frequency, which in this solution is called <code>maximum</code> by looping through <code>nums</code>, and if the next number is greater than the current number, we know that the frequency of the current number is the max frequency of this number so we can make <code>maximum = math.Max(float64(counter), maximum)</code>. Otherwise, we know that the next number is equal to the current number because <code>nums</code> is sorted. So we can add one to the current frequency counter called <code>counter</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canDivideIntoSubsequences</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">K</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">counter</span>, <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, float64(<span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Max</span>(float64(<span style="color:#a6e22e">counter</span>), <span style="color:#a6e22e">maximum</span>)
            <span style="color:#a6e22e">counter</span> = <span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        }
    }
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">Max</span>(float64(<span style="color:#a6e22e">counter</span>), <span style="color:#a6e22e">maximum</span>)
    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">K</span> <span style="color:#f92672">*</span> int(<span style="color:#a6e22e">maximum</span>)
}
</code></pre></div><p><strong>Edit to make space better:</strong> <em>(Added a function called <code>max</code> to calculate the maximum of two values instead of using <code>math.Max()</code> and converting <code>counter</code> to <code>float64</code> and then converting <code>maximum</code> to <code>int</code>)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canDivideIntoSubsequences</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">K</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">counter</span>, <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">counter</span>)
            <span style="color:#a6e22e">counter</span> = <span style="color:#ae81ff">1</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        }
    }
    <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">maximum</span>, <span style="color:#a6e22e">counter</span>)
    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">nums</span>) <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">K</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">maximum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1214</title><link>https://nathannaveen.dev/posts/leetcode-1214/</link><pubDate>Sun, 21 Mar 2021 11:36:17 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1214/</guid><description>1214. Two Sum BSTs
Quick Run-Down On The Solutions
The first solution is the easiest of the three solutions and the worst-time complexity solution. The second solution has a different approach from the first solution and a little better time but still not that great. The third solution has a lot better time than the first two solutions and has a similar approach to the second solution. The Ideas of These Solutions:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/two-sum-bsts/">1214. Two Sum BSTs</a></p>
<p><strong>Quick Run-Down On The Solutions</strong></p>
<ul>
<li>The first solution is the easiest of the three solutions and the worst-time complexity solution.</li>
<li>The second solution has a different approach from the first solution and a little better time but still not that great.</li>
<li>The third solution has a lot better time than the first two solutions and has a similar approach to the second solution.</li>
</ul>
<p><strong>The Ideas of These Solutions:</strong></p>
<p>The first solution is a simple mundane depth-first-search (dfs) solution. We first iterate through the first tree and then the second tree. We add all the values from the first tree to the array <code>arr1</code> and then add the second tree&rsquo;s values to the array <code>arr2</code>. After that, we find whether two values from <code>arr1, arr2</code> summed up equals <code>target</code> return <code>true</code>.</p>
<p>The second solution iterates through the first tree and finds the difference of <code>target - pop.Val</code>, and add it to an array called <code>secondTreeExpectedValues</code>. All we have to do is iterate through the second tree and check whether <code>secondTreeExpectedValues</code> contains the <code>pop.Val</code>. If it does, we know that the trees have two numbers that add up to <code>target</code>.</p>
<p>The third solution does the same thing as the second solution but uses a map called <code>m</code> instead of <code>secondTreeExpectedValues</code>. The key difference between the two is when you check whether an array contains, you have to iterate through an array, and iterating through an array is <code>O(n)</code> where <code>n = len(array)</code>. But checking whether a map contains is <code>O(1)</code>. So using a map instead of an array cuts down on a lot of time.</p>
<p>If you don&rsquo;t understand the idea of the second and third solutions, look at the following images <em>(I am doing this with the third solutions idea)</em>:</p>
<h4 id="input">Input:</h4>
<p><img src="https://i.imgur.com/Fw7hBM1.jpg" alt=""></p>
<p><img src="https://i.imgur.com/ZsmP7Qm.jpg" alt=""></p>
<p><img src="https://i.imgur.com/IyZCA6K.jpg" alt=""></p>
<p>Now we have finished iterating through the first tree and added all the differences to the map.</p>
<p>Now iterating through tree2:</p>
<p><img src="https://i.imgur.com/cC3HsMC.jpg" alt=""></p>
<blockquote>
<p>There is no key of <code>8</code>, so we continue.</p>
</blockquote>
<p><img src="https://i.imgur.com/4J1AYm6.jpg" alt=""></p>
<blockquote>
<p>There is no key of <code>11</code> as well.</p>
</blockquote>
<p><img src="https://i.imgur.com/TEP4FpV.jpg" alt=""></p>
<blockquote>
<p>There is no key of <code>12</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/y1khnaO.jpg" alt=""></p>
<blockquote>
<p>There is no key of <code>9</code> in <code>m</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/3ZvKBVR.jpg" alt=""></p>
<blockquote>
<p>There is a key of <code>6</code> in <code>m</code>, and the value is <code>7</code>. When we add <code>6</code> and <code>7</code> together, we get <code>13</code>. So you see when we did <code>target - pop.Val</code> we were getting the second value from <code>tree2</code>.
<strong>The First Solution:</strong></p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">twoSumBSTs</span>(<span style="color:#a6e22e">root1</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">root2</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root1</span>}
    <span style="color:#a6e22e">arr1</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">arr2</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
            <span style="color:#a6e22e">arr1</span> = append(<span style="color:#a6e22e">arr1</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>)
        }
    }

    <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">root2</span>)

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
            <span style="color:#a6e22e">arr2</span> = append(<span style="color:#a6e22e">arr2</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>)
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr1</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i4</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr2</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span><span style="color:#f92672">+</span><span style="color:#a6e22e">i4</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">target</span> {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div><p><strong>The Second Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">twoSumBSTs</span>(<span style="color:#a6e22e">root1</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">root2</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root1</span>}
    <span style="color:#a6e22e">secondTreeExpectedValues</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
            <span style="color:#a6e22e">secondTreeExpectedValues</span> =
                append(<span style="color:#a6e22e">secondTreeExpectedValues</span>, <span style="color:#a6e22e">target</span><span style="color:#f92672">-</span><span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>)
        }
    }

    <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">root2</span>)

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arrayContains</span>(<span style="color:#a6e22e">secondTreeExpectedValues</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>) {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">arrayContains</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">val</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">val</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div><p><strong>The Third Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">twoSumBSTs</span>(<span style="color:#a6e22e">root1</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">root2</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root1</span>}
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
            <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">target</span><span style="color:#f92672">-</span><span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>] = <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>
        }
    }

    <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">root2</span>)

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>]; <span style="color:#a6e22e">ok</span> {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 272</title><link>https://nathannaveen.dev/posts/leetcode-272/</link><pubDate>Fri, 19 Mar 2021 09:50:42 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-272/</guid><description>272. Closest Binary Search Tree Value II
The idea of this solution is pretty simple, we just iterate through the tree and append the absolute difference between the popped value and target to an array called differences, then we append the popped value to an array called eachNumber. After we have iterated through the whole array we can sort the difference array while sorting the eachNumber array. After that we return the first k numbers from eachNumber.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/closest-binary-search-tree-value-ii/">272. Closest Binary Search Tree Value II</a></p>
<p>The idea of this solution is pretty simple, we just iterate through the tree and append the absolute difference between the popped value and <code>target</code> to an array called <code>differences</code>, then we append the popped value to an array called <code>eachNumber</code>. After we have iterated through the whole array we can sort the difference array while sorting the <code>eachNumber</code> array. After that we return the first <code>k</code> numbers from <code>eachNumber</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">closestKValues</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">float64</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">eachNumber</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">differences</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">float64</span>{}
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">differences</span> = append(<span style="color:#a6e22e">differences</span>, <span style="color:#a6e22e">abs</span>(float64(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">target</span>))
            <span style="color:#a6e22e">eachNumber</span> = append(<span style="color:#a6e22e">eachNumber</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>)
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">differences</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">differences</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] &gt; <span style="color:#a6e22e">differences</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">eachNumber</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">eachNumber</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">eachNumber</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">eachNumber</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">differences</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">differences</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">differences</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">differences</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">eachNumber</span>[:<span style="color:#a6e22e">k</span>]
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">float64</span>) <span style="color:#66d9ef">float64</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1762</title><link>https://nathannaveen.dev/posts/leetcode-1762/</link><pubDate>Fri, 19 Mar 2021 09:39:06 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1762/</guid><description>1762. Buildings With an Ocean View
The idea of the solution:
The idea of this solution is to loop through the array heights backwards. Then we just have to find if a height that is greater that the curent height. After that we can reverse the resulting array because the problem asks us to give us the sorted array of indexes that have an ocean view.
If you don&amp;rsquo;t understand the explaination just look at the following images:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/buildings-with-an-ocean-view/">1762. Buildings With an Ocean View</a></p>
<p><strong>The idea of the solution:</strong></p>
<p>The idea of this solution is to loop through the array <code>heights</code> backwards. Then we just have to find if a height that is greater that the curent height. After that we can reverse the resulting array because the problem asks us to give us the sorted array of indexes that have an ocean view.</p>
<p>If you don&rsquo;t understand the explaination just look at the following images:</p>
<p><strong>The input:</strong></p>
<p><img src="https://i.imgur.com/ihGpLUO.jpg" alt=""></p>
<p><img src="https://i.imgur.com/2Vkgh4m.jpg" alt=""></p>
<blockquote>
<p>Since <code>max = 0</code> and <code>heights[6] = 1</code>. Since <code>1 &gt; 0</code> we add the index <code>6</code> to the resulting array <code>arr</code>, right now <code>arr = []</code>, and if we add <code>6</code> to it we get <code>arr = [6]</code>. We also have to make <code>max = 1</code> because that is how we know that we can&rsquo;t see the ocean if it is smaller than or equal to <code>max</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/BXp37tQ.jpg" alt=""></p>
<blockquote>
<p>Now we are at index <code>5</code>. Right now we have <code>max = 1</code>, and as we can see <code>3</code> is greater than <code>max</code> so we can add the index <code>5</code> to <code>arr</code>, and make <code>arr = [6, 5]</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/ctd0pvR.jpg" alt=""></p>
<blockquote>
<p>Since <code>max = 3</code> and <code>heights[4] = 2</code>, so we don&rsquo;t add <code>4</code> to <code>arr</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/fTja9k5.jpg" alt=""></p>
<blockquote>
<p>At index <code>3</code> and we have <code>max = 3</code>. Since <code>heights[3] = 4</code> and <code>4 &gt; 3</code> we can add the index <code>3</code> to <code>arr</code>. So now <code>arr = [6, 5, 3]</code></p>
</blockquote>
<p><img src="https://i.imgur.com/4wPKKBo.jpg" alt=""></p>
<blockquote>
<p>We are at index <code>2</code> and we have <code>max = 4</code>. Since <code>heights[2] = 3</code> we don&rsquo;t add <code>2</code> to <code>arr</code> because <code>3 &lt; 4</code></p>
</blockquote>
<p><img src="https://i.imgur.com/rLwln9j.jpg" alt=""></p>
<blockquote>
<p>Now we are at index <code>1</code>, and <code>heights[1] = 5</code> while <code>max = 4</code>. Since <code>5 &gt; 4</code> we add <code>1</code> to <code>arr</code>. Now <code>arr = [6, 5, 3, 1]</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/GuGA8dY.jpg" alt=""></p>
<blockquote>
<p>As we can see at index <code>0</code> <code>heights[0] = 2</code>, while <code>max = 5</code>. Since <code>2 &lt; 5</code> we don&rsquo;t add to <code>arr</code>.</p>
</blockquote>
<p>After all of this we get the array <code>arr = [6, 5, 3, 1]</code>. Now the problem asks us to return the array sorted in a increasing order, so all we have to do is reverse <code>arr</code> and we get <code>arr = [1, 3, 5, 6]</code>. Now we can return <code>arr</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">findBuildings</span>(<span style="color:#a6e22e">heights</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">maximum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">heights</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">heights</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">maximum</span> {
            <span style="color:#a6e22e">maximum</span> = <span style="color:#a6e22e">heights</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>, <span style="color:#a6e22e">i</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">reverseArr</span>(<span style="color:#a6e22e">arr</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">reverseArr</span>(<span style="color:#a6e22e">arr</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">arr</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">left</span> &lt; <span style="color:#a6e22e">right</span> {
        <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">left</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">right</span>] = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">right</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">left</span>]
        <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> = <span style="color:#a6e22e">left</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">right</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1134</title><link>https://nathannaveen.dev/posts/leetcode-1134/</link><pubDate>Thu, 18 Mar 2021 17:44:12 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1134/</guid><description>1134. Armstrong Number
The idea of this solution is to just loop through every digit of n then add the n^(lengthOfNumber) to a variable called sum, then we return sum == n.
func isArmstrong(n int) bool { lengthOfNumber := len(strconv.Itoa(n)) sum := 0 newN := n for newN &amp;gt; 0 { sum += powerOfK(lengthOfNumber, newN%10) newN /= 10 } return sum == n } func powerOfK(lengthOfNumber, n int) int { res := 1 for i := 0; i &amp;lt; lengthOfNumber; i++ { res *= n } return res }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/armstrong-number/">1134. Armstrong Number</a></p>
<p>The idea of this solution is to just loop through every digit of <code>n</code> then add the <code>n^(lengthOfNumber)</code> to a variable called <code>sum</code>, then we return <code>sum == n</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isArmstrong</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">lengthOfNumber</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">n</span>))
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">newN</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">n</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">newN</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">powerOfK</span>(<span style="color:#a6e22e">lengthOfNumber</span>, <span style="color:#a6e22e">newN</span><span style="color:#f92672">%</span><span style="color:#ae81ff">10</span>)
        <span style="color:#a6e22e">newN</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">powerOfK</span>(<span style="color:#a6e22e">lengthOfNumber</span>, <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">lengthOfNumber</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">*=</span> <span style="color:#a6e22e">n</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1085</title><link>https://nathannaveen.dev/posts/leetcode-1085/</link><pubDate>Thu, 18 Mar 2021 17:43:55 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1085/</guid><description>1085. Sum of Digits in the Minimum Number
The idea of the first two solutions is pretty simple. We sort the array A and then we just find the sum of the digits of the smallest number.
The idea of the second solution is pretty simple as well. We loop through A and find the minimum value, and the find the sum of the digits of the smallest number.
Solution: (Using a manual sort).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-digits-in-the-minimum-number/">1085. Sum of Digits in the Minimum Number</a></p>
<p>The idea of the first two solutions is pretty simple. We sort the array <code>A</code> and then we just find the sum of the digits of the smallest number.</p>
<p>The idea of the second solution is pretty simple as well. We loop through <code>A</code> and find the minimum value, and the find the sum of the digits of the smallest number.</p>
<p><strong>Solution:</strong> <em>(Using a manual sort)</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sumOfDigits</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">A</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> { <span style="color:#75715e">// sorting A
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span>] &lt; <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] {
            <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">A</span>[<span style="color:#ae81ff">0</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> &gt; <span style="color:#ae81ff">0</span> { <span style="color:#75715e">// looping through n and then adding every digit to n
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>
        <span style="color:#a6e22e">n</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div><p><strong>Edited Solution:</strong> <em>(Using a built in sort)</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sumOfDigits</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">sort</span>.<span style="color:#a6e22e">Ints</span>(<span style="color:#a6e22e">A</span>)
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">A</span>[<span style="color:#ae81ff">0</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>
        <span style="color:#a6e22e">n</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div><p><strong>The Last Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sumOfDigits</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">A</span>[<span style="color:#ae81ff">0</span>]
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">A</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">minimum</span> {
            <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">i</span>
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">minimum</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span>
        <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">/=</span> <span style="color:#ae81ff">10</span>
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">sum</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1133</title><link>https://nathannaveen.dev/posts/leetcode-1133/</link><pubDate>Thu, 18 Mar 2021 17:43:48 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1133/</guid><description>1133. Largest Unique Number
Here are two ways to solve this solution:
One way is to use an array of size 1001 which we call h (1001 because in the notes it says 0 &amp;lt;= A[i] &amp;lt;= 1000) and add one to h[A[i]]. Now we can see that the array will be sorted because we add the number of numbers to h. So all we have to do is iterate through h backward and check whether the value of h[i] == 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/largest-unique-number/">1133. Largest Unique Number</a></p>
<p>Here are two ways to solve this solution:</p>
<p>One way is to use an array of size <code>1001</code> which we call <code>h</code> (<code>1001</code> because in the notes it says <code>0 &lt;= A[i] &lt;= 1000</code>) and add one to <code>h[A[i]]</code>. Now we can see that the array will be sorted because we add the number of numbers to <code>h</code>.  So all we have to do is iterate through <code>h</code> backward and check whether the value of <code>h[i] == 1</code>. If so, return <code>i</code>. If there are no unique numbers, we can return <code>-1</code>.</p>
<p>The other way is to use a map. We can first iterate through <code>A</code> and add one to the value of <code>A</code>. Then we can iterate through the map and look for all unique numbers. If the current number is greater than the max, we can re-assign the max to the number. After all of that, return the max value.</p>
<p><strong>Using an Array:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">largestUniqueNumber</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">int</span>, <span style="color:#ae81ff">1001</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">A</span> {
        <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1000</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">i</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}
</code></pre></div><p><strong>Using a Map</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">largestUniqueNumber</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">number</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">A</span> {
        <span style="color:#a6e22e">h</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">h</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> &gt; <span style="color:#a6e22e">number</span> {
            <span style="color:#a6e22e">number</span> = <span style="color:#a6e22e">i</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">number</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1469</title><link>https://nathannaveen.dev/posts/leetcode-1469/</link><pubDate>Thu, 18 Mar 2021 14:11:02 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1469/</guid><description>1469. Find All The Lonely Nodes
The idea of this solution is pretty simple, there are just four conditions:
if there is a left node but not a right node if there is a right node but not a left node if there is both a left and a right node if there are neither a left or a right node We can ignore the part where there is neither a left or a right node.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-all-the-lonely-nodes/">1469. Find All The Lonely Nodes</a></p>
<p>The idea of this solution is pretty simple, there are just four conditions:</p>
<ul>
<li>if there is a left node but not a right node</li>
<li>if there is a right node but not a left node</li>
<li>if there is both a left and a right node</li>
<li>if there are neither a left or a right node</li>
</ul>
<p>We can ignore the part where there is neither a left or a right node.</p>
<p>If there is a left node but not a right node or a right node with no left node. we can add that node to the resulting array because it is a lonely node.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getLonelyNodes</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>.<span style="color:#a6e22e">Val</span>)
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>)
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>.<span style="color:#a6e22e">Val</span>)
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 270</title><link>https://nathannaveen.dev/posts/leetcode-270/</link><pubDate>Thu, 18 Mar 2021 14:10:52 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-270/</guid><description>270. Closest Binary Search Tree Value
The idea of this solution is pretty simple. We have to iterate through the tree and then find the absolute minimum difference between the target and the value from the tree. (Keep in mind that we want everything to be a float64, so then we get proper comparisons). This can be shown with the equation:
The Code:
func closestValue(root *TreeNode, target float64) int { stack := []*TreeNode{root} minimum := float64(1000000000) number := 0 for len(stack) !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/closest-binary-search-tree-value/">270. Closest Binary Search Tree Value</a></p>
<p>The idea of this solution is pretty simple. We have to iterate through the tree and then find the absolute minimum difference between the target and the value from the tree. <em>(Keep in mind that we want everything to be a float64, so then we get proper comparisons)</em>. This can be shown with the equation:</p>
<p><img src="https://i.imgur.com/W0DvaCc.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">closestValue</span>(<span style="color:#a6e22e">root</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>, <span style="color:#a6e22e">target</span> <span style="color:#66d9ef">float64</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">stack</span> <span style="color:#f92672">:=</span> []<span style="color:#f92672">*</span><span style="color:#a6e22e">TreeNode</span>{<span style="color:#a6e22e">root</span>}
    <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> float64(<span style="color:#ae81ff">1000000000</span>)
    <span style="color:#a6e22e">number</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">stack</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
        <span style="color:#a6e22e">pop</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>[len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">stack</span> = <span style="color:#a6e22e">stack</span>[:len(<span style="color:#a6e22e">stack</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pop</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">target</span> <span style="color:#f92672">-</span> float64(<span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>))
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">h</span> &lt; <span style="color:#a6e22e">minimum</span> {
                <span style="color:#a6e22e">number</span> = <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Val</span>
                <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">h</span>
            }
            <span style="color:#a6e22e">stack</span> = append(<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Left</span>, <span style="color:#a6e22e">pop</span>.<span style="color:#a6e22e">Right</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">number</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">float64</span>) <span style="color:#66d9ef">float64</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 266</title><link>https://nathannaveen.dev/posts/leetcode-266/</link><pubDate>Thu, 18 Mar 2021 14:10:37 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-266/</guid><description>266. Palindrome Permutation
The idea of this solution is pretty simple. We add all the letters to a map, and then if there is a extra letter that does not have a partner for the other end of the palindrome add it to the numberOfOnes counter, if the counter is greater than 1 we know that it is not a palindrome. We can explain this with some examples:
There are three main examples that are going to be shown:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/palindrome-permutation/">266. Palindrome Permutation</a></p>
<p>The idea of this solution is pretty simple. We add all the letters to a map, and then if there is a extra letter that does not have a partner for the other end of the palindrome add it to the <code>numberOfOnes</code> counter, if the counter is greater than <code>1</code> we know that it is not a palindrome. We can explain this with some examples:</p>
<p>There are three main examples that are going to be shown:</p>
<ul>
<li><code>input: &quot;aabbccd&quot;, expected output: true</code>, we can make a map <code>m := ['a' : 2, 'b' : 2, 'c' : 2, 'd' : 1]</code> if we iterate through <code>m</code> we can return <code>true</code> because <code>numberOfOnes = 1</code>. <code>numberOfOnes = 1</code> because <code>'d' : 1</code>. If you don&rsquo;t understand why we return <code>true</code> see that we can swap the letters around to get <code>&quot;abcdcba&quot;</code>.</li>
<li><code>input: &quot;aabb&quot;, expected output: true</code>, we can also make a map <code>m := ['a' : 2, 'b' : 2]</code>. When we iterate through <code>m</code> we get <code>numberOfOnes = 0</code> so we retun true. When we swap around <code>&quot;aabb&quot;</code> we get <code>&quot;abba&quot;</code> which is a palindrome.</li>
<li><code>input: &quot;aabbcd&quot;, expected output: false</code>. We can make a map <code>m := ['a' : 2, 'b' : 2, 'c' : 1, 'd' : 1]</code>. When we iterate through <code>m</code> we can see that <code>numberOfOnes = 2</code> and since <code>numberOfOnes &gt; 1</code> we return <code>false</code>. We return <code>false</code> because however we swap around <code>&quot;aabbcd&quot;</code> we can never get a palindrome because there is an extra <code>c</code> and<code>d</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canPermutePalindrome</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">rune</span>]<span style="color:#66d9ef">int</span>)
    <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">i</span>]<span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">m</span> {
        <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">numberOfOnes</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 292</title><link>https://nathannaveen.dev/posts/leetcode-292/</link><pubDate>Thu, 18 Mar 2021 12:19:52 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-292/</guid><description>292. Nim Game
func canWinNim(n int) bool { return n%4 != 0 } This is all the code we need to solve this problem.
We have to return n % 4 != 0 because we are asked to pick from 1 to 3 stones, and if we pick;
If we pick one stone, the other player can choose three stones If we pick two stones, the other player can select two stones If we pick three stones, the other player can choose one stone As you can see, when we add the stones together in the examples above, they all equal 4 stones.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/nim-game/">292. Nim Game</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">canWinNim</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span><span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div><p>This is all the code we need to solve this problem.</p>
<p>We have to return <code>n % 4 != 0</code> because we are asked to pick from <code>1</code> to <code>3</code> stones, and if we pick;</p>
<ul>
<li>If we pick one stone, the other player can choose three stones</li>
<li>If we pick two stones, the other player can select two stones</li>
<li>If we pick three stones, the other player can choose one stone</li>
</ul>
<p>As you can see, when we add the stones together in the examples above, they all equal <code>4</code> stones.</p>
<p>We can see that any number that is a multiple of <code>4</code> will return false with these pictures:</p>
<p><img src="https://assets.leetcode.com/users/images/1d18be62-568e-408b-bdc0-e0b2c8025357_1616084116.2890737.jpeg" alt="image"></p>
<p>The next example:</p>
<p><img src="https://assets.leetcode.com/users/images/ed5060f8-e074-4ceb-b646-5c3286ed087e_1616084166.6079986.jpeg" alt="image"></p>
]]></content></item><item><title>Leetcode 1119</title><link>https://nathannaveen.dev/posts/leetcode-1119/</link><pubDate>Thu, 18 Mar 2021 11:32:48 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1119/</guid><description>1119. Remove Vowels from a String
The first approach is pretty simple. If the letter is not a vowel, add it to a resulting string.
The second approach is better because we keep on using the same string. We remake the string every time there is a vowel by going around the vowel.
This can be shown with some images:
We can have:
input: &amp;quot;leetcode&amp;quot; expected output: &amp;quot;ltcd&amp;quot; We can fast forward to our first vowel, 'e'.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-vowels-from-a-string/">1119. Remove Vowels from a String</a></p>
<p>The first approach is pretty simple. If the letter is not a vowel, add it to a resulting string.</p>
<p>The second approach is better because we keep on using the same string. We remake the string every time there is a vowel by going around the vowel.</p>
<p>This can be shown with some images:</p>
<p>We can have:</p>
<pre tabindex="0"><code>input: &quot;leetcode&quot;
expected output: &quot;ltcd&quot;
</code></pre><blockquote>
<p>We can fast forward to our first vowel, <code>'e'</code>.</p>
</blockquote>
<p><img src="https://assets.leetcode.com/users/images/18d37f14-9f11-44bb-aeaa-380a78ed8e79_1616078946.4208002.jpeg" alt="image"></p>
<blockquote>
<p>Now we re-assign our string <code>s</code> to <code>&quot;leetcode&quot;</code> without the <code>'e'</code> and we get:</p>
</blockquote>
<p><img src="https://assets.leetcode.com/users/images/84537cdb-336d-45c1-9c74-3d2963e8d74f_1616079116.1516426.jpeg" alt="image"></p>
<blockquote>
<p>We have circled the letter <code>'t'</code> because <code>i == 2</code> but we forgot about the second <code>'e'</code> so we subtract <code>1</code> from <code>i</code> and we get:</p>
</blockquote>
<p><img src="https://assets.leetcode.com/users/images/d7f8958f-e111-44b7-b0e0-49715e6033e9_1616079273.371251.jpeg" alt="image"></p>
<blockquote>
<p>As we can see, <code>'e'</code> is a vowel, so we have to remake the string to:</p>
</blockquote>
<p><img src="https://assets.leetcode.com/users/images/ade21b1b-388e-420e-ad0b-606b55326c13_1616079425.8852704.jpeg" alt="image"></p>
<blockquote>
<p><em>Note: As you can see, we skipped a lot of the letter because it would take a lot longer if we didn&rsquo;t ignore them</em></p>
<p>You can see that the <code>'o'</code> is a vowel, so we can remake the string to:</p>
</blockquote>
<p><img src="https://assets.leetcode.com/users/images/785dcddd-63ab-403f-9e31-e77ee37ed4fc_1616079718.1413827.jpeg" alt="image"></p>
<blockquote>
<p>We skipped some more letters again because the other letters were not needed.</p>
<p>The <code>'e'</code> is a vowel, so we can remake the string to:</p>
</blockquote>
<p><img src="https://assets.leetcode.com/users/images/c437f9a8-4422-4153-bd63-616a7e11c0f5_1616079950.2055788.jpeg" alt="image"></p>
<p>As we can see, <code>ltdc</code> is equal to our expected output.</p>
<p><strong>The First Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeVowels</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">s</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;o&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;u&#39;</span> {
            <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> string(<span style="color:#a6e22e">i2</span>)
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removeVowels</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;e&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;o&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;u&#39;</span> {
            <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[:<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1138</title><link>https://nathannaveen.dev/posts/leetcode-1138/</link><pubDate>Thu, 18 Mar 2021 11:32:42 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1138/</guid><description>1138. Alphabet Board Path
I have to admit the code might look daunting but it is actualy not that complicated after I explain it to you.
What the Problem is asking:
The problem asks us to make a board of letters:
[ [a, b, c, d, e] [f, g, h, i, j] [k, l, m, n, o] [p, q, r, s, t] [u, v, w, x, y] [z] ] Then it gives us a word target.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/alphabet-board-path/submissions/">1138. Alphabet Board Path</a></p>
<p><em>I have to admit the code might look daunting but it is actualy not that complicated after I explain it to you.</em></p>
<p><strong>What the Problem is asking:</strong></p>
<p>The problem asks us to make a board of letters:</p>
<pre tabindex="0"><code>[
[a, b, c, d, e]
[f, g, h, i, j]
[k, l, m, n, o]
[p, q, r, s, t]
[u, v, w, x, y]
[z]
]
</code></pre><p>Then it gives us a word <code>target</code>. We start at the position <code>(0, 0)</code> which is the letter <code>a</code> on the board.</p>
<p>We are asked to split <code>target</code> into letters and then go from the current position to the letter, and then from the new position to the next letter, and so on.</p>
<p>If we:</p>
<ul>
<li>go right then add a <code>R</code> to the result</li>
<li>go left then add a <code>L</code> to the result</li>
<li>go up then add a <code>U</code> to the result</li>
<li>go down then add a <code>D</code> to the result</li>
<li>reach the letter we add a <code>!</code> to the result</li>
</ul>
<p>We can show this with the following example:</p>
<pre tabindex="0"><code>input: 

    target = &quot;leet&quot;

output:

    &quot;DDR!UURRR!!DDD!&quot;
</code></pre><p><img src="https://i.imgur.com/ZxVnZJZ.jpg" alt=""></p>
<p><img src="https://i.imgur.com/6f4mbqt.jpg" alt=""></p>
<blockquote>
<p>The first letter is <code>l</code> so we have to go to the letter <code>l</code> from <code>a</code>. So we go <code>2</code> down and <code>1</code> right. So we add <code>DDR!</code> to the result.</p>
</blockquote>
<p><img src="https://i.imgur.com/5Ox3cCZ.jpg" alt=""></p>
<blockquote>
<p>The second letter is <code>e</code> so we we have to first go up <code>2</code> and right <code>3</code>. Doing this we add <code>UURRR!</code> to the result.</p>
</blockquote>
<p><img src="https://i.imgur.com/2aqk8sw.jpg" alt=""></p>
<blockquote>
<p>The third letter is an <code>e</code> as well, so we just have to add a <code>!</code> to the result.</p>
</blockquote>
<p><img src="https://i.imgur.com/jJjDdUL.jpg" alt=""></p>
<blockquote>
<p>Since the last letter is <code>t</code> we just go down <code>3</code> from our current possition, so we just add <code>DDD!</code> to the result.</p>
</blockquote>
<p>After we have finished we can see that our result is <code>&quot;DDR! + UURRR! + ! + DDD!&quot; = &quot;DDR!UURRR!!DDD!&quot;</code> and our expected output is <code>&quot;DDR!UURRR!!DDD!&quot;</code>, and we can also see that our expected output is equal to our output.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">alphabetBoardPath</span>(<span style="color:#a6e22e">target</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {

    <span style="color:#a6e22e">board</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;abcde&#34;</span>, <span style="color:#e6db74">&#34;fghij&#34;</span>, <span style="color:#e6db74">&#34;klmno&#34;</span>, <span style="color:#e6db74">&#34;pqrst&#34;</span>, <span style="color:#e6db74">&#34;uvwxy&#34;</span>, <span style="color:#e6db74">&#34;z&#34;</span>}
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#a6e22e">row</span>, <span style="color:#a6e22e">col</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">target</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">newCol</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">newCol</span> &lt; <span style="color:#ae81ff">6</span>; <span style="color:#a6e22e">newCol</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">newRow</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">containsPosition</span>(<span style="color:#a6e22e">board</span>[<span style="color:#a6e22e">newCol</span>], int32(<span style="color:#a6e22e">target</span>[<span style="color:#a6e22e">i</span>]))
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newRow</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> { <span style="color:#75715e">// this says that the row contains the letter
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">amountOfRowsLeft</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">newCol</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">col</span>)

                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newCol</span> &gt; <span style="color:#a6e22e">col</span> {
                    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">col</span>; <span style="color:#a6e22e">k</span> &lt; <span style="color:#a6e22e">newCol</span>; <span style="color:#a6e22e">k</span><span style="color:#f92672">++</span> {
                        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">k</span> &gt; len(<span style="color:#a6e22e">board</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> {
                            <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span>
                            <span style="color:#66d9ef">break</span>
                        }
                        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;D&#34;</span>
                        <span style="color:#a6e22e">amountOfRowsLeft</span><span style="color:#f92672">--</span>
                    }
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newCol</span> &lt; <span style="color:#a6e22e">col</span> {
                    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">k</span> &lt; <span style="color:#a6e22e">col</span><span style="color:#f92672">-</span><span style="color:#a6e22e">newCol</span>; <span style="color:#a6e22e">k</span><span style="color:#f92672">++</span> {
                        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;U&#34;</span>
                        <span style="color:#a6e22e">amountOfRowsLeft</span><span style="color:#f92672">--</span>
                    }
                }

                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newRow</span> &gt; <span style="color:#a6e22e">row</span> {
                    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">k</span> &lt; <span style="color:#a6e22e">newRow</span><span style="color:#f92672">-</span><span style="color:#a6e22e">row</span>; <span style="color:#a6e22e">k</span><span style="color:#f92672">++</span> {
                        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;R&#34;</span>
                    }
                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">newRow</span> &lt; <span style="color:#a6e22e">row</span> {
                    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">k</span> &lt; <span style="color:#a6e22e">row</span><span style="color:#f92672">-</span><span style="color:#a6e22e">newRow</span>; <span style="color:#a6e22e">k</span><span style="color:#f92672">++</span> {
                        <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;L&#34;</span>
                    }
                }

                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">amountOfRowsLeft</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> {
                    <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;D&#34;</span>
                }
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">amountOfRowsLeft</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
                    <span style="color:#a6e22e">res</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;!&#34;</span>
                }
                <span style="color:#a6e22e">row</span>, <span style="color:#a6e22e">col</span> = <span style="color:#a6e22e">newRow</span>, <span style="color:#a6e22e">newCol</span>
                <span style="color:#66d9ef">break</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">containsPosition</span>(<span style="color:#a6e22e">theRow</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">letter</span> <span style="color:#66d9ef">int32</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#75715e">/*
</span><span style="color:#75715e">        This checks whether theRow contains the letter
</span><span style="color:#75715e">    */</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">theRow</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i2</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">letter</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">i</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &gt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">a</span>
}

</code></pre></div>]]></content></item><item><title>Leetcode 1041</title><link>https://nathannaveen.dev/posts/leetcode-1041/</link><pubDate>Tue, 16 Mar 2021 12:41:13 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1041/</guid><description>1041. Robot Bounded In Circle
What the problem is asking:
The problem says that it will give a string with the letters &amp;quot;L&amp;quot;, &amp;quot;R&amp;quot; and &amp;quot;G&amp;quot; to command a robot. &amp;quot;L&amp;quot; means to turn left 90 degrees, &amp;quot;R&amp;quot; means to turn right 90 degrees, and &amp;quot;G&amp;quot; means to go forward one unit. The problem says to return true if the robot can continue in that pattern forever and keep going in a circle.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/robot-bounded-in-circle/">1041. Robot Bounded In Circle</a></p>
<p><strong>What the problem is asking:</strong></p>
<p>The problem says that it will give a string with the letters <code> &quot;L&quot;, &quot;R&quot;</code> and <code>&quot;G&quot;</code> to command a robot. <code>&quot;L&quot;</code> means to turn left 90 degrees, <code>&quot;R&quot;</code> means to turn right 90 degrees, and <code>&quot;G&quot;</code> means to go forward one unit. The problem says to return <code>true</code> if the robot can continue in that pattern forever and keep going in a circle. This can be shown with the following example:</p>
<pre tabindex="0"><code>input := &quot;GL&quot;
expected output := true
</code></pre><p>I have depicted how this example works with the following picture:</p>
<p><img src="https://i.imgur.com/qZFauur.jpg" alt=""></p>
<blockquote>
<ul>
<li>In the first image, we start off at the point <code>(0, 0)</code></li>
<li>In the second image, we do the input <code>&quot;GL&quot;</code>, we go up one unit and then turn left, <em>(I have put a dotted line with an arrow to signify that we are going left in the next move)</em></li>
<li>In the following image, we do the <code>&quot;GL&quot;</code> again.</li>
<li>In the fourth image, we do <code>&quot;GL&quot;</code> again.</li>
<li>In the fifth image, we have finished the circle by doing <code>&quot;GL&quot;</code> again.</li>
<li>And in the sixth image, we can see that this keeps on repeating.</li>
</ul>
<p>I have not added anymore because I think it is pretty self-explanatory</p>
</blockquote>
<p><strong>What my code is doing:</strong></p>
<p>We use the variables <code>x, y' and </code>degree<code>. </code>x<code>and</code>y<code>signify where the current position is. And</code>degree<code>is what angle you are pointing at. We use</code>4` numbers to signify this:</p>
<ul>
<li><code>degree = 0</code> means pointing up</li>
<li><code>degree = 1</code> means pointing right</li>
<li><code>degree = 2</code> means pointing down</li>
<li><code>degree = 3</code> means pointing left</li>
</ul>
<p>Next, we have to know when to add and subtract from <code>x</code> and `y'.</p>
<ul>
<li>If <code>degree == 0 &amp;&amp; letter == 'G'</code> then add one to <code>y</code></li>
<li>If <code>degree == 1 &amp;&amp; letter == 'G'</code> then add one to <code>x</code></li>
<li>If <code>degree == 2 &amp;&amp; letter == 'G'</code> then subtract one to <code>y</code></li>
<li>If <code>degree == 3 &amp;&amp; letter == 'G'</code> then subtract one to <code>x</code></li>
</ul>
<p>Then to check whether <code>return true || return false</code>. We can see that if the robot returns to the origin at its last move, it has to be going in a circle, and if it is not facing <code>up</code> we know that it will make a circle after some time. If you don&rsquo;t understand the part of not facing up, look at the image below.</p>
<p><img src="https://i.imgur.com/jpzxNOG.jpg" alt=""></p>
<blockquote>
<p>This is the same example as the example above <code>input := &quot;GL&quot;</code>, when we go through the string we get the image above, as we saw in the last instance, if we continue to make this pattern, we get a circle so as return <code>true</code> for this.</p>
<p>You can try this with an example. It will be <code>true</code> for any degree that is not facing up.</p>
</blockquote>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isRobotBounded</span>(<span style="color:#a6e22e">instructions</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">degree</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">instructions</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;R&#39;</span> {
            <span style="color:#a6e22e">degree</span> = (<span style="color:#a6e22e">degree</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>
            <span style="color:#66d9ef">continue</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;L&#39;</span> {
            <span style="color:#a6e22e">degree</span> = (<span style="color:#a6e22e">degree</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>
            <span style="color:#66d9ef">continue</span>
        } 

        <span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">degree</span> {
        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#a6e22e">y</span><span style="color:#f92672">++</span>
        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span>:
            <span style="color:#a6e22e">x</span><span style="color:#f92672">++</span>
        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span>:
            <span style="color:#a6e22e">y</span><span style="color:#f92672">--</span>
        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span>:
            <span style="color:#a6e22e">x</span><span style="color:#f92672">--</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">degree</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div><p><strong>We can take out the switch case and make the code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isRobotBounded</span>(<span style="color:#a6e22e">instructions</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">degree</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">addSubtractXAndY</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">instructions</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;R&#39;</span> {
            <span style="color:#a6e22e">degree</span> = (<span style="color:#a6e22e">degree</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;L&#39;</span> {
            <span style="color:#a6e22e">degree</span> = (<span style="color:#a6e22e">degree</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">degree</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">degree</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
                <span style="color:#a6e22e">y</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">addSubtractXAndY</span>[<span style="color:#a6e22e">degree</span>]
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#a6e22e">x</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">addSubtractXAndY</span>[<span style="color:#a6e22e">degree</span>]
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">degree</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 692</title><link>https://nathannaveen.dev/posts/leetcode-692/</link><pubDate>Mon, 15 Mar 2021 11:52:46 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-692/</guid><description>692. Top K Frequent Words
The Main Idea:
This solution first adds the words to an array called frequency and sorts frequency after that, return the k most frequency words.
Adding to the array Frequency:
You might be confused when we do this part:
for _, ints := range frequency { if words[ints[0]] == word { contains = true ints[1]++ break } } We can simplify the if statement into if words[frequency[i][0]] = word.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/top-k-frequent-words/">692. Top K Frequent Words</a></p>
<p><strong>The Main Idea:</strong></p>
<p>This solution first adds the words to an array called <code>frequency</code> and sorts <code>frequency</code> after that, return the <code>k</code> most frequency words.</p>
<p><strong>Adding to the array <code>Frequency</code>:</strong></p>
<p>You might be confused when we do this part:</p>
<pre tabindex="0"><code>for _, ints := range frequency {
    if words[ints[0]] == word {
        contains = true
        ints[1]++
        break
    }
}
</code></pre><p>We can simplify the <code>if</code> statement into <code>if words[frequency[i][0]] = word</code>. This looks a little weird. We have to do this to get the word for each frequency because the array <code>words</code> is an array of strings, while a frequency is integers. So <code>frequency</code> is an matrix array of <code>[int][int]</code> because we can&rsquo;t do <code>[string][int]</code>, basically <code>frequency</code> is <code>[the index of the first word with this word][frequency]</code>. This might still be a little confusing, so I drew up some pictures I describe it:</p>
<p>The input:</p>
<p><img src="https://i.imgur.com/DDnSxUW.jpg" alt=""></p>
<p>Next:</p>
<p><img src="https://i.imgur.com/4urAoah.jpg" alt=""></p>
<blockquote>
<p>As you can see, our word is <code>taco</code>. Since it is at the <code>0th</code> index and there is only one of it, we can add the array <code>[0, 1]</code> to <code>frequency</code>.</p>
</blockquote>
<p>Then:</p>
<p><img src="https://i.imgur.com/I7OztWX.jpg" alt=""></p>
<blockquote>
<p>The new current word is <code>sunny</code>, and since it is at the <code>1st</code> index and there is only <code>1</code> sunny so far, we can add the array <code>[1, 1]</code> to the array.</p>
</blockquote>
<p><img src="https://i.imgur.com/csUnLCw.jpg" alt=""></p>
<blockquote>
<p>This is just like the previous two parts since there is only <code>1</code> word <code>day</code> so far and the index is <code>2</code> we can add the array <code>[2, 1]</code></p>
</blockquote>
<p><img src="https://i.imgur.com/S8WjhpX.jpg" alt=""></p>
<blockquote>
<p>Now we have something different, we can do <code>if words[ints[0]] == word</code> and it outcomes as <code>true</code> (Remember that <code>if words[ints[0]] == word</code> equals <code>if words[frequency[i][0]] == word</code>). We can put the index of the word which is in <code>ints [0]</code> and then put it back into <code>words</code>, and we get the word, then we check whether that word is equal to the current word. If it is, we can add one to the frequency because they are both the same word.</p>
</blockquote>
<p>We can continue to do this until the end:</p>
<p><img src="https://i.imgur.com/v1oWouh.jpg" alt=""></p>
<blockquote>
<p>When we just continue doing this we get the matrix array <code>[[0, 2][1, 2], [2, 2]]</code> for <code>frequency</code>.</p>
</blockquote>
<p><strong>The Sort:</strong></p>
<p>The sorted array can be shown using another post of mine <a href="https://nathannaveen.dev/posts/leetcode-973/">Leetcode: 973</a> about the middle of the page, and it will say <code>The Idea Of This Solution:</code>, that is where it starts. That post is pretty similar but not the same, so you can look at that to get the main idea of the sort.</p>
<p><strong>Getting the K most Frequent:</strong></p>
<p>We get the <code>k</code> most frequent elements from the matrix array <code>frequency</code>. Since the matrix is sorted from smallest to greatest, we have to loop from the index of the last element to the last element&rsquo;s index minus <code>k</code>.</p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">topKFrequent</span>(<span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">string</span> {
    <span style="color:#a6e22e">frequency</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{}

    <span style="color:#a6e22e">frequency</span> = <span style="color:#a6e22e">addWordsToFrequency</span>(<span style="color:#a6e22e">words</span>, <span style="color:#a6e22e">frequency</span>)

    <span style="color:#a6e22e">sortFrequency</span>(<span style="color:#a6e22e">words</span>, <span style="color:#a6e22e">frequency</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">frequency</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> len(<span style="color:#a6e22e">frequency</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">--</span> {
        <span style="color:#a6e22e">res</span> = append(<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>]])
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">addWordsToFrequency</span>(<span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">frequency</span> [][]<span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#75715e">/*
</span><span style="color:#75715e">       adding all the words to the matrix called frequency
</span><span style="color:#75715e">
</span><span style="color:#75715e">           * first check whether frequency has the word in it, if it does
</span><span style="color:#75715e">           add one to the frequency, if it doesn&#39;t add another word to the
</span><span style="color:#75715e">           array with a frequency of 1
</span><span style="color:#75715e">    */</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">word</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">words</span> {
        <span style="color:#a6e22e">contains</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">frequency</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">==</span> <span style="color:#a6e22e">word</span> {
                <span style="color:#a6e22e">contains</span> = <span style="color:#66d9ef">true</span>
                <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">++</span>
                <span style="color:#66d9ef">break</span>
            }
        }
        <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">contains</span> {
            <span style="color:#a6e22e">frequency</span> = append(<span style="color:#a6e22e">frequency</span>, []<span style="color:#66d9ef">int</span>{<span style="color:#a6e22e">i</span>, <span style="color:#ae81ff">1</span>})
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">frequency</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sortFrequency</span>(<span style="color:#a6e22e">words</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">frequency</span> [][]<span style="color:#66d9ef">int</span>) {
    
    <span style="color:#75715e">/*
</span><span style="color:#75715e">    This fuction sorts the matrix called frequency.
</span><span style="color:#75715e">    */</span>
    
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">frequency</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>] &lt; <span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">||</span>
            (<span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> 
            <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>]] &gt; <span style="color:#a6e22e">words</span>[<span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]])) {

            <span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">frequency</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }
}
</code></pre></div>]]></content></item><item><title>Leetcode 1721</title><link>https://nathannaveen.dev/posts/leetcode-1721/</link><pubDate>Sun, 14 Mar 2021 15:57:58 -0400</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1721/</guid><description>1721. Swapping Nodes in a Linked List
The idea of this solution is pretty simple.
First, we find the length of the linked list Next, we iterate through the linked list up until the ending kth node And then we iterate through the linked list to to kth node Then, last of all, switch the value of the kth node with the value of the kth node from the end.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/swapping-nodes-in-a-linked-list/">1721. Swapping Nodes in a Linked List</a></p>
<p>The idea of this solution is pretty simple.</p>
<ul>
<li>First, we find the length of the linked list</li>
<li>Next, we iterate through the linked list up until the ending <code>kth</code> node</li>
<li>And then we iterate through the linked list to to <code>kth</code> node</li>
<li>Then, last of all, switch the value of the <code>kth</code> node with the value of the <code>kth</code> node from the end.</li>
</ul>
<p>Finding the length of the linked list is pretty simple. Just get a counter. In this problem, it is <code>lengthOfLinkedList</code>, then iterate through the linked list and add one to the counter every iteration.</p>
<p>We get the <code>kth</code> node from the end by iterating a counter <code>i</code> through <code>0</code> to <code>lengthOfLinkedList - k</code>, <code>lengthOfLinkedList - k</code> gets the length of the linked list and then subtracts <code>k</code> from it, so we get the ending <code>kth</code> node.</p>
<p>We get the <code>kth</code> node by just iterating through <code>0</code> to <code>k - 1</code>. We do <code>k - 1</code> because we do <code>first = first.Next</code> which makes it the next value.</p>
<p>Then we switch the two values by just assigning them to each other if you don&rsquo;t understand <code>second.Val, first.Val = first.Val, second.Val</code> it is basically:</p>
<pre tabindex="0"><code>temp := second.Val

second.Val = first.Val
first.Val = temp
</code></pre><p><strong>The code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">swapNodes</span>(<span style="color:#a6e22e">head</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">ListNode</span> {
    <span style="color:#a6e22e">first</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    <span style="color:#a6e22e">second</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    <span style="color:#a6e22e">findLength</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">head</span>
    <span style="color:#a6e22e">lengthOfLinkedList</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">findLength</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">lengthOfLinkedList</span><span style="color:#f92672">++</span>
        <span style="color:#a6e22e">findLength</span> = <span style="color:#a6e22e">findLength</span>.<span style="color:#a6e22e">Next</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">lengthOfLinkedList</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">second</span> = <span style="color:#a6e22e">second</span>.<span style="color:#a6e22e">Next</span>
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">k</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">first</span> = <span style="color:#a6e22e">first</span>.<span style="color:#a6e22e">Next</span>
    }

    <span style="color:#a6e22e">second</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#a6e22e">first</span>.<span style="color:#a6e22e">Val</span> = <span style="color:#a6e22e">first</span>.<span style="color:#a6e22e">Val</span>, <span style="color:#a6e22e">second</span>.<span style="color:#a6e22e">Val</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">head</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1329</title><link>https://nathannaveen.dev/posts/leetcode-1329/</link><pubDate>Sat, 13 Mar 2021 10:42:03 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1329/</guid><description>1329. Sort the Matrix Diagonally
The idea of this solution is kind of hard to explain so I will show it with the following images:
i = len(mat), and j = len(mat[0])
The yellow part is every where i and j will iterate
the diagonal lines are in red
Before we continue you might be confused about why we switch 2 and 1 even though i = 1 and j = 1.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sort-the-matrix-diagonally/">1329. Sort the Matrix Diagonally</a></p>
<p>The idea of this solution is kind of hard to explain so I will show it with the following images:</p>
<p><img src="https://i.imgur.com/aoRkExV.jpg" alt=""></p>
<blockquote>
<p><code>i = len(mat)</code>, and <code>j = len(mat[0])</code></p>
</blockquote>
<blockquote>
<p>The yellow part is every where <code>i</code> and <code>j</code> will iterate</p>
</blockquote>
<blockquote>
<p>the diagonal lines are in red</p>
</blockquote>
<p><img src="https://i.imgur.com/vfJAh1L.jpg" alt=""></p>
<blockquote>
<p>Before we continue you might be confused about why we switch <code>2</code> and <code>1</code> even though <code>i = 1</code> and <code>j = 1</code>. This can be shown with the example array <code>[3, 2, 1] </code> we can pretend that <code>3, 2, 1</code> is diagonal:</p>
</blockquote>
<pre tabindex="0"><code>3
 2
  1
</code></pre><p>When we switch <code>3</code> and <code>2</code></p>
<pre tabindex="0"><code>2
 3
  1
</code></pre><p>Then when we switch <code>3</code> and <code>1</code></p>
<pre tabindex="0"><code>2
 1
  3
</code></pre><p>This is not sorted, so we have to switch <code>1</code> and <code>2</code></p>
<pre tabindex="0"><code>1
 2
  3
</code></pre><p><img src="https://i.imgur.com/hmdt5Jx.jpg" alt=""></p>
<p><strong>The Code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">diagonalSort</span>(<span style="color:#a6e22e">mat</span> [][]<span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">mat</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">mat</span>[<span style="color:#ae81ff">0</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#a6e22e">newI</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
            <span style="color:#a6e22e">newJ</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">k</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">newI</span>, <span style="color:#a6e22e">newJ</span>); <span style="color:#a6e22e">k</span><span style="color:#f92672">++</span> {
                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">newI</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>][<span style="color:#a6e22e">newJ</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>] &gt; <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">newI</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">newJ</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] {

                    <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">newI</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>][<span style="color:#a6e22e">newJ</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>], <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">newI</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">newJ</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] = 
                    <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">newI</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][<span style="color:#a6e22e">newJ</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">mat</span>[<span style="color:#a6e22e">newI</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>][<span style="color:#a6e22e">newJ</span><span style="color:#f92672">-</span><span style="color:#a6e22e">k</span>]
                }
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">mat</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1461</title><link>https://nathannaveen.dev/posts/leetcode-1461/</link><pubDate>Fri, 12 Mar 2021 12:03:46 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1461/</guid><description>1461. Check If a String Contains All Binary Codes of Size K
The idea of this solution is to make a sliding window and add all the substrings os size k to a map, if the maps length is equal to 2^k return true.
We do 2^k because we have to acount for all posibilitys of 0 and 1.
func hasAllCodes(s string, k int) bool { m := make(map[string]int) for i := 0; i &amp;lt; len(s)-k+1; i++ { m[s[i:i+k]]++ } return len(m) == twoPow(k) } func twoPow(k int) int { res := 1 for i := 0; i &amp;lt; k; i++ { res *= 2 } return res } By using bit maniplation we can simplify the code, left shifting is basicly multiplying by 2.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/">1461. Check If a String Contains All Binary Codes of Size K</a></p>
<p>The idea of this solution is to make a sliding window and add all the substrings os size <code>k</code> to a map, if the maps length is equal to <code>2^k</code> return <code>true</code>.</p>
<p>We do <code>2^k</code> because we have to acount for all posibilitys of <code>0</code> and <code>1</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hasAllCodes</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>:<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#a6e22e">k</span>]]<span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">m</span>) <span style="color:#f92672">==</span> <span style="color:#a6e22e">twoPow</span>(<span style="color:#a6e22e">k</span>) 
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">twoPow</span>(<span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">res</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">res</span> <span style="color:#f92672">*=</span> <span style="color:#ae81ff">2</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>
}
</code></pre></div><p><em>By using bit maniplation we can simplify the code, left shifting is basicly multiplying by <code>2</code>. This can be shown using the following:</em></p>
<pre tabindex="0"><code>2^0 = 1    1 &lt;&lt; 0 = 1

2^1 = 2    1 &lt;&lt; 1 = 2

2^2 = 4    1 &lt;&lt; 2 = 4
</code></pre><p><strong>The simplifyed the code:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hasAllCodes</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>)

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">k</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">m</span>[<span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>:<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#a6e22e">k</span>]]<span style="color:#f92672">++</span>
    }

    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">m</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#a6e22e">k</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1401</title><link>https://nathannaveen.dev/posts/leetcode-1401/</link><pubDate>Fri, 12 Mar 2021 11:01:21 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1401/</guid><description>1401. Circle and Rectangle Overlapping
The Main Idea
The idea of this solution is to find the distance from the middle of the circle to the edge of a rectangle, and if the distance is smaller than or equal to the radius, we know that the rectangle overlaps with the circle.
If you don&amp;rsquo;t understand, look at the following images:
As you can see, the circle and the rectangle do not overlap, and this can be shown by the distance between the center of the circle and the closest edge of the rectangle.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/circle-and-rectangle-overlapping/">1401. Circle and Rectangle Overlapping</a></p>
<p><strong>The Main Idea</strong></p>
<p>The idea of this solution is to find the distance from the middle of the circle to the edge of a rectangle, and if the distance is smaller than or equal to the radius, we know that the rectangle overlaps with the circle.</p>
<p>If you don&rsquo;t understand, look at the following images:</p>
<p><img src="https://i.imgur.com/VlNe79P.jpg" alt=""></p>
<blockquote>
<p>As you can see, the circle and the rectangle do not overlap, and this can be shown by the distance between the center of the circle and the closest edge of the rectangle. The length is <code>√8 = 2.82842712474619</code>, <code>2.82842712474619</code> is greater than the radius of <code>1</code>, so we know that the circle and the rectangle don&rsquo;t overlap.</p>
</blockquote>
<p><img src="https://i.imgur.com/W6g3aVq.jpg" alt=""></p>
<blockquote>
<p>In the image above, we can see that the circle and the edge of the rectangle overlaps. And we can see that the distance between the closest edge of the square and the center of the circle is equal to the radius, so we can see that the rectangle and the rectangle overlap.</p>
</blockquote>
<p><img src="https://i.imgur.com/h8vdUkm.jpg" alt=""></p>
<blockquote>
<p>In the image above, we can see that the circle and the rectangle overlap. The distance between the center of the circle and the closest point on the rectangle is <code>√5 = 2.23606797749979</code> and <code>2.23606797749979 &lt; radius</code> because <code>radius = 3</code>. Since the distance is smaller than the <code>radius</code>, we can say that the two shapes overlap.</p>
</blockquote>
<p><strong>How It Works:</strong></p>
<p>Now that we have covered the main idea of this function, we can get into the details.</p>
<p><strong>The first part is:</strong></p>
<pre tabindex="0"><code>if x_center &lt; x2 &amp;&amp; x_center &gt; x1 &amp;&amp; y_center &lt; y2 &amp;&amp; y_center &gt; y1 {
    return true
}
</code></pre><p>The part above is for if the circle inside the square. Such as like:</p>
<p><img src="https://i.imgur.com/ChoNOLK.jpg" alt=""></p>
<p>As you can see, the circle radius is smaller than the distance of the closest edge and the center of the circle. We know that the circle and the rectangle overlap, but the computer thinks that they don&rsquo;t overlap because the <code>distance from the center of the circle to the edge of the rectangle &gt; radius</code>, so we have to make sure that this is counted as an overlap. We check whether this is overlap by checking whether the center of the circle is between the two x&rsquo;s and between the two y&rsquo;s.</p>
<p><strong>The next part:</strong></p>
<pre tabindex="0"><code>if ((y1 &lt;= y_center+radius &amp;&amp; y1 &gt;= y_center) ||
    (y2 &gt;= y_center-radius &amp;&amp; y2 &lt;= y_center)) &amp;&amp; x_center &gt;= x1 &amp;&amp;
    x_center &lt;= x2 {
    
    return true
}
</code></pre><p>This can be used for something like the example below:</p>
<p><img src="https://i.imgur.com/5T1fXOG.jpg" alt=""></p>
<p>The main idea of:</p>
<p><code>((y1 &lt;= y_center+radius &amp;&amp; y1 &gt;= y_center) || (y2 &gt;= y_center-radius &amp;&amp; y2 &lt;= y_center)) &amp;&amp; x_center &gt;= x1 &amp;&amp; x_center &lt;= x2</code></p>
<p>is:</p>
<p><code>(y1 &lt;= y_center + radius || y2 &gt;= y_center - radius) &amp;&amp; x_center &gt;= x1 &amp;&amp; x_center &lt;= x2</code></p>
<p>Then after that, we can start to understand the additional parts.</p>
<p>First, <code>y1 &lt;= y_center + radius</code> is for if the circle is beneath the rectangle, just like the image below.</p>
<p><img src="https://i.imgur.com/8YwF90u.jpg" alt=""></p>
<p><code>y1 &lt;= y_center + radius</code> in this example is <code>6 &lt;= 5 + 2</code> which equals <code>6 &lt;= 7</code>. So for this example the <code>y</code>&rsquo;s' overlap.</p>
<p><code>y2 &gt;= y_center - radius</code> is for when the circle is on top of the rectangle like in the picture below:</p>
<p><img src="https://i.imgur.com/NjPtHcc.jpg" alt=""></p>
<p><code>y2 &gt;= y_center - radius</code> in this example is <code>4 &gt;= 6 - 2</code> which is <code>4 = 4</code>. As we can see the <code>y</code>&rsquo;s' overlap.</p>
<p>The next part, <code>x_center &gt;= x1 &amp;&amp; x_center &lt;= x2</code> is for checking whether the center of the circle is inside the <code>x</code>&rsquo;s values of the rectangle, so we can use the example above again.</p>
<p>As we said before the <code>y</code> parts of the shapes overlap. And now we can see that <code>x_center = 8</code>. <code>8 &gt; 5</code>, <code>x1 = 5</code>, and <code>8 &lt; 10</code>, and <code>x2 = 8</code>.</p>
<p>We can see an example where the <code>y</code> parts overlap, but the <code>x</code>&rsquo;s parts don&rsquo;t.</p>
<p><img src="https://i.imgur.com/vTe00bX.jpg" alt=""></p>
<p>The <code>y</code> parts work, <code>y2 &gt;= y_center - radius</code>, which equals <code>4 &gt;= 5 - 2</code> and when simplifyed <code>4 &gt;= 3</code>. But the <code>x</code> parts don&rsquo;t work because the equations are <code>x_center &gt;= x1</code> and <code>x_center &lt;= x2</code>, and when we put in our numbers we get <code>13 &gt;= 5</code> but when we put in the numbers into the second equation, <code>13 &gt; 10</code> while we want <code>x_center &lt;= x2</code>. So we know that the shapes don&rsquo;t overlap.</p>
<p>It also checks whether <code>y1 &gt;= y_center</code> and <code>y2 &lt;= y_center</code> because we want to make sure that we don&rsquo;t <code>return true</code> for extra test cases.</p>
<p><strong>The Next Part:</strong></p>
<pre tabindex="0"><code>if y_center &lt;= y2 &amp;&amp; y_center &gt;= y1 &amp;&amp; ((x_center-radius &lt;= x2 &amp;&amp; 
    x_center &gt;= x2) || (x_center+radius &gt;= x1 &amp;&amp; x_center &lt;= x1)) {
    
    return true
}
</code></pre><p>We use this part if the part before fails. This checks whether the circle is on either side of the rectangle.</p>
<p>This checks whether the <code>y_center</code> is greater than or equal to <code>y1</code> and if it is smaller than or equal to <code>y2</code>. Then it checks whether the <code>x_center - radius</code> is smaller than or equal to <code>x2</code>, or <code>x_center - radius &gt;= x1</code>. It also checks whether <code>x_center &gt;= x2</code> and <code>x_center &lt;= x1</code>, just like the previous part.</p>
<p>We can explain this with the following images:</p>
<p><img src="https://i.imgur.com/PyTQ1SK.jpg" alt=""></p>
<p>This circle is on the right of the rectangle.</p>
<p>We can see that the <code>y_center = 4</code> and <code>4 &lt; 7</code>, <code>y2 = 7</code>, and <code>4 &gt; 1</code>, <code>y1 = 1</code>. We can see that <code>((x_center-radius &lt;= x2 &amp;&amp; x_center &gt;= x2) || (x_center+radius &gt;= x1 &amp;&amp; x_center &lt;= x1))</code> is true because <code>x_center-radius &lt;= x2 &amp;&amp; x_center &gt;= x2</code>, since <code>x_center = 4</code>, and that <code>radius = 2</code>. <code>4 - 2 &lt;= 3</code> and <code>4 &gt; 3</code> so we return true.</p>
<p>The next image is on the left of the image:</p>
<p><img src="https://i.imgur.com/6VIXcKh.jpg" alt=""></p>
<p>The <code>y</code> part is the same as the last image, so we know that the <code>y</code> part overlaps. So we can see that the <code>y</code> part overlaps. We can use the formula <code>x_center + radius &gt;= x1 &amp;&amp; x_center &lt;= x1</code>. <code>x_center = 3</code> and the <code>radius  = 2</code>. So when we input the numbers into the variables, <code>3 + 2 &gt;= 4</code> when simplifyed <code>5 &gt;= 4</code>, <code>x1 = 4</code>. The next equation is <code>3 &lt;= 4</code>.</p>
<p>As we can see <code>x_center+radius &gt;= x1 &amp;&amp; x_center &lt;= x1</code> is for if the circle is on the right of the rectangle. And <code>x_center-radius &lt;= x2 &amp;&amp; x_center &gt;= x2</code> is for if the circle is on the left of the rectangle.</p>
<p><strong>The last part:</strong></p>
<pre tabindex="0"><code>if powerOfTwo(x_center-x1)+powerOfTwo(y_center-y1) &lt;= 
    powerOfTwo(radius) {
    
    return true
}
</code></pre><p>The idea of <code>powerOfTwo(x_center-x1)+powerOfTwo(y_center-y1) &lt;= powerOfTwo(radius)</code> is basicly pythagoras theorem, <code>a^2 + b^2 = c^2</code>. <code>a^2 + b^2 = c^2</code>, and this is basicly <code>(x_center - x1)^2 + (y_center - y1)^2 = radius^2</code>.</p>
<p>The distance formula is <code>d = sqrt((x1 - x2)^2 + (y1 - y2)^2)</code>, though for this problem we don&rsquo;t need the <code>sqrt</code> so we the equation can be <code>d = (x1 - x2)^2 + (y1 - y2)^2)</code>, so we can continue to use <code>(x_center - x1)^2 + (y_center - y1)^2 = radius^2</code>.</p>
<p>All of the following are similar except for different points, <code>x1, x2, y1, y2, x_center, y_center</code>.</p>
<pre tabindex="0"><code>powerOfTwo(x_center-x1)+powerOfTwo(y_center-y2) &lt;= powerOfTwo(radius)

powerOfTwo(x_center-x2)+powerOfTwo(y_center-y1) &lt;= powerOfTwo(radius)

powerOfTwo(x_center-x2)+powerOfTwo(y_center-y2) &lt;= powerOfTwo(radius)
</code></pre><h2 id="the-code">The Code:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkOverlap</span>(<span style="color:#a6e22e">radius</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">x_center</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">y_center</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">x1</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">y1</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">x2</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">y2</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">x_center</span> &lt; <span style="color:#a6e22e">x2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x_center</span> &gt; <span style="color:#a6e22e">x1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y_center</span> &lt; <span style="color:#a6e22e">y2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y_center</span> &gt; <span style="color:#a6e22e">y1</span> {
        <span style="color:#75715e">// Checking whether the circle is in the middle of the square
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }

    <span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">y1</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">y_center</span><span style="color:#f92672">+</span><span style="color:#a6e22e">radius</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y1</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">y_center</span>) <span style="color:#f92672">||</span>
    (<span style="color:#a6e22e">y2</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">y_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">radius</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y2</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">y_center</span>)) <span style="color:#f92672">&amp;&amp;</span>
        <span style="color:#a6e22e">x_center</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">x1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x_center</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">x2</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">y_center</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">y2</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">y_center</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">y1</span> <span style="color:#f92672">&amp;&amp;</span> ((<span style="color:#a6e22e">x_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">radius</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">x2</span> <span style="color:#f92672">&amp;&amp;</span> 
    <span style="color:#a6e22e">x_center</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">x2</span>) <span style="color:#f92672">||</span> (<span style="color:#a6e22e">x_center</span><span style="color:#f92672">+</span><span style="color:#a6e22e">radius</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">x1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">x_center</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">x1</span>)) {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">x_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">x1</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">y_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">y1</span>) <span style="color:#f92672">&lt;=</span> 
            <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">radius</span>) <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">x_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">x1</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">y_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">y2</span>) <span style="color:#f92672">&lt;=</span> 
            <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">radius</span>) <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">x_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">x2</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">y_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">y1</span>) <span style="color:#f92672">&lt;=</span> 
            <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">radius</span>) <span style="color:#f92672">||</span>
        <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">x_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">x2</span>)<span style="color:#f92672">+</span><span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">y_center</span><span style="color:#f92672">-</span><span style="color:#a6e22e">y2</span>) <span style="color:#f92672">&lt;=</span> 
            <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">radius</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">powerOfTwo</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 836</title><link>https://nathannaveen.dev/posts/leetcode-836/</link><pubDate>Wed, 10 Mar 2021 12:10:01 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-836/</guid><description>836. Rectangle Overlap
This solution is pretty similar to my other solution Leetcode: 223 This is the part in the other solution which I based this solution on:
// A = rec1[0], B = rec1[1], C = rec1[2], D = rec1[3] // E = rec2[0], F = rec2[1], G = rec2[2], H = rec2[3] left, right := max(A, E), min(G, C) up, down := min(D, H), max(F, B) if right &amp;gt; left &amp;amp;&amp;amp; up &amp;gt; down { sum -= (right - left) * (up - down) // overlap } The idea of this solution can be shown using some images:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rectangle-overlap/">836. Rectangle Overlap</a></p>
<p>This solution is pretty similar to my other solution <a href="https://nathannaveen.dev/posts/leetcode-223/">Leetcode: 223</a> This is the part in the other solution which I based this solution on:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// A = rec1[0], B = rec1[1], C = rec1[2], D = rec1[3]
</span><span style="color:#75715e">// E = rec2[0], F = rec2[1], G = rec2[2], H = rec2[3]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">A</span>, <span style="color:#a6e22e">E</span>), <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">G</span>, <span style="color:#a6e22e">C</span>)
<span style="color:#a6e22e">up</span>, <span style="color:#a6e22e">down</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">D</span>, <span style="color:#a6e22e">H</span>), <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">F</span>, <span style="color:#a6e22e">B</span>)

<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">right</span> &gt; <span style="color:#a6e22e">left</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">up</span> &gt; <span style="color:#a6e22e">down</span> {
    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">-=</span> (<span style="color:#a6e22e">right</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">left</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">up</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">down</span>) <span style="color:#75715e">// overlap
</span><span style="color:#75715e"></span>}
</code></pre></div><p>The idea of this solution can be shown using some images:</p>
<p>We can get the input <code>[1, 1, 3, 3], [2, 2, 7, 6]</code> and graph it:</p>
<p><img src="https://i.imgur.com/xmXTUnU.jpg" alt=""></p>
<p><img src="https://i.imgur.com/vmxU1Ni.jpg" alt=""></p>
<p>And when the <code>left, right, up, down</code> lines are shown we get the overlap. We can find the <code>left, right, up, down</code> lines by doing the folowing:</p>
<ul>
<li><code>Left =</code> the maximum of <code>rec1 x1</code> and <code>rec2 x1</code>, and as you can see <code>rec2 x1</code> is <code>left</code> because it is greater than <code>rec1 x1</code></li>
<li><code>Right =</code> the minimum of <code>rec1 x2</code> and <code>rec2 x2</code>. As we can see <code>right</code> is <code>rec1 x1</code>.</li>
<li><code>Down =</code> the maximum of <code>rec1 y1</code> and <code>rec2 y1</code>. As we can also see the max is <code>rec2 y1</code>.</li>
<li><code>Up =</code> the minimum of <code>rec1 y2</code> and <code>rec2 y2</code>. Al we can see the min is <code>rec1 y2</code>.</li>
</ul>
<p>And now you can see that this is how we find whether there is an overlap.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">isRectangleOverlap</span>(<span style="color:#a6e22e">rec1</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">rec2</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {

    <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">rec1</span>[<span style="color:#ae81ff">0</span>], <span style="color:#a6e22e">rec2</span>[<span style="color:#ae81ff">0</span>]), <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">rec1</span>[<span style="color:#ae81ff">2</span>], <span style="color:#a6e22e">rec2</span>[<span style="color:#ae81ff">2</span>])
    <span style="color:#a6e22e">up</span>, <span style="color:#a6e22e">down</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">rec1</span>[<span style="color:#ae81ff">3</span>], <span style="color:#a6e22e">rec2</span>[<span style="color:#ae81ff">3</span>]), <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">rec1</span>[<span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">rec2</span>[<span style="color:#ae81ff">1</span>])

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">right</span> &gt; <span style="color:#a6e22e">left</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">up</span> &gt; <span style="color:#a6e22e">down</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>

}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1750</title><link>https://nathannaveen.dev/posts/leetcode-1750/</link><pubDate>Tue, 09 Mar 2021 21:04:18 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1750/</guid><description>1750. Minimum Length of String After Deleting Similar Ends
The idea of this solution is pretty simple, so it can be shown with this image:
func minimumLength(s string) int { for len(s) &amp;gt; 1 &amp;amp;&amp;amp; s[0] == s[len(s)-1] { end := s[len(s)-1] lenS := len(s) for i := 0; i &amp;lt; lenS; i++ { if s[len(s)-1] != s[0] { s = s[:len(s)-i-1] break } } lenS = len(s) for i := 0; i &amp;lt; lenS; i++ { if s[0] !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/">1750. Minimum Length of String After Deleting Similar Ends</a></p>
<p>The idea of this solution is pretty simple, so it can be shown with this image:</p>
<p><img src="https://i.imgur.com/QAmU64G.jpg" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">minimumLength</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {

    <span style="color:#66d9ef">for</span> len(<span style="color:#a6e22e">s</span>) &gt; <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] {
        <span style="color:#a6e22e">end</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#a6e22e">lenS</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">s</span>)

        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">lenS</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>] {
                <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[:len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
                <span style="color:#66d9ef">break</span>
            }
        }
        <span style="color:#a6e22e">lenS</span> = len(<span style="color:#a6e22e">s</span>)
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">lenS</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">end</span> {
                <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">s</span>[<span style="color:#ae81ff">0</span><span style="color:#f92672">+</span><span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
                <span style="color:#66d9ef">break</span>
            }
        }
    }

    <span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">s</span>)
}

</code></pre></div>]]></content></item><item><title>Leetcode 1752</title><link>https://nathannaveen.dev/posts/leetcode-1752/</link><pubDate>Tue, 09 Mar 2021 21:04:13 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1752/</guid><description>1752. Check if Array Is Sorted and Rotated
The idea of this solution is to loop through the array, and then check whether there is a nums[i] which is greater than nums[(i+1) % len(nums)] (By the way (i+1) % len(nums) is for getting the next number) if nums[i] &amp;gt; nums[(i+1)%len(nums)] then add one to a counter called counter. Then we check whether counter is greater than or equal to 2.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/">1752. Check if Array Is Sorted and Rotated</a></p>
<p>The idea of this solution is to loop through the array, and then check whether there is a <code>nums[i]</code> which is greater than <code>nums[(i+1) % len(nums)]</code> (By the way <code>(i+1) % len(nums)</code> is for getting the next number) if <code>nums[i] &gt; nums[(i+1)%len(nums)]</code> then add one to a counter called <code>counter</code>. Then we check whether <code>counter</code> is greater than or equal to <code>2</code>.</p>
<p>We check whether <code>counter</code>is greater than or eqal to <code>2</code> because if there are more than one <code>nums[i] &gt; nums[(i+1)%len(nums)]</code> we know that it is not sorted.</p>
<p><img src="https://i.imgur.com/v2Qpuls.jpg" alt=""></p>
<blockquote>
<p>This is sorted, we know because there is only one <code>nums[i] &gt; nums[(i+1)%len(nums)]</code>. The array is <code>[4, 5, 1, 2, 3]</code> and when we rotate it we get <code>[1, 2, 3, 4, 5]</code>.</p>
</blockquote>
<p><img src="https://i.imgur.com/SHE6tuZ.jpg" alt=""></p>
<blockquote>
<p>We we can see that the array <code>[2, 5, 1, 4, 3]</code> can never be rotated and be sorted:
<code>[5, 1, 4, 3, 2]</code>
<code>[1, 4, 3, 2, 5]</code>
<code>[4, 3, 2, 5, 1]</code>
<code>[3, 2, 5, 1, 4]</code>
<code>[2, 5, 1, 4, 3]</code></p>
<p>As you can see there is two <code>nums[i] &gt; nums[(i+1)%len(nums)]</code> so it will never be sorted.</p>
</blockquote>
<p><img src="https://i.imgur.com/1oHm0tT.jpg" alt=""></p>
<blockquote>
<p>The input is already sorted, but even without that we can see that there is only one <code>nums[i] &gt; nums[(i+1)%len(nums)]</code>.</p>
</blockquote>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">nums</span>[(<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>len(<span style="color:#a6e22e">nums</span>)] {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p><strong>We could make the first solution a little better by doing:</strong> <em>(This is better because we are only checking the if when we add to counter and not every single time)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">nums</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">nums</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">nums</span>[(<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>len(<span style="color:#a6e22e">nums</span>)] {
            <span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span> {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
            }
        }

    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1784</title><link>https://nathannaveen.dev/posts/leetcode-1784/</link><pubDate>Mon, 08 Mar 2021 14:31:01 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1784/</guid><description>1784. Check if Binary String Has at Most One Segment of Ones
The problem description is:
Given a binary string s without leading zeros, return true if s contains at most one contiguous segment of ones. Otherwise, return false.
This is kind of hard to understand, so I am going to explain it. A contiguous segment of ones looks like:
111000 100 10 1 11110000 And some of the ones that are not contiguous are:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/">1784. Check if Binary String Has at Most One Segment of Ones</a></p>
<p>The problem description is:</p>
<blockquote>
<p>Given a binary string <code>s</code> without leading zeros, return <code>true</code> if <code>s</code> contains at most one contiguous segment of ones. Otherwise, return <code>false</code>.</p>
</blockquote>
<p>This is kind of hard to understand, so I am going to explain it. A contiguous segment of ones looks like:</p>
<pre tabindex="0"><code>111000
100
10
1
11110000
</code></pre><p>And some of the ones that are not contiguous are:</p>
<pre tabindex="0"><code>101
1001
111001
10011
</code></pre><p>You should be able to see that the non-consecutive strings have a <code>&quot;01&quot;</code>. We have to check whether there is a <code>&quot;01&quot;</code> in the string. If so, return <code>false</code>.</p>
<p><em>Note: We don&rsquo;t have to worry about strings with leading zeros. That is why we can check whether there is a <code>&quot;01&quot;</code> in a string and return <code>false</code> if so. If we had leading zeros, there would be <code>&quot;01&quot;</code>&rsquo;s in the string even if there are consecutive ones, such as <code>&quot;001110&quot;</code>. We should return <code>true,</code> but there is a <code>&quot;01&quot;</code>.</em></p>
<p><strong>First Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkOnesSegment</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>:<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;01&#34;</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p><strong>Second Solution:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">checkOnesSegment</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1332</title><link>https://nathannaveen.dev/posts/leetcode-1332/</link><pubDate>Mon, 08 Mar 2021 09:42:56 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1332/</guid><description>1332. Remove Palindromic Subsequences
This problem asks us to find all the subsequences in a string called s. s only contains the letters a and b.
When we are doing this problem, the main thing to look at is that it says &amp;ldquo;subsequences,&amp;rdquo; not &amp;ldquo;substrings,&amp;rdquo; and that there are only two letters a and b.
The difference between &amp;ldquo;substrings&amp;rdquo; and &amp;ldquo;subsequences&amp;rdquo; is substrings are consecutive letters, while subsequences doesn&amp;rsquo;t have to be consecutive.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-palindromic-subsequences/">1332. Remove Palindromic Subsequences</a></p>
<p>This problem asks us to find all the subsequences in a string called <code>s</code>. <code>s</code> only contains the letters <code>a</code> and <code>b</code>.</p>
<p>When we are doing this problem, the main thing to look at is that it says &ldquo;subsequences,&rdquo; not &ldquo;substrings,&rdquo; and that there are only two letters <code>a</code> and <code>b</code>.</p>
<p>The difference between &ldquo;substrings&rdquo; and &ldquo;subsequences&rdquo; is substrings are consecutive letters, while subsequences doesn&rsquo;t have to be consecutive.</p>
<p>Since we have the letters <code>a</code> and <code>b</code>, we can remove all the <code>a</code>&rsquo;s first and then remove all the <code>b</code>&rsquo;s.</p>
<p><strong>How This Works:</strong></p>
<p>First, we can have an example of an empty string <code>&quot;&quot;</code> and return <code>0</code> because the string is already empty.</p>
<p>Next, we can have the example of the input being a palindrome, <code>&quot;ababa&quot;</code>, we can return <code>1</code> because we get an empty string when we remove this palindrome.</p>
<p>Finally, we can return <code>2</code> because we first add all the <code>a</code>&rsquo;s together and remove that palindrome, then add all the <code>b</code>&rsquo;s together and remove that palindrome. This can be shown with the folowing example:</p>
<p><code>input = &quot;ababaab</code> <code>output = 2</code></p>
<p>The output is <code>2</code> because we remove the palindromic subsequence of <code>&quot;aaaa&quot;</code>. We get the letters at the indexes <code>0, 2, 4, 5</code>, and they make <code>&quot;aaaa&quot;</code>. Then for the second part, we remove the palindrome <code>&quot;bbb&quot;</code>. We get the palindrome <code>&quot;bbb&quot;</code> by getting the indexes <code>1, 3, 6</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">removePalindromeSub</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">palindromic</span>(<span style="color:#a6e22e">s</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">2</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">palindromic</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
    <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">s</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">left</span> &lt; <span style="color:#a6e22e">right</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">left</span>] <span style="color:#f92672">!=</span> <span style="color:#a6e22e">s</span>[<span style="color:#a6e22e">right</span>] {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
        }

        <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> = <span style="color:#a6e22e">left</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">right</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 915</title><link>https://nathannaveen.dev/posts/leetcode-915/</link><pubDate>Mon, 08 Mar 2021 08:20:50 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-915/</guid><description>The idea of this solution is to find the max of the left and then check whether the max is always smaller than all the rights. If it is smaller than all of them return the index (1 indexed).
This can be shown with a picture:
func partitionDisjoint(A []int) int { max := A[0] for i := 0; i &amp;lt; len(A); i++ { shouldReturn := true if max &amp;lt; A[i] { max = A[i] } for j := i + 1; j &amp;lt; len(A); j++ { if A[j] &amp;lt; max { shouldReturn = false break } } if shouldReturn { return i + 1 } } return -1 }</description><content type="html"><![CDATA[<p>The idea of this solution is to find the max of the left and then check whether the max is always smaller than all the rights. If it is smaller than all of them return the index <strong>(1 indexed)</strong>.</p>
<p>This can be shown with a picture:</p>
<p><img src="https://i.imgur.com/ZzXwU7p.jpg" alt=""></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">partitionDisjoint</span>(<span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">A</span>[<span style="color:#ae81ff">0</span>]

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">A</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">shouldReturn</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">true</span>

        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">max</span> &lt; <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span>] {
            <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">i</span>]
        }
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">j</span> &lt; len(<span style="color:#a6e22e">A</span>); <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">A</span>[<span style="color:#a6e22e">j</span>] &lt; <span style="color:#a6e22e">max</span> {
                <span style="color:#a6e22e">shouldReturn</span> = <span style="color:#66d9ef">false</span>
                <span style="color:#66d9ef">break</span>
            }
        }
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">shouldReturn</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
        }
    }

    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 973</title><link>https://nathannaveen.dev/posts/leetcode-973/</link><pubDate>Sun, 07 Mar 2021 10:43:03 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-973/</guid><description>973. K Closest Points to Origin
The New Distance Formula:
The Euclidean Distance Formula equals (I have drawn this in a picture because the symbols don&amp;rsquo;t aline up when writen up in text)
This can be simplifyed by taking out the square root. We can take out the square root because we are not finding the minimum distance but the point with the minimum distance, and the distance doesn&amp;rsquo;t need to be square rooted.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/k-closest-points-to-origin/">973. K Closest Points to Origin</a></p>
<p><strong>The New Distance Formula:</strong></p>
<p>The Euclidean Distance Formula equals (I have drawn this in a picture because the symbols don&rsquo;t aline up when writen up in text)</p>
<p><img src="https://i.imgur.com/krhq25z.jpg" alt=""></p>
<p>This can be simplifyed by taking out the square root. We can take out the square root because we are not finding the minimum distance but the point with the minimum distance, and the distance doesn&rsquo;t need to be square rooted. The distance not needing to be square rooted can be shown by doing an experiment, for example let us take the square root of 10 and the square root of 8, we know that the square root of 10 will allways be greater than the square root of 8. We also know that 10 will always be greater than 8. Try this with any two positive numbers. <em>Note: I said positve numbers because any square number is positive.</em></p>
<p>So now our equation for the distance is:</p>
<p><img src="https://i.imgur.com/U8tN3Zs.jpg" alt=""></p>
<p>We can simplify the equation again by taking out the x2 and the y2 because x2 and y2 will always be <code>0</code>. X2 and y2 will always be <code>0</code> because the first point is a regular point, but the second point will be <code>(0, 0)</code> because the second point will always be the origin. This can by shown by an example:</p>
<p><img src="https://i.imgur.com/sbAt4Eg.jpg" alt=""></p>
<p>So the new distance equation is:</p>
<p><img src="https://i.imgur.com/VDLMrjy.jpg" alt=""></p>
<hr>
<p><strong>The Idea Of This Solution:</strong></p>
<p>Now that we know that we know the distance formula for this problem is <code>x^2 + y^2</code> we just have to sort the matrix array.</p>
<p>The way we sort the array is we check whether the current distance is smaller than the the previous distance, then if so we switch the two points, then we move back a space, to check whether the previous value is greater than the current value. This can be show by the following example:</p>
<p><img src="https://i.imgur.com/CFPvZ2L.jpg" alt=""></p>
<p><img src="https://i.imgur.com/O4uLB9c.jpg" alt=""></p>
<p>We do nothing because <code>18 &lt; 26</code>. So we continue:</p>
<p><img src="https://i.imgur.com/n6q63xp.jpg" alt=""></p>
<p><code>26</code> is greater than <code>20</code> so we have to switch them. We also have to subtract <code>2</code> from <code>i</code>. <code>i</code> will only go back by <code>1</code> even though we subtract <code>2</code> from <code>i</code> because the for loop adds <code>1</code> to <code>i</code>.</p>
<p><img src="https://i.imgur.com/YhAlxxI.jpg" alt=""></p>
<p><code>18</code> is smaller than <code>20</code> so do nothing.</p>
<p><img src="https://i.imgur.com/KwfMZjn.jpg" alt=""></p>
<p><code>20</code> is smaller than <code>26</code> so do nothing again.</p>
<p><img src="https://i.imgur.com/fAbocNo.jpg" alt=""></p>
<p><code>26</code> is smaller than <code>130</code> so we do nothing again. Since <code>i</code> is at the end <code>points</code> is <code>[[3, 3], [-2, 4], [5, -1], [7, 9]]</code>.</p>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">kClosest</span>(<span style="color:#a6e22e">points</span> [][]<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) [][]<span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">points</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> {
            <span style="color:#a6e22e">distanceOfIMinusOne</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">square</span>(<span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">square</span>(<span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>])
            <span style="color:#a6e22e">distanceOfI</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">square</span>(<span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">+</span> <span style="color:#a6e22e">square</span>(<span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>])
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">distanceOfIMinusOne</span> &gt; <span style="color:#a6e22e">distanceOfI</span> {
                <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span>] = <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">points</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
                <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">points</span>[:<span style="color:#a6e22e">k</span>]
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">square</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 1773</title><link>https://nathannaveen.dev/posts/leetcode-1773/</link><pubDate>Sat, 06 Mar 2021 19:06:10 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1773/</guid><description>1773. Count Items Matching a Rule
The idea of this solution is pretty simple. We know that the array items has only 3 items. The first one is the ruleKey = &amp;quot;type&amp;quot; the next one is ruleKey = &amp;quot;color&amp;quot;, and the next one is ruleKey = &amp;quot;name&amp;quot;. We just have to set a index of each item to either 0, 1 or 2. Then just loop over each item and check whether the item[index] == ruleValue.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/count-items-matching-a-rule/">1773. Count Items Matching a Rule</a></p>
<p>The idea of this solution is pretty simple. We know that the array <code>items</code> has only <code>3</code> items. The first one is the <code>ruleKey = &quot;type&quot;</code> the next one is <code>ruleKey = &quot;color&quot;</code>, and the next one is <code>ruleKey = &quot;name&quot;</code>. We just have to set a index of each item to either <code>0, 1</code> or <code>2</code>. Then just loop over each item and check whether the <code>item[index] == ruleValue</code>.</p>
<pre tabindex="0"><code>func countMatches(items [][]string, ruleKey string, ruleValue string) int {
	res := 0
	index := 0
	if ruleKey == &quot;color&quot; {
		index = 1
	} else if ruleKey == &quot;name&quot; {
		index = 2
	}

	for _, item := range items {
		if item[index] == ruleValue {
			res++
		}
	}
	
	return res
}
</code></pre>]]></content></item><item><title>Leetcode 1779</title><link>https://nathannaveen.dev/posts/leetcode-1779/</link><pubDate>Sat, 06 Mar 2021 19:05:54 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1779/</guid><description>1779. Find Nearest Point That Has the Same X or Y Coordinate
What The Problem Is Asking:
This problem asks you to find the smallest Manhattan distance from a given point to a matrix array of points called points.
The problem also asks you to only find the Manhattan distance of the points that have the same x value as the first given point, or the same y value as the given point.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/">1779. Find Nearest Point That Has the Same X or Y Coordinate</a></p>
<p><strong>What The Problem Is Asking:</strong></p>
<p>This problem asks you to find the smallest Manhattan distance from a given point to a matrix array of points called <code>points</code>.</p>
<p>The problem also asks you to only find the Manhattan distance of the points that have the same x value as the first given point, or the same y value as the given point.</p>
<p>Then the problem asks you to return the index of the minimum distance. If there is no point that has the same x value or the save y value <code>return -1</code>.</p>
<p>The Manhattan distance is the distance between two points by doing <code>abs(y1 - y2) + abs(x1 - x2)</code>.</p>
<p><strong>How The Solution Works:</strong></p>
<p>The main idea of this solution is that the problem asks to find the Manhattan distance of the points that have the same x or y value.</p>
<p><em>The reason this is so important can be shown using an image:</em></p>
<p>The average 2 points that don&rsquo;t have the same x value or y value can by shown by this image:</p>
<p><img src="https://i.imgur.com/9VP0fWS.jpg" alt=""></p>
<p>This is for two points that have the same x value:</p>
<p><img src="https://i.imgur.com/ppluacv.jpg" alt=""></p>
<blockquote>
<p>When the two <code>x</code> values are the same we just have to calculate the <code>y</code> part because when we subtract both the <code>x</code> parts we get <code>0</code>. This can be shown by the image above <code>(4 - 2) + (3 - 3) = 2 + 0 = 2</code>. The part <code>(4 - 2)</code> is the part that follows the <code>y</code> axis, and the part <code>(3 - 3)</code> is the <code>x</code> part.</p>
</blockquote>
<p>This is for two points that have the same y value:</p>
<p><img src="https://i.imgur.com/u4sdUZO.jpg" alt=""></p>
<blockquote>
<p>When both <code>y</code>&rsquo;s are equal then the <code>y</code> part will be equal to zero so we wont have to calculate the <code>y</code> part. This can be show by the above example, <code>(1 - 1) + (4 - 1) = 3</code>. The <code>y</code> part <code>(1 - 1) = 0</code>.</p>
</blockquote>
<p>So, when a point in the array has a <code>x</code> value equal to the given <code>x</code> value just calculate the <code>y</code> part. And when the <code>y</code> part of a point in the array is eqal to the given <code>y</code> value just calculate the <code>x</code> part.</p>
<p><strong>Extra Notes:</strong></p>
<p>This solution doesn&rsquo;t use a build in <code>math.Abs()</code> function because it would take longer to process than using a self made absolute function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">nearestValidPoint</span>(<span style="color:#a6e22e">x</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">y</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">points</span> [][]<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">minimum</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">100000000</span> <span style="color:#75715e">// the max value has to be 10^4 * 10^4 = 10^8
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// 10^8 = 100,000,000
</span><span style="color:#75715e"></span>    
    <span style="color:#a6e22e">resIndex</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">point</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">points</span> {
        <span style="color:#a6e22e">manhattanYAbs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">absoluteValue</span>(<span style="color:#a6e22e">point</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">y</span>)
        <span style="color:#a6e22e">manhattanXAbs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">absoluteValue</span>(<span style="color:#a6e22e">point</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> <span style="color:#a6e22e">x</span>)
        
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">point</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">manhattanYAbs</span> &lt; <span style="color:#a6e22e">minimum</span> {
            <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">manhattanYAbs</span>
            <span style="color:#a6e22e">resIndex</span> = <span style="color:#a6e22e">i</span>
        } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">point</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">manhattanXAbs</span> &lt; <span style="color:#a6e22e">minimum</span> {
            <span style="color:#a6e22e">minimum</span> = <span style="color:#a6e22e">manhattanXAbs</span>
            <span style="color:#a6e22e">resIndex</span> = <span style="color:#a6e22e">i</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">resIndex</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">absoluteValue</span>(<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span> &lt; <span style="color:#ae81ff">0</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">n</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 223</title><link>https://nathannaveen.dev/posts/leetcode-223/</link><pubDate>Fri, 05 Mar 2021 11:04:23 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-223/</guid><description>223. Rectangle Area
The main idea of this solution is to find the area of each indivigual rectangle and then add them together. After that subtract the overlap of both of them.
If you don&amp;rsquo;t understand the ABCDRectangle and the EFGHRectangle then look at the following images:
We can have the example:
Let us start of with the ABCDRectangle:
When we do the equation (D - B) * (C - A) we are basicly doing width * length.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rectangle-area/">223. Rectangle Area</a></p>
<p>The main idea of this solution is to find the area of each indivigual rectangle and then add them together. After that subtract the overlap of both of them.</p>
<p>If you don&rsquo;t understand the <code>ABCDRectangle</code> and the <code>EFGHRectangle</code> then look at the following images:</p>
<p><strong>We can have the example:</strong></p>
<p><img src="https://i.imgur.com/St26i3w.jpg" alt=""></p>
<p>Let us start of with the <code>ABCDRectangle</code>:</p>
<p><img src="https://i.imgur.com/Td0G3vB.jpg" alt=""></p>
<p>When we do the equation <code>(D - B) * (C - A)</code> we are basicly doing <code>width * length</code>. The <code>width</code> is <code>(D - B)</code>. This can be show by using the image above where <code>A = -4, B = 2, C = 4, D = 5</code>. When we do <code>(D - B)</code> it equal <code>(5 - 2) = 3</code>. So we know that the rectangle has a width of <code>3</code>.</p>
<p>Now the <code>length</code> is going to be <code>(C - A)</code> which is equal to <code>(4 - (-4)) = (4 + 4) = 8</code>. Since we already know the width, and we know the height we can put them together. <code>width * height = 3 * 8 = 24</code>. The area of this rectangle is <code>24</code>.</p>
<p>Next let us do <code>EFGHRectangle</code>:</p>
<p><img src="https://i.imgur.com/D1uXC5Q.jpg" alt=""></p>
<p>This is pretty much the same as the <code>ABCDRectangle</code>. The equation <code>(H - F) * (G - E) = width * length</code>. As you can see in the image <code>E = 3, F = -2, G = 7, H = 8</code>. When we input the numbers in for the variables we get <code>(H - F) = (8 - (-2)) = (8 + 2) = 10</code>, so our width is <code>10</code>.</p>
<p>We can do the same thing but with length, The part of the equation that is for length is <code>(G - E)</code> when we input the numbers in for the variables we get <code>(7 - 3) = 4</code>. So we have a length of <code>4</code>.</p>
<p>When we multiply our width and our length together we get <code>10 * 4 = 40</code> so we have an area of <code>40</code>.</p>
<p>When we put both rectangles together we get:</p>
<p>Since we have an area of <code>24</code> for <code>ABCDRectangle</code> and an area of <code>40</code> for <code>EFGHRectangle</code>, when we add them up we get an area of <code>64</code>. The only problem is we have some over lap (Which I have colored purple in the image). We need to subtract the overlap from the total area.</p>
<p><img src="https://i.imgur.com/GBuwLLv.jpg" alt=""></p>
<p>The overlap is a rectangle as well so we know that it has two part, <code>length</code> and <code>width</code>. The idea of this part is the find the length and the width and then multiply them together and subtract that product from the total area.</p>
<p>I made four variables to find out where the overlap is, <code>left, right, up , down</code>. Left is the max of <code>A</code> and <code>E</code>. In this example the max is <code>E</code>, and it is the left side of the rectangle. The right is the min of <code>G</code> and <code>C</code>. In this example <code>C</code> is the minimum. Up is the minumum of <code>D</code> and <code>H</code>. <code>D</code> is smaller than <code>H</code> so up is <code>D</code>. Down is the max of <code>F</code> and <code>B</code>. <code>B</code> is greater than <code>F</code> so down is <code>B</code>.</p>
<p>Since we know that <code>left = E, right = C, up = D, down = B</code>, also we know that <code>A = -4, B = 2, C = 4, D = 5, E = 3, F = -2, G = 7, H = 8</code> so we can put those values in for their variables. <code>left = 3, right = 4, up = 5, down = 2</code>.</p>
<p>Before we even make the over lap rectangle we have to check whether there is a overlap rectangle. So we do <code>right &gt; left</code> because that means the right pointer is greater than the left pointer, and that there is not a negative area. Next it checks whether <code>up &gt; down</code> for the same reason that there is no negative area.</p>
<p>Now we can make a rectangle using these values and then subtract that rectangle from the total area. The length will be <code>(right - left) = (4 - 3) = 1</code>, and the width will be <code>(up - down) = (5 - 2) = 3</code>. Since we know that the area of a rectangle is <code>length * width</code> we can do <code>1 * 3 = 3</code>.</p>
<p>Now we can just subtract the area of the overlaping rectangle from the total area which is <code>64 - 3 = 61</code>. Now we know that our answer is 61.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">computeArea</span>(<span style="color:#a6e22e">A</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">B</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">C</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">D</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">E</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">F</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">G</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">H</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">ABCDRectangle</span> <span style="color:#f92672">:=</span> (<span style="color:#a6e22e">D</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">B</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">C</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">A</span>) <span style="color:#75715e">// the first square
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">EFGHRectangle</span> <span style="color:#f92672">:=</span> (<span style="color:#a6e22e">H</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">F</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">G</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">E</span>) <span style="color:#75715e">// the second square
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">sum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ABCDRectangle</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">EFGHRectangle</span>

    <span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">right</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">A</span>, <span style="color:#a6e22e">E</span>), <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">G</span>, <span style="color:#a6e22e">C</span>)
    <span style="color:#a6e22e">up</span>, <span style="color:#a6e22e">down</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">D</span>, <span style="color:#a6e22e">H</span>), <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">F</span>, <span style="color:#a6e22e">B</span>)

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">right</span> &gt; <span style="color:#a6e22e">left</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">up</span> &gt; <span style="color:#a6e22e">down</span> {
        <span style="color:#a6e22e">sum</span> <span style="color:#f92672">-=</span> (<span style="color:#a6e22e">right</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">left</span>) <span style="color:#f92672">*</span> (<span style="color:#a6e22e">up</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">down</span>) <span style="color:#75715e">// overlap
</span><span style="color:#75715e"></span>    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sum</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">max</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>}
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">a</span> &lt; <span style="color:#a6e22e">b</span> {<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span>}
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 908</title><link>https://nathannaveen.dev/posts/leetcode-908/</link><pubDate>Thu, 04 Mar 2021 15:47:37 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-908/</guid><description>908. Smallest Range I
func smallestRangeI(A []int, K int) int { max, min := A[0], A[0] for _, i := range A { if i &amp;gt; max {max = i} if i &amp;lt; min {min = i} } if max-min-2*K &amp;gt; 0 { return max - min - 2 * K } return 0 }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/smallest-range-i/">908. Smallest Range I</a></p>
<pre tabindex="0"><code>func smallestRangeI(A []int, K int) int {
	max, min := A[0], A[0]

	for _, i := range A {
		if i &gt; max {max = i}
		if i &lt; min {min = i}
	}
	if max-min-2*K &gt; 0 {
		return max - min - 2 * K
	}
	return 0
} 
</code></pre>]]></content></item><item><title>Leetcode 347</title><link>https://nathannaveen.dev/posts/leetcode-347/</link><pubDate>Thu, 04 Mar 2021 15:47:24 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-347/</guid><description>347. Top K Frequent Elements
The idea of this solution is pretty simple. First, add all the numbers to a matrix array with the size [number of different elements][2]. Then sort the array, and then add the values to a regular array of size K.
The matrix array has a size of [number of different elemtnets][2] because we need to add every element to its corresponding place in the array and then update the frequency by adding one to it.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/top-k-frequent-elements/">347. Top K Frequent Elements</a></p>
<p>The idea of this solution is pretty simple. First, add all the numbers to a matrix array with the size <code>[number of different elements][2]</code>. Then sort the array, and then add the values to a regular array of size <code>K</code>.</p>
<hr>
<p>The matrix array has a size of <code>[number of different elemtnets][2]</code> because we need to add every element to its corresponding place in the array and then update the frequency by adding one to it. The array is put in the format <code>[frequency][number]</code>.</p>
<hr>
<p>This array is sorted by frequency first and then the number. When we sort, we check whether the frequency of the last number is smaller than the frequency of the current number. If so, then switch the two items, and subtract <code>2</code> from the counter.</p>
<hr>
<p><strong>The sort can be shown using these images:</strong></p>
<p><img src="https://i.imgur.com/fcBnUG3.jpg" alt=""></p>
<p><img src="https://i.imgur.com/GQeJ16L.jpg" alt=""></p>
<blockquote>
<p>[color=#0000ff] The frequency of the previous index is smaller than the current index, so switch them and subtract <code>2</code> from the index.</p>
</blockquote>
<p><img src="https://i.imgur.com/CyCoaX4.jpg" alt=""></p>
<blockquote>
<p>[color=#0000ff] Even though we subtract <code>2</code> from the index, we only go back <code>1</code> place because we add <code>1</code> to the index with the for loop.</p>
<p>Since the index is at zero, which is smaller than <code>1</code>, we don&rsquo;t do anything. We can&rsquo;t check whether the current index&rsquo;s frequency is smaller than the previous index&rsquo;s frequency because there is no previous index.</p>
</blockquote>
<p><img src="https://i.imgur.com/KYCWTms.jpg" alt=""></p>
<blockquote>
<p>[color=#0000ff] We don&rsquo;t do anything because the frequency of the previous number is greater than the current frequency.</p>
</blockquote>
<p><img src="https://i.imgur.com/zRoioun.jpg" alt=""></p>
<blockquote>
<p>[color=#0000ff] We still don&rsquo;t do anything because the previous frequency is greater than the current frequency. Since this is the last index, we know that <code>arr = [[4, 1], [2, 3], [1, 2]]</code> with the greatest frequency at the beginning and the smallest frequencies at the end.</p>
</blockquote>
<hr>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">topKFrequent</span>(<span style="color:#a6e22e">nums</span> []<span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">k</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">arr</span> <span style="color:#f92672">:=</span> [][]<span style="color:#66d9ef">int</span>{}

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">nums</span> {
        <span style="color:#a6e22e">contains</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
        
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ints</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">arr</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#a6e22e">num</span> {
                <span style="color:#a6e22e">ints</span>[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">++</span>
                <span style="color:#a6e22e">contains</span> = <span style="color:#66d9ef">true</span>
                <span style="color:#66d9ef">break</span>
            }
        }
        
        <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">contains</span> {
            <span style="color:#a6e22e">arr</span> = append(<span style="color:#a6e22e">arr</span>, []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">num</span>})
        }
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">arr</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] &lt; <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>] {
            <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] = <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]
            <span style="color:#a6e22e">i</span> <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>
        }
    }

    <span style="color:#a6e22e">nums</span> = []<span style="color:#66d9ef">int</span>{}
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">k</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">nums</span> = append(<span style="color:#a6e22e">nums</span>, <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>])
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">nums</span>
}
</code></pre></div>]]></content></item><item><title>Leetcode 833</title><link>https://nathannaveen.dev/posts/leetcode-833/</link><pubDate>Thu, 04 Mar 2021 10:24:54 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-833/</guid><description>833. Find And Replace in String
func findReplaceString(S string, indexes []int, sources []string, targets []string) string { res := &amp;quot;&amp;quot; for i := 0; i &amp;lt; len(S); i++ { index := 0 // this is the index that is used for indexes, sources, and targets for i2, i3 := range indexes { if i3 == i { index = i2 // we do this because the indexes are not sorted } } if index &amp;lt; len(indexes) &amp;amp;&amp;amp; i == indexes[index] { currentString := sources[index] isSubstring := true for i2 := range currentString { // checking whether the whole substring is equal if string(S[i+i2]) !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-and-replace-in-string/">833. Find And Replace in String</a></p>
<pre tabindex="0"><code>func findReplaceString(S string, indexes []int, sources []string, targets []string) string {
	res := &quot;&quot;

	for i := 0; i &lt; len(S); i++ {
		index := 0 // this is the index that is used for indexes, sources, and targets

		for i2, i3 := range indexes {
			if i3 == i {
				index = i2 // we do this because the indexes are not sorted
			}
		}

		if index &lt; len(indexes) &amp;&amp; i == indexes[index] {
			currentString := sources[index]
			isSubstring := true
			for i2 := range currentString { // checking whether the whole substring is equal
				if string(S[i+i2]) != string(currentString[i2]) { 
					isSubstring = false
					break
				}
			}

			if isSubstring {
				res += targets[index]
				i += len(currentString) - 1 // we have to add to i because we dont want to repeat characters
			} else {
				res += string(S[i]) // if there is not a whole substring just add the character
			}
			index++
		} else {
			res += string(S[i]) // if there is no index in indexes that works for the current index
		}
	}

	return res
}

</code></pre>]]></content></item><item><title>Leetcode 1636</title><link>https://nathannaveen.dev/posts/leetcode-1636/</link><pubDate>Wed, 03 Mar 2021 16:02:55 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1636/</guid><description>1636. Sort Array by Increasing Frequency
The main idea of both the solutions is to add all the numbers to a matrix of lengths [len(nums)][2] and then sort each frequency of numbers by the max frequency. Suppose two values have the same frequency sort them by the value in descending order. After they are sorted, add all the values back to nums and return nums.
This is the sort:
for i := 1; i &amp;lt; len(arr); i++ { if i &amp;gt;= 1 &amp;amp;&amp;amp; ((arr[i-1][0] &amp;gt; arr[i][0]) || (arr[i-1][0] == arr[i][0] &amp;amp;&amp;amp; arr[i-1][1] &amp;lt; arr[i][1])) { arr[i], arr[i-1] = arr[i-1], arr[i] i -= 2 } } The idea of it is to start at the second item (first if 0 indexed) and then check whether the frequency of the number before the current is greater than the frequency of the current number.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sort-array-by-increasing-frequency/">1636. Sort Array by Increasing Frequency</a></p>
<p>The main idea of both the solutions is to add all the numbers to a matrix of lengths <code>[len(nums)][2]</code> and then sort each frequency of numbers by the max frequency. Suppose two values have the same frequency sort them by the value in descending order. After they are sorted, add all the values back to <code>nums</code> and return <code>nums</code>.</p>
<p><strong>This is the sort:</strong></p>
<pre tabindex="0"><code>for i := 1; i &lt; len(arr); i++ {
    if i &gt;= 1 &amp;&amp; ((arr[i-1][0] &gt; arr[i][0]) || 
    (arr[i-1][0] == arr[i][0] &amp;&amp; arr[i-1][1] &lt; arr[i][1])) {
        arr[i], arr[i-1] = arr[i-1], arr[i]
        i -= 2
    }
}
</code></pre><p>The idea of it is to start at the second item (first if 0 indexed) and then check whether the frequency of the number before the current is greater than the frequency of the current number. This is show like this in the code: <code>((arr[i-1][0] &gt; arr[i][0])</code>. Or it checks whether the frequency is the same and whether the current number is greater than the number before the current number, this is show in the code as this: <code>arr[i-1][0] == arr[i][0] &amp;&amp; arr[i-1][1] &lt; arr[i][1]</code>. If either of these things is true, then switch the current and number before the current element and subtracts <code>2</code> from <code>i</code>. We subtract <code>2</code> from <code>i</code> to move back if we have to switch the next current and number before the current numbers. And we subtract <code>2</code>, not <code>1</code> because the loops <code>i++</code> cancel out one of the subtracts. Since we have an <code>i -= 2</code>, we have to check whether <code>i &gt;= 1</code> because if we don&rsquo;t and <code>i == 0</code>, we would have an out-of-bounds exception.</p>
<p>If you dont understand the explaination look at these images:</p>
<p><img src="https://i.imgur.com/2zecuOJ.jpg" alt="">
<img src="https://i.imgur.com/ZoBc0N6.jpg" alt="">
<img src="https://i.imgur.com/FFnnfj8.jpg" alt=""></p>
<p>The second code has better space complexity because, in the first solution, we use a <code>map</code> of size <code>len(nums)</code> and an <code>array</code> of size <code>[len(nums)][2]</code>. In the second solution, we just use an <code>array</code> of size <code>[len(nums)][2]</code>.</p>
<p><strong>Code One:</strong></p>
<pre tabindex="0"><code>func frequencySort(nums []int) []int {
    m := make(map[int]int)
    arr := [][]int{}
    counter := 0

    for _, num := range nums {
        m[num]++
    }
    for i, i2 := range m {
        arr = append(arr, []int{i2, i})
    }

    for i := 1; i &lt; len(arr); i++ {
        if i &gt;= 1 &amp;&amp; ((arr[i-1][0] &gt; arr[i][0]) || 
        (arr[i-1][0] == arr[i][0] &amp;&amp; arr[i-1][1] &lt; arr[i][1])) {
            arr[i], arr[i-1] = arr[i-1], arr[i]
            i -= 2
        }
    }

    for i := 0; i &lt; len(arr); i++ {
        for j := 0; j &lt; arr[i][0]; j++ {
            nums[counter] = arr[i][1]
            counter++
        }
    }

    return nums
}
</code></pre><p><strong>Code Two:</strong></p>
<pre tabindex="0"><code>func frequencySort(nums []int) []int {
    arr := [][]int{}
    counter := 0

    for _, num := range nums {
        contains := false

        for _, ints := range arr {
            if ints[1] == num {
                ints[0]++
                contains = true
                break
            }
        }

        if !contains {
            arr = append(arr, []int{1, num})
        }
    }

    for i := 1; i &lt; len(arr); i++ {
        if i &gt;= 1 &amp;&amp; ((arr[i-1][0] &gt; arr[i][0]) ||
        (arr[i-1][0] == arr[i][0] &amp;&amp; arr[i-1][1] &lt; arr[i][1])) {
            arr[i], arr[i-1] = arr[i-1], arr[i]
            i -= 2
        }
    }

    for i := 0; i &lt; len(arr); i++ {
        for j := 0; j &lt; arr[i][0]; j++ {
            nums[counter] = arr[i][1]
            counter++
        }
    }

    return nums
}
</code></pre>]]></content></item><item><title>Leetcode 1385</title><link>https://nathannaveen.dev/posts/leetcode-1385/</link><pubDate>Wed, 03 Mar 2021 13:25:26 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1385/</guid><description>1385. Find the Distance Value Between Two Arrays
The idea of this solution is to iterate through arr1 and then inside each iteration iterate through arr2. If the absolute value of arr1[i] - arr2[j] is smaller than or equal to d, we know that arr1[i] can&amp;rsquo;t be added to the resulting counter, so we can just break from the loop.
There is a abs function because math.Abs takes longer. When using math.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-the-distance-value-between-two-arrays/">1385. Find the Distance Value Between Two Arrays</a></p>
<p>The idea of this solution is to iterate through <code>arr1</code> and then inside each iteration iterate through <code>arr2</code>. If the absolute value of <code>arr1[i] - arr2[j]</code> is smaller than or equal to <code>d</code>, we know that <code>arr1[i]</code> can&rsquo;t be added to the resulting counter, so we can just <code>break</code> from the loop.</p>
<p>There is a abs function because <code>math.Abs</code> takes longer. When using <code>math.Abs</code> we have to make <code>float64(arr1[i] - arr2[j])</code>, and then make the <code>int(math.Abs)</code>.</p>
<pre tabindex="0"><code>func findTheDistanceValue(arr1 []int, arr2 []int, d int) int {
    res := 0
    shouldAdd := true
    for i := 0; i &lt; len(arr1); i++ {
        for j := 0; j &lt; len(arr2); j++ {
            if abs(arr1[i]-arr2[j]) &lt;= d {
                shouldAdd = false
                break
            }
        }
        if shouldAdd {res++} else {shouldAdd = true}
    }
    return res
}

func abs(n int) int {
    if n &lt; 0 {
        return -n
    }
    return n
}
</code></pre>]]></content></item><item><title>Leetcode 645</title><link>https://nathannaveen.dev/posts/leetcode-645/</link><pubDate>Tue, 02 Mar 2021 11:27:21 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-645/</guid><description>645. Set Mismatch
The idea of this solution is to add every number in the array nums to another array called temp. Next we go through the array temp and check whether the number of a certain number is equal to 2, if it is then we know that it is the repeated number. If it is not 2 but it is 0 we know that it is the skiped number.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/set-mismatch/">645. Set Mismatch</a></p>
<p>The idea of this solution is to add every number in the array <code>nums</code> to another array called <code>temp</code>. Next we go through the array temp and check whether the number of a certain number is equal to <code>2</code>, if it is then we know that it is the repeated number. If it is not <code>2</code> but it is <code>0</code> we know that it is the skiped number. We know that there is always a duplicate number, so if we found the duplicate but not the value that is skiped we return the duplicate and the duplicate plus one, because if the skiped is not inside the array we have to return the next number.</p>
<p><code>temp</code> has <code>10001</code> values because the constraints of the problem say <code>2 &lt;= nums.length &lt;= 10^4, 1 &lt;= nums[i] &lt;= 10^4</code>, since <code>10^4</code> equals <code>10000</code> and the constraints say <code>nums.length &lt;= 10^4</code> we have to do <code>10^4 + 1 = 10000 + 1 = 10001</code>.</p>
<pre tabindex="0"><code>func findErrorNums(nums []int) []int {
    sort.Ints(nums)
    double, skip := 0, 0
    temp := make([]int, 10001)

    for _, num := range nums {
        temp[num]++
    }

    for i, value := range temp {
        if value == 2 {
            double = i
            if skip != 0 {return []int{double, skip}}
        } else if value == 0 {
            skip = i
            if double != 0 {return []int{double, skip}}
        }
    }

    return []int{double, double + 1}
}
</code></pre>]]></content></item><item><title>Leetcode 34</title><link>https://nathannaveen.dev/posts/leetcode-34/</link><pubDate>Tue, 02 Mar 2021 11:27:12 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-34/</guid><description>34. Find First and Last Position of Element in Sorted Array
Both of the solutions use a two pointer approche. The first solution is slower than the second solution because it checks an extra if statment inside the loop, while the second solution checks it outside of the loop.
func searchRange(nums []int, target int) []int { left := 0 right := len(nums) - 1 for left &amp;lt; right { if nums[left] !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. Find First and Last Position of Element in Sorted Array</a></p>
<p>Both of the solutions use a two pointer approche. The first solution is slower than the second solution because it checks an extra <code>if</code> statment inside the loop, while the second solution checks it outside of the loop.</p>
<pre tabindex="0"><code>func searchRange(nums []int, target int) []int {
    left := 0
    right := len(nums) - 1

    for left &lt; right {
        if nums[left] != target {
            left++
        }
        if nums[right] != target {
            right--
        }
        if nums[left] == target &amp;&amp; nums[right] == target {
            return []int{left, right}
        }
    }

    if len(nums) &gt; 0 &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target {
        return []int{left, right}
    }

    return []int{-1, -1}
}
</code></pre><pre tabindex="0"><code>func searchRange(nums []int, target int) []int {
    left := 0
    right := len(nums) - 1

    for (left &lt; right) &amp;&amp; (nums[left] != target || nums[right] != target) {
        if nums[left] != target {
            left++
        }
        if nums[right] != target {
            right--
        }
    }

    if len(nums) &gt; 0 &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target {
        return []int{left, right}
    }

    return []int{-1, -1}
}
</code></pre>]]></content></item><item><title>Leetcode 4</title><link>https://nathannaveen.dev/posts/leetcode-4/</link><pubDate>Mon, 01 Mar 2021 14:20:15 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-4/</guid><description>4. Median of Two Sorted Arrays
The idea of this solution is pretty simple, first append all the nums2 values to nums1. Then sort nums1. If there are a even number of values then the median is the middle two numbers added together and divided by 2. An example could be:
input: nums1 = [1,2], nums2 = [3,4] expected output: 2.5
When the two arrays are combined the new array would be [1, 2, 3, 4] and the two middle numbers are 2, and 3.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">4. Median of Two Sorted Arrays</a></p>
<p>The idea of this solution is pretty simple, first append all the <code>nums2</code> values to <code>nums1</code>. Then sort <code>nums1</code>. If there are a even number of values then the median is the middle two numbers added together and divided by <code>2</code>. An example could be:</p>
<p><code>input: nums1 = [1,2], nums2 = [3,4]</code>
<code>expected output: 2.5</code></p>
<p>When the two arrays are combined the new array would be <code>[1, 2, 3, 4]</code> and the two middle numbers are <code>2</code>, and <code>3</code>. When <code>2</code> and <code>3</code> are added together we get <code>5</code>, and <code>5</code> divided by <code>2</code> is <code>2.5</code>.</p>
<p>If the number of values of <code>nums1</code> is odd, the median is the middle number.</p>
<pre tabindex="0"><code>func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
    nums1 = append(nums1, nums2...)
    sort.Ints(nums1)

    if len(nums1) % 2 == 0 {
        return float64(nums1[len(nums1) / 2 - 1] + nums1[len(nums1) / 2]) / 2
    } else {
        return float64(nums1[len(nums1)/2])
    }
}
</code></pre>]]></content></item><item><title>Leetcode 647</title><link>https://nathannaveen.dev/posts/leetcode-647/</link><pubDate>Mon, 01 Mar 2021 09:27:16 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-647/</guid><description>647. Palindromic Substrings
func countSubstrings(s string) int { res := 0 for i := 0; i &amp;lt; len(s); i++ { for j := 0; j &amp;lt;= len(s)-i; j++ { if s[j:j+i] != &amp;quot;&amp;quot; &amp;amp;&amp;amp; isPalindromic(s[j:j+i]) { res++ } } } if isPalindromic(s) { res++ } return res } func isPalindromic(s string) bool { left, right := 0, len(s)-1 for left &amp;lt;= right { if s[left] != s[right] { return false } left++ right-- } return true }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/palindromic-substrings/">647. Palindromic Substrings</a></p>
<pre tabindex="0"><code>func countSubstrings(s string) int {
    res := 0
    for i := 0; i &lt; len(s); i++ {
        for j := 0; j &lt;= len(s)-i; j++ {
            if s[j:j+i] != &quot;&quot; &amp;&amp; isPalindromic(s[j:j+i]) {
                res++
            }
        }
    }
    if isPalindromic(s) {
        res++
    }
    return res
}

func isPalindromic(s string) bool {
    left, right := 0, len(s)-1

    for left &lt;= right {
        if s[left] != s[right] {
            return false
        }
        left++
        right--
    }
    return true
}
</code></pre>]]></content></item><item><title>Leetcode 459</title><link>https://nathannaveen.dev/posts/leetcode-459/</link><pubDate>Sun, 28 Feb 2021 14:46:05 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-459/</guid><description>459. Repeated Substring Pattern
The idea of this solution is any substring that is repeated throughout the string s has to start at the 0&amp;lsquo;th index and end at another index, such as the 3&amp;lsquo;ed. This can be shown by using a image.
In both the examples the substrings that are repeated are green.
In the first example the substring abc starts at the 0&amp;lsquo;th index and ends at the 2&amp;rsquo;d index.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/repeated-substring-pattern/">459. Repeated Substring Pattern</a></p>
<p>The idea of this solution is any substring that is repeated throughout the string <code>s</code> has to start at the <code>0</code>&lsquo;th index and end at another index, such as the <code>3</code>&lsquo;ed. This can be shown by using a image.</p>
<p><img src="https://i.imgur.com/JB4X253.jpg" alt=""></p>
<blockquote>
<p>In both the examples the substrings that are repeated are green.</p>
<p>In the first example the substring <code>abc</code> starts at the <code>0</code>&lsquo;th index and ends at the <code>2</code>&rsquo;d index.</p>
<p>In the next example the substring is <code>Tacos</code> it starts at the <code>0</code>&lsquo;th index and ends at the <code>4</code>&lsquo;th index</p>
</blockquote>
<p>If you have noticed in both the examples the repeated substring has to start at the <code>0</code>&lsquo;th index and has to end at a following index.</p>
<p>The way my code checks whether it is a substring that repeats through out is it adds that substring to a empty string as many times as it fits in the string. Then it checks whether the new string is equal to <code>s</code>. If it is then <code>return true</code>. If it is never equal then <code>return false</code>.</p>
<pre tabindex="0"><code>func repeatedSubstringPattern(s string) bool {
	for i := 0; i &lt; len(s); i++ {
		end := len(s)
		str := &quot;&quot;
		if i != 0 {
			end = len(s) / i
		}
		for j := 0; j &lt; end; j++ {
			str += s[0:i]
		}
		if str == s {
			return true
		}
	}
	return false
}
</code></pre>]]></content></item><item><title>Leetcode 5</title><link>https://nathannaveen.dev/posts/leetcode-5/</link><pubDate>Sun, 28 Feb 2021 11:41:58 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-5/</guid><description>5. Longest Palindromic Substring
In this solution we dont have to check whether the palindrome substring is greater than the max length substring because the length of the substring will always be greater than or equal to the length of the current max substring. This can be show in an image:
func longestPalindrome(s string) string { max := &amp;quot;&amp;quot; for i := 0; i &amp;lt; len(s); i++ { for j := 0; j &amp;lt;= len(s)-i; j++ { if isPalindromic(s[j : j + i]) { max = s[j : j + i] // getting the substring } } } if isPalindromic(s) { max = s } return max } func isPalindromic(s string) bool { left, right := 0, len(s) - 1 for left &amp;lt; right { if s[left] !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a></p>
<p>In this solution we dont have to check whether the palindrome substring is greater than the max length substring because the length of the substring will always be greater than or equal to the length of the current max substring. This can be show in an image:</p>
<p><img src="https://i.imgur.com/k9YUTYG.jpg" alt=""></p>
<pre tabindex="0"><code>func longestPalindrome(s string) string {
	max := &quot;&quot;
	for i := 0; i &lt; len(s); i++ {
		for j := 0; j &lt;= len(s)-i; j++ {
			if isPalindromic(s[j : j + i]) {
				max = s[j : j + i] // getting the substring
			}
		}
	}
	if isPalindromic(s) {
		max = s
	}
	return max
}

func isPalindromic(s string) bool {
	left, right := 0, len(s) - 1

	for left &lt; right {
		if s[left] != s[right] {
			return false
		}
		left++
		right--
	}
	return true
}
</code></pre>]]></content></item><item><title>Leetcode 1016</title><link>https://nathannaveen.dev/posts/leetcode-1016/</link><pubDate>Fri, 26 Feb 2021 13:58:32 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1016/</guid><description>1016. Binary String With Substrings Representing 1 To N
The idea of this solution is to loop through 1...N and then make the string by adding the bytes to a string called s. Then check if S contains the reversed string of the bytes. The string s is reversed by a helper function.
func queryString(S string, N int) bool { for i := 1; i &amp;lt;= N; i++ { s := &amp;quot;&amp;quot; n := i for n &amp;gt; 0 { if n &amp;amp; 1 == 1 { s += &amp;quot;1&amp;quot; } else { s += &amp;quot;0&amp;quot; } n &amp;gt;&amp;gt;= 1 } if !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n/">1016. Binary String With Substrings Representing 1 To N</a></p>
<p>The idea of this solution is to loop through <code>1...N</code> and then make the string by adding the bytes to a string called <code>s</code>. Then check if <code>S</code> contains the reversed string of the bytes. The string <code>s</code> is reversed by a helper function.</p>
<pre tabindex="0"><code>func queryString(S string, N int) bool {
    for i := 1; i &lt;= N; i++ {
        s := &quot;&quot;
        n := i

        for n &gt; 0 {
            if n &amp; 1 == 1 {
                s += &quot;1&quot;
            } else {
                s += &quot;0&quot;
            }
            n &gt;&gt;= 1
        }
        if !strings.Contains(S, reverse(s)) {
            return false
        }
    }
    return true
}

func reverse(s string) string {
    res := &quot;&quot;

    for _, i := range s {
        res = string(i) + res
    }
    return res
}
</code></pre><p>This solution is pretty much the same as the first solution but this solution doesn&rsquo;t use a outside function to reverse.</p>
<pre tabindex="0"><code>func queryString(S string, N int) bool {
    for i := 1; i &lt;= N; i++ {
        s := &quot;&quot;
        n := i

        for n &gt; 0 {
            if n&amp;1 == 1 {
                s = &quot;1&quot; + s
            } else {
                s = &quot;0&quot; + s
            }
            n &gt;&gt;= 1
        }
        if !strings.Contains(S, s) {
            return false
        }
    }
    return true
}
</code></pre>]]></content></item><item><title>Leetcode 946</title><link>https://nathannaveen.dev/posts/leetcode-946/</link><pubDate>Fri, 26 Feb 2021 10:59:38 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-946/</guid><description>The idea of this solution is to append the pushed value to the stack. If peeked value is equal to the poped value then pop it off the stack, keep poping off the peeked value if it is equal to the poped value. This can be show in an image
func validateStackSequences(pushed []int, popped []int) bool { stack := []int{} popCounter := 0 for i := 0; i &amp;lt; len(pushed); i++ { stack = append(stack, pushed[i]) for len(stack) !</description><content type="html"><![CDATA[<p>The idea of this solution is to append the pushed value to the stack. If peeked value is equal to the poped value then pop it off the stack, keep poping off the peeked value if it is equal to the poped value. This can be show in an image</p>
<p><img src="https://i.imgur.com/ovNR5Oy.jpg" alt=""></p>
<pre tabindex="0"><code>func validateStackSequences(pushed []int, popped []int) bool {
    stack := []int{}
    popCounter := 0
    for i := 0; i &lt; len(pushed); i++ {
        stack = append(stack, pushed[i])
        for len(stack) != 0 &amp;&amp; popped[popCounter] == stack[len(stack)-1] {
            stack = stack[:len(stack)-1]
            popCounter++
            if popCounter == len(popped) {
                break
            }
        }
    }

    return len(stack) == 0
}
</code></pre>]]></content></item><item><title>Leetcode 448</title><link>https://nathannaveen.dev/posts/leetcode-448/</link><pubDate>Fri, 26 Feb 2021 10:28:29 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-448/</guid><description>448. Find All Numbers Disappeared in an Array
The idea of this solution is to add all the numbers to a map and then check whether the map doesn&amp;rsquo;t contain a number. If it doesn&amp;rsquo;t contain then add it to the array arr.
We return the array from the first position to the end because when we make the array it comes out with a 0 at the zeroth index. For example a input array could be [4,3,2,7,8,2,3,1].</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">448. Find All Numbers Disappeared in an Array</a></p>
<p>The idea of this solution is to add all the numbers to a map and then check whether the map doesn&rsquo;t contain a number. If it doesn&rsquo;t contain then add it to the array <code>arr</code>.</p>
<p>We return the array from the first position to the end because when we make the array it comes out with a <code>0</code> at the zeroth index. For example a input array could be <code>[4,3,2,7,8,2,3,1]</code>. If we just returned <code>arr</code> then we would get <code>[0, 5, 6]</code> instead of <code>[5, 6]</code>. This can also be fixed by making <code>i</code> in the second loop start at <code>1</code> instead of <code>0</code>.</p>
<pre tabindex="0"><code>func findDisappearedNumbers(nums []int) []int {

    m := make(map[int]int)
    arr := []int{}

    for _, i := range nums {
        m[i]++
    }

    for i := 0; i &lt;= len(nums); i++ {
        if _, ok := m[i]; !ok {
            arr = append(arr, i)
        }
    }
    return arr[1:]
}
</code></pre>]]></content></item><item><title>Leetcode 1704</title><link>https://nathannaveen.dev/posts/leetcode-1704/</link><pubDate>Thu, 25 Feb 2021 20:22:25 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1704/</guid><description>The idea of this solution is to first make the input string lowercase, and then add 1 to an integer array at the index of every letter, a = 0, b = 1, c = 2.... First we add to the array called first, then starting at a certain index start adding it to second.
After that, add the number of vowel that have occured. The code does this by doing</description><content type="html"><![CDATA[<p>The idea of this solution is to first make the input string lowercase, and then add <code>1</code> to an integer array at the index of every letter, <code>a = 0, b = 1, c = 2...</code>. First we add to the array called <code>first</code>, then starting at a certain index start adding it to <code>second</code>.</p>
<p>After that, add the number of vowel that have occured. The code does this by doing</p>
<pre tabindex="0"><code>firstCounter += first[0] + first[4] + first[8] + first[14] + first[20]
secondCounter += second[0] + second[4] + second[8] + second[14] + second[20]
</code></pre><p>You might be wondering why the code is adding from <code>first</code> and <code>second</code> at the indices <code>0, 4, 8, 14, 20</code>. It is because the ascii values of <code>'a', 'e', 'i', 'o', 'u'</code> are <code>97, 101, 105, 111, 117</code>, and when they get the indices of <code>a = 0, b = 1, c = 2...</code> it is bascily subtracting <code>97</code> from each of them, so <code>97 - 97 = 0, 101 - 97 = 4, 105 - 97 = 8, 111 - 97 = 14, 117 - 97 = 20</code>.</p>
<p>All of this can be show with a example:</p>
<pre tabindex="0"><code>input = &quot;TacosAreCool&quot;
output = true
</code></pre><p>First off we have to make the input lower case so it becomes <code>&quot;tacosarecool&quot;</code>.</p>
<p>Next we can add all the characters from to their appropriate arrays.</p>
<p><img src="https://i.imgur.com/kYBK5as.jpg" alt=""></p>
<p>You might be wondering why it says <code>tacosa</code> and <code>recool</code>. The front part of the word is <code>tacosa</code> and the back part is <code>recool</code> when the length of the string is divided by two, <code>len(tacosa) == 6</code> and <code>len(recool) == 6</code>. combine they make <code>tacosarecool</code>.</p>
<p>Then we need to add all the vowels together.</p>
<p><img src="https://i.imgur.com/DEf68sC.jpg" alt=""></p>
<p>The number of vowels for <code>tacosa</code> is <code>3</code> because there are two <code>a</code>&rsquo;s and one <code>o</code>. The number of vowels for <code>recool</code> is <code>3</code> as well, because there is one <code>e</code> and two <code>o</code>&rsquo;s.</p>
<p>Since both <code>tacosa</code> and <code>recool</code> both have the same amount of vowels we return <code>true</code>.</p>
<pre tabindex="0"><code>func halvesAreAlike(s string) bool {
    first, second := make([]int, 26), make([]int, 26)
    firstCounter, secondCounter := 0, 0
    s = strings.ToLower(s)
    for i, i2 := range s {
        if i &lt; len(s)/2 {
            first[int(i2-'a')]++
        } else {
            second[int(i2-'a')]++
        }
    }

    firstCounter += first[0] + first[4] + first[8] + first[14] + first[20]
    secondCounter += second[0] + second[4] + second[8] + second[14] + second[20]

    return firstCounter == secondCounter
}
</code></pre>]]></content></item><item><title>Leetcode 1592</title><link>https://nathannaveen.dev/posts/leetcode-1592/</link><pubDate>Thu, 25 Feb 2021 15:48:58 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1592/</guid><description>1592. Rearrange Spaces Between Words
The idea of this solution is pretty simple, first split text by space. We have to split it manualy and not use a inbuild function because the text can contain multiple spaces inbetween words, and we have to count spaces. This can be show in an example:
input = &amp;quot; this is a sentence &amp;quot; inbuiltSplit = [&amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;this&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;sentence&amp;quot;, &amp;quot;&amp;quot;] The Code:</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rearrange-spaces-between-words/">1592. Rearrange Spaces Between Words</a></p>
<p>The idea of this solution is pretty simple, first split <code>text</code> by space. We have to split it manualy and not use a inbuild function because the text can contain multiple spaces inbetween words, and we have to count spaces. This can be show in an example:</p>
<pre tabindex="0"><code>input = &quot;  this   is  a sentence &quot;

inbuiltSplit = [&quot;&quot;, &quot;&quot;, &quot;this&quot;, &quot;&quot;, &quot;&quot;, &quot;is&quot;, &quot;&quot;, &quot;a&quot;, &quot;sentence&quot;, &quot;&quot;]
</code></pre><p><strong>The Code:</strong></p>
<pre tabindex="0"><code>func reorderSpaces(text string) string {
    spaceCounter := 0
    arr := []string{}
    str := &quot;&quot;
    res := &quot;&quot;
    for _, i := range text {
        if i == ' ' {
            if str != &quot;&quot; {
                arr = append(arr, str)
            }
            spaceCounter++
            str = &quot;&quot;
        } else {
            str += string(i)
        }
    }
    if str != &quot;&quot; {
        arr = append(arr, str)
    }
    space := &quot;&quot;

    if len(arr)-1 &gt; 0 {
        for i := 0; i &lt; spaceCounter/(len(arr)-1); i++ {
            space += &quot; &quot;
        }
        for i := 0; i &lt; len(arr)-1; i++ {
            res += arr[i] + space
        }
        res += arr[len(arr)-1]
        for i := 0; i &lt; spaceCounter%(len(arr)-1); i++ {
            res += &quot; &quot;
        }
    } else {
        for i := 0; i &lt; spaceCounter; i++ {
            space += &quot; &quot;
        }
        res = strings.Trim(text, space) + space
    }
    return res
}
</code></pre>]]></content></item><item><title>Leetcode 501</title><link>https://nathannaveen.dev/posts/leetcode-501/</link><pubDate>Thu, 25 Feb 2021 15:48:23 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-501/</guid><description>501. Find Mode in Binary Search Tree
The idea of this solution is to iterate through the tree, and add all the values to a map. Then get all the max values of the map and add them to the result array.
func findMode(root *TreeNode) []int { max := 0 m := make(map[int]int) res := []int{} stack := []*TreeNode{} stack = append(stack, root) for len(stack) != 0 { pop := stack[len(stack)-1] stack = stack[:len(stack)-1] if pop !</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree">501. Find Mode in Binary Search Tree</a></p>
<p>The idea of this solution is to iterate through the tree, and add all the values to a map. Then get all the max values of the map and add them to the result array.</p>
<pre tabindex="0"><code>func findMode(root *TreeNode) []int {
    max := 0
    m := make(map[int]int)
    res := []int{}
    stack := []*TreeNode{}
    stack = append(stack, root)

    for len(stack) != 0 {
        pop := stack[len(stack)-1]
        stack = stack[:len(stack)-1]

        if pop != nil {
            m[pop.Val]++
            stack = append(stack, pop.Left, pop.Right)
        }
    }

    for i, i2 := range m {
        if i2 &gt; max {
            res = []int{i}
            max = i2
        } else if i2 == max {
            res = append(res, i)
        }
    }
    return res
}
</code></pre>]]></content></item><item><title>Leetcode 1768</title><link>https://nathannaveen.dev/posts/leetcode-1768/</link><pubDate>Thu, 25 Feb 2021 15:48:01 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1768/</guid><description>1768. Merge Strings Alternately
The idea of this solution is pretty simple. First loop through the word with the greater length. Then check whether the length of the word is greater than the current characters index, if so then add the character to the result.
func mergeAlternately(word1 string, word2 string) string { res := &amp;quot;&amp;quot; for i := 0; i &amp;lt; int(math.Max(float64(len(word1)), float64(len(word2)))); i++ { if i &amp;lt; len(word1) { res += string(word1[i]) } if i &amp;lt; len(word2) { res += string(word2[i]) } } return res }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-strings-alternately/">1768. Merge Strings Alternately</a></p>
<p>The idea of this solution is pretty simple. First loop through the word with the greater length. Then check whether the length of the word is greater than the current characters index, if so then add the character to the result.</p>
<pre tabindex="0"><code>func mergeAlternately(word1 string, word2 string) string {
    res := &quot;&quot;

    for i := 0; i &lt; int(math.Max(float64(len(word1)), float64(len(word2)))); i++ {
        if i &lt; len(word1) {
            res += string(word1[i])
        }
        if i &lt; len(word2) {
            res += string(word2[i])
        }
    }

    return res
}
</code></pre>]]></content></item><item><title>Leetcode 1296</title><link>https://nathannaveen.dev/posts/leetcode-1296/</link><pubDate>Thu, 25 Feb 2021 15:47:35 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1296/</guid><description>Divide array in sets of k consecutive numbers
The idea of this solution is to loop over the nums array until all the values are -1. The reason they all will become negative one is, whenever a item is used the value will become -1 so the code knows to not use that number again.
If you didn&amp;rsquo;t understand the explanation this can be shown using the code on the bottom, an example and some pictures: By the way sorry if my handwriting is messy</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/">Divide array in sets of k consecutive numbers</a></p>
<p>The idea of this solution is to loop over the <code>nums</code> array until all the values are <code>-1</code>. The reason they all will become negative one is, whenever a item is used the value will become <code>-1</code> so the code knows to not use that number again.</p>
<p><strong>If you didn&rsquo;t understand the explanation this can be shown using the code on the bottom, an example and some pictures:</strong>
<em>By the way sorry if my handwriting is messy</em></p>
<pre tabindex="0"><code>input = [1, 2, 4, 3, 4, 5, 6, 3], k = 4
expected output = true
</code></pre><p>This is for getting the first consecutive sequence:
<img src="https://assets.leetcode.com/users/images/cfc0f0b7-8ffc-4ab0-8b83-143691f75526_1614179878.874795.png" alt="image"></p>
<p>And the second consecutive sequence:
<img src="https://assets.leetcode.com/users/images/eb4d3251-f7a8-4fe4-a3d2-ee89a0cc4e42_1614180843.1899865.png" alt="image"></p>
<p>Since we found two consecutive sequences we can return <code>true</code>.</p>
<hr>
<pre tabindex="0"><code>func isPossibleDivide(nums []int, k int) bool {
	if len(nums)%k != 0 {
		return false
	}
	sort.Ints(nums)
	onlyNegetiveOnes := false

	for !onlyNegetiveOnes {
		onlyNegetiveOnes = true
		n := -1
		counter := 0
		for i := 0; i &lt; len(nums); i++ {
			if nums[i] != -1 {
				onlyNegetiveOnes = false
				if (n == -1) || (counter != k &amp;&amp; nums[i] == n+1) {
					n = nums[i]
					nums[i] = -1
					counter++
				} else if counter == k {
					break
				}
			}
		}
		if counter != k &amp;&amp; counter != 0 {
			return false
		}
	}
	return true
}
</code></pre>]]></content></item><item><title>Leetcode 1566</title><link>https://nathannaveen.dev/posts/leetcode-1566/</link><pubDate>Thu, 25 Feb 2021 15:46:57 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1566/</guid><description>1566. Detect Pattern of Length M Repeated K or More Times The idea of this can be show by this image
func containsPattern(arr []int, m int, k int) bool { counter := 0 for i := 0; i &amp;lt; len(arr) - m; i++ { if arr[i] != arr[i+m] { counter = 0 } else { counter++ } if counter == (k-1)*m { return true } } return false }</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/">1566. Detect Pattern of Length M Repeated K or More Times</a>
The idea of this can be show by this image</p>
<p><img src="https://i.imgur.com/XEPQ2YV.jpg" alt=""></p>
<pre tabindex="0"><code>func containsPattern(arr []int, m int, k int) bool {
    counter := 0

    for i := 0; i &lt; len(arr) - m; i++ {
        if arr[i] != arr[i+m] {
            counter = 0
        } else {
            counter++
        }

        if counter == (k-1)*m {
            return true
        }
    }

    return false
}
</code></pre>]]></content></item><item><title>Leetcode 976</title><link>https://nathannaveen.dev/posts/leetcode-976/</link><pubDate>Thu, 25 Feb 2021 13:50:15 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-976/</guid><description>976. Largest Perimeter Triangle
The idea of this solution is to sort the array and then keep on checking the largest three side lengths.
In the problem it asks us to &amp;ldquo;return the largest perimeter of a triangle with non-zero area.&amp;rdquo; Non-zero area means a triangle with the two smaller side lengths that add up to be greater than the greatest side length. This can be show in a couple images</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/largest-perimeter-triangle">976. Largest Perimeter Triangle</a></p>
<p>The idea of this solution is to sort the array and then keep on checking the largest three side lengths.</p>
<p>In the problem it asks us to &ldquo;return the largest perimeter of a triangle with non-zero area.&rdquo; Non-zero area means a triangle with the two smaller side lengths that add up to be greater than the greatest side length. This can be show in a couple images</p>
<p><img src="https://i.imgur.com/YOk3LWq.jpg" alt="">
<em>The triangle above is a proper triangle with an area greater than zero and we know that because the two smaller lengths, <code>5</code> and <code>5</code> added together is <code>10 &gt; 7</code>.</em>
<img src="https://i.imgur.com/HlspeLO.jpg" alt="">
<em>In the image above we can see that this is not a proper triangle because the area is zero. We know that this is not a proper triangle because the two smaller sides lengths are <code>4</code> and <code>3</code>. Four plus three is <code>7</code> and <code>7</code> is the length of the greatest triangle. So we don&rsquo;t have a triangle.</em></p>
<p><img src="https://i.imgur.com/LRxVW4L.jpg" alt="">
<img src="https://i.imgur.com/H1ySPp7.jpg" alt=""></p>
<p><em>The two images above are not proper triangles because the length of the two smaller sides are smaller than <code>7</code> and won&rsquo;t be able to form a triangle.</em></p>
<pre tabindex="0"><code>func largestPerimeter(A []int) int {
    sort.Ints(A)
    for i := len(A) - 1; i &gt;= 2; i-- {
        if A[i] &lt; A[i - 1] + A[i - 2] {
            return A[i] + A[i - 1] + A[i - 2]
        }
    }
    return 0
}
</code></pre>]]></content></item><item><title>Leetcode 1523</title><link>https://nathannaveen.dev/posts/leetcode-1523/</link><pubDate>Wed, 24 Feb 2021 17:03:24 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1523/</guid><description>1523. Count Odd Numbers in an Interval Range
The idea of this solution is to get the number odd numbers from 0 to high, and then subtract the number of odd numbers from 0 to low - 1. The idea can be shown by an example:
high: 7 low : 3 The odd numbers from 0 to high (7). There are 4 odd numbers from 0 to 7. The odd numbers from 0 to low - 1 (2).</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/">1523. Count Odd Numbers in an Interval Range</a></p>
<p>The idea of this solution is to get the number odd numbers from <code>0</code> to <code>high</code>, and then subtract the number of odd numbers from <code>0</code> to <code>low - 1</code>. The idea can be shown by an example:</p>
<hr>
<pre tabindex="0"><code>high: 7
low : 3
</code></pre><p><img src="https://assets.leetcode.com/users/images/2ca6929e-c01e-491f-9505-85dc303d779a_1614122599.638341.png" alt="image"></p>
<ul>
<li><em>The odd numbers from <code>0</code> to <code>high</code> (<code>7</code>).</em> There are <code>4</code> odd numbers from <code>0</code> to <code>7</code>.</li>
</ul>
<p><img src="https://assets.leetcode.com/users/images/0b5c316a-d1ed-426a-889f-2741c8b861f4_1614122953.1401534.png" alt="image"></p>
<ul>
<li><em>The odd numbers from <code>0</code> to <code>low - 1</code> (<code>2</code>).</em> There is <code>1</code> odd numbers from <code>0</code> to <code>2</code>.</li>
</ul>
<p>The number of odd numbers would be <code>4 - 1 = 3</code>. Three odd numbers.</p>
<hr>
<pre tabindex="0"><code>func countOdds(low int, high int) int {
	return (high + 1)/2 - low / 2
}
</code></pre>]]></content></item><item><title>Leetcode 1637</title><link>https://nathannaveen.dev/posts/leetcode-1637/</link><pubDate>Wed, 24 Feb 2021 16:52:08 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-1637/</guid><description>1637. Widest Vertical Area Between Two Points Containing No Points
points = {x, y} The idea of this solution is to ignore the y part of points because the vertical area is the made of vertical lines. Vertical lines are made up off one x value for every y value. An example could be the line x = 3, this is a vertical line at the x value 3.</description><content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/">1637. Widest Vertical Area Between Two Points Containing No Points</a></p>
<pre><code>points = {x, y}
</code></pre>
<p>The idea of this solution is to ignore the <code>y</code> part of <code>points</code> because the vertical area is the made of vertical lines. Vertical lines are made up off one <code>x</code> value for every <code>y</code> value. An example could be the line <code>x = 3</code>, this is a vertical line at the x value <code>3</code>.</p>
<p>The code first puts all the <code>x</code> points in the array <code>xPoints</code>. Then it sorts <code>xPoints</code> so all the <code>x</code>&rsquo;s are ready to use a sliding window approche of size two to find the greatest distance between all the two points. This can be show with this picture:</p>
<pre tabindex="0"><code>input: [[8, 7], [9, 9], [7, 4], [9, 7]]
output: 1
</code></pre><p><img src="https://assets.leetcode.com/users/images/84ee2492-0703-4617-a38e-6691b4bcc3ea_1614125888.3422618.png" alt="image"></p>
<ul>
<li>Find all the <code>x</code>&rsquo;s and add them to a array</li>
<li>Sort the <code>x</code>&rsquo;s</li>
<li>Use a sliding window to find the max difference each <code>x</code> value.</li>
</ul>
<hr>
<pre tabindex="0"><code>func maxWidthOfVerticalArea(points [][]int) int {
	xPoints := []int{}
	for _, point := range points {
		xPoints = append(xPoints, point[0])
	}
	sort.Ints(xPoints)
	max := 0

	for i := 0; i &lt; len(xPoints)-1; i++ {
		if xPoints[i+1]-xPoints[i] &gt; max {
			max = xPoints[i+1] - xPoints[i]
		}
	}

	return max
}
</code></pre>]]></content></item></channel></rss>