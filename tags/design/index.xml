<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design on nathan naveen</title><link>https://nathannaveen.dev/tags/design/</link><description>Recent content in design on nathan naveen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 19 Jan 2022 13:00:19 -0600</lastBuildDate><atom:link href="https://nathannaveen.dev/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode 353</title><link>https://nathannaveen.dev/posts/leetcode-353/</link><pubDate>Wed, 19 Jan 2022 13:00:19 -0600</pubDate><guid>https://nathannaveen.dev/posts/leetcode-353/</guid><description>353. Design Snake Game
For SnakeGame I have a lot of pramaters, and it might be hard to understand this solution is you don&amp;rsquo;t understand them. So:
counter int → The amount of food that the snake has eaten. height int → The height of the matrix. width int → The width of the matrix. food [][]int → The positions of the food. foodCounter int → What food we are on (i.</description></item><item><title>Leetcode 933</title><link>https://nathannaveen.dev/posts/leetcode-933/</link><pubDate>Tue, 06 Jul 2021 18:25:16 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-933/</guid><description>933. Number of Recent Calls
For this solution, we have got to look at something that is said in the problem description:
It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.
So using that, we can make a variable (Which I called k) and store the position of the last position of the value that is greater than or equal to t - 3000.</description></item><item><title>Leetcode 170</title><link>https://nathannaveen.dev/posts/leetcode-170/</link><pubDate>Tue, 06 Jul 2021 18:24:38 -0500</pubDate><guid>https://nathannaveen.dev/posts/leetcode-170/</guid><description>170. Two Sum III - Data structure design
I have to admit that this is not the best solution to solve this problem, but I think it is the easiest to understand. For all we do is:
Append to this.arr to Add(number). And use a two-pointer approach for Find(value). type TwoSum struct { arr []int } /** Initialize your data structure here. */ func Constructor() TwoSum { return TwoSum{[]int{}} } /** Add the number to an internal data structure.</description></item></channel></rss>