<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent Of Code on nathan naveen</title><link>https://nathannaveen.dev/tags/advent-of-code/</link><description>Recent content in Advent Of Code on nathan naveen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><atom:link href="https://nathannaveen.dev/tags/advent-of-code/index.xml" rel="self" type="application/rss+xml"/><item><title>2021 Advent of code day 10</title><link>https://nathannaveen.dev/sink/advent-of-code-day-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/sink/advent-of-code-day-10/</guid><description>Day 10 puzzle
The idea of both solutions is to just use a stack.
For the first part we just have to detect whether we have an incorrect line.
func oneDay10() int { input, _ := ioutil.ReadFile(&amp;#34;input10.txt&amp;#34;) var arr = strings.Split(string(input), &amp;#34;\n&amp;#34;) res := 0 for _, line := range arr { stack := []string{} for i := 0; i &amp;lt; len(line); i++ { char := string(line[i]) if char == &amp;#34;(&amp;#34; || char == &amp;#34;[&amp;#34; || char == &amp;#34;{&amp;#34; || char == &amp;#34;&amp;lt;&amp;#34; { stack = append(stack, char) } else { pop := stack[len(stack)-1] stack = stack[:len(stack)-1] if char == &amp;#34;)&amp;#34; &amp;amp;&amp;amp; pop !</description></item><item><title>2021 Advent of code day 11</title><link>https://nathannaveen.dev/sink/advent-of-code-day-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/sink/advent-of-code-day-11/</guid><description>Day 11 puzzle
For day 11, part 1 was pretty easy. For part two I tried all types of different solutions, but all I could get working is the brute force approach.
I by mistake wrote my part 2 code over my part one code, so here it is:
type p struct { i, j int } var arr = [][]int{} func twoDay11() int { input, _ := ioutil.</description></item><item><title>2021 Advent of code day 12</title><link>https://nathannaveen.dev/sink/advent-of-code-day-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/sink/advent-of-code-day-12/</guid><description>Day 12 puzzle
I got to both of my solutions by thing of them as a tree.
For part one we can use a DFS approach. Basically find every path from &amp;quot;start&amp;quot; to &amp;quot;end&amp;quot;. And if we find a lowercase word we can add it to a map, so we know we have visited that position.
Part two is pretty similar, we can pretty much the same thing, but we have to check if only one of the lowercase letters has been looped over twice, so I made a variable called hasDoneTwice.</description></item><item><title>2021 Advent of code day 3</title><link>https://nathannaveen.dev/sink/advent-of-code-day-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/sink/advent-of-code-day-3/</guid><description>Advent Of Code Day 3 2021
Part One The first solution is pretty simple, so I just brute forced it.
func oneDay3() { file, err := os.Open(&amp;#34;input3.txt&amp;#34;) if err != nil { panic(err) } defer file.Close() scanner := bufio.NewScanner(file) arr := make([]int, 12) gamma := 0 epsilon := 0 pos := 1 for scanner.Scan() { temp := scanner.</description></item><item><title>2021 Advent of code day 8</title><link>https://nathannaveen.dev/sink/advent-of-code-day-8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/sink/advent-of-code-day-8/</guid><description>Day 8 Puzzle
func oneDay8() { file, err := os.Open(&amp;#34;input8.txt&amp;#34;) // opening the file if err != nil { panic(err) } defer file.Close() scanner := bufio.NewScanner(file) res := 0 for scanner.Scan() { temp := scanner.Text() // getting the line arr := strings.Split(temp, &amp;#34; | &amp;#34;) words := strings.Split(arr[1], &amp;#34; &amp;#34;) for _, s := range words { if len(s) == 2 || len(s) == 4 || len(s) == 3 || len(s) == 7 { res++ } } } fmt.</description></item><item><title>2021 Advent of code day 9</title><link>https://nathannaveen.dev/sink/advent-of-code-day-9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/sink/advent-of-code-day-9/</guid><description>Day 9 puzzle
Part One I think that the first part of day 9 was pretty easy, just check every values and whether it is smaller than all the adjacent values. If so add that value plus 1 to res.
func oneDay9() { input, _ := ioutil.ReadFile(&amp;#34;input9.txt&amp;#34;) var arr = strings.Split(string(input), &amp;#34;\n&amp;#34;) res := 0 i, j := 0, 0 isLow := func(y, x int) bool { // I put this function inside twoDay9() // because then I wouldn&amp;#39;t have to parse i, j, and arr which would make it really messy.</description></item></channel></rss>