<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent Of Code on nathan naveen</title><link>https://nathannaveen.dev/tags/advent-of-code/</link><description>Recent content in Advent Of Code on nathan naveen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 07 Dec 2021 14:43:35 -0600</lastBuildDate><atom:link href="https://nathannaveen.dev/tags/advent-of-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of code day 3 2021</title><link>https://nathannaveen.dev/adventofcode/advent-of-code-day-3/</link><pubDate>Tue, 07 Dec 2021 14:43:35 -0600</pubDate><guid>https://nathannaveen.dev/adventofcode/advent-of-code-day-3/</guid><description>Advent Of Code Day 3 2021
Part One The first solution is pretty simple, so I just brute forced it.
func oneDay3() { file, err := os.Open(&amp;#34;input3.txt&amp;#34;) if err != nil { panic(err) } defer file.Close() scanner := bufio.NewScanner(file) arr := make([]int, 12) gamma := 0 epsilon := 0 pos := 1 for scanner.Scan() { temp := scanner.Text() for i := 0; i &amp;lt; len(temp); i++ { if temp[i] == &amp;#39;1&amp;#39; { arr[i]++ } else { arr[i]-- } } } for i := len(arr) - 1; i &amp;gt;= 0; i-- { if arr[i] &amp;gt; 0 { gamma += pos } else { epsilon += pos } pos *= 2 } fmt.</description></item><item><title>Advent of Code Day 8 2021</title><link>https://nathannaveen.dev/adventofcode/advent-of-code-day-8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nathannaveen.dev/adventofcode/advent-of-code-day-8/</guid><description>Day 8 Puzzle
func oneDay8() { file, err := os.Open(&amp;#34;input8.txt&amp;#34;) // opening the file if err != nil { panic(err) } defer file.Close() scanner := bufio.NewScanner(file) res := 0 for scanner.Scan() { temp := scanner.Text() // getting the line arr := strings.Split(temp, &amp;#34; | &amp;#34;) words := strings.Split(arr[1], &amp;#34; &amp;#34;) for _, s := range words { if len(s) == 2 || len(s) == 4 || len(s) == 3 || len(s) == 7 { res++ } } } fmt.</description></item></channel></rss>